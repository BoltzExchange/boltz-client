// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package onchain

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockFeeProvider creates a new instance of MockFeeProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFeeProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFeeProvider {
	mock := &MockFeeProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFeeProvider is an autogenerated mock type for the FeeProvider type
type MockFeeProvider struct {
	mock.Mock
}

type MockFeeProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFeeProvider) EXPECT() *MockFeeProvider_Expecter {
	return &MockFeeProvider_Expecter{mock: &_m.Mock}
}

// EstimateFee provides a mock function for the type MockFeeProvider
func (_mock *MockFeeProvider) EstimateFee() (float64, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for EstimateFee")
	}

	var r0 float64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (float64, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() float64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(float64)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeeProvider_EstimateFee_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EstimateFee'
type MockFeeProvider_EstimateFee_Call struct {
	*mock.Call
}

// EstimateFee is a helper method to define mock.On call
func (_e *MockFeeProvider_Expecter) EstimateFee() *MockFeeProvider_EstimateFee_Call {
	return &MockFeeProvider_EstimateFee_Call{Call: _e.mock.On("EstimateFee")}
}

func (_c *MockFeeProvider_EstimateFee_Call) Run(run func()) *MockFeeProvider_EstimateFee_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFeeProvider_EstimateFee_Call) Return(f float64, err error) *MockFeeProvider_EstimateFee_Call {
	_c.Call.Return(f, err)
	return _c
}

func (_c *MockFeeProvider_EstimateFee_Call) RunAndReturn(run func() (float64, error)) *MockFeeProvider_EstimateFee_Call {
	_c.Call.Return(run)
	return _c
}
