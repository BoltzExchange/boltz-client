// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package onchain

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockBlockProvider creates a new instance of MockBlockProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlockProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlockProvider {
	mock := &MockBlockProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBlockProvider is an autogenerated mock type for the BlockProvider type
type MockBlockProvider struct {
	mock.Mock
}

type MockBlockProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlockProvider) EXPECT() *MockBlockProvider_Expecter {
	return &MockBlockProvider_Expecter{mock: &_m.Mock}
}

// GetBlockHeight provides a mock function for the type MockBlockProvider
func (_mock *MockBlockProvider) GetBlockHeight() (uint32, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBlockHeight")
	}

	var r0 uint32
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (uint32, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() uint32); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(uint32)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBlockProvider_GetBlockHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockHeight'
type MockBlockProvider_GetBlockHeight_Call struct {
	*mock.Call
}

// GetBlockHeight is a helper method to define mock.On call
func (_e *MockBlockProvider_Expecter) GetBlockHeight() *MockBlockProvider_GetBlockHeight_Call {
	return &MockBlockProvider_GetBlockHeight_Call{Call: _e.mock.On("GetBlockHeight")}
}

func (_c *MockBlockProvider_GetBlockHeight_Call) Run(run func()) *MockBlockProvider_GetBlockHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBlockProvider_GetBlockHeight_Call) Return(v uint32, err error) *MockBlockProvider_GetBlockHeight_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockBlockProvider_GetBlockHeight_Call) RunAndReturn(run func() (uint32, error)) *MockBlockProvider_GetBlockHeight_Call {
	_c.Call.Return(run)
	return _c
}
