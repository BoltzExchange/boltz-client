// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package onchain

import (
	"github.com/BoltzExchange/boltz-client/v2/internal/onchain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockChainProvider creates a new instance of MockChainProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChainProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChainProvider {
	mock := &MockChainProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockChainProvider is an autogenerated mock type for the ChainProvider type
type MockChainProvider struct {
	mock.Mock
}

type MockChainProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChainProvider) EXPECT() *MockChainProvider_Expecter {
	return &MockChainProvider_Expecter{mock: &_m.Mock}
}

// BroadcastTransaction provides a mock function for the type MockChainProvider
func (_mock *MockChainProvider) BroadcastTransaction(txHex string) (string, error) {
	ret := _mock.Called(txHex)

	if len(ret) == 0 {
		panic("no return value specified for BroadcastTransaction")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(txHex)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(txHex)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(txHex)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChainProvider_BroadcastTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BroadcastTransaction'
type MockChainProvider_BroadcastTransaction_Call struct {
	*mock.Call
}

// BroadcastTransaction is a helper method to define mock.On call
//   - txHex string
func (_e *MockChainProvider_Expecter) BroadcastTransaction(txHex interface{}) *MockChainProvider_BroadcastTransaction_Call {
	return &MockChainProvider_BroadcastTransaction_Call{Call: _e.mock.On("BroadcastTransaction", txHex)}
}

func (_c *MockChainProvider_BroadcastTransaction_Call) Run(run func(txHex string)) *MockChainProvider_BroadcastTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockChainProvider_BroadcastTransaction_Call) Return(s string, err error) *MockChainProvider_BroadcastTransaction_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockChainProvider_BroadcastTransaction_Call) RunAndReturn(run func(txHex string) (string, error)) *MockChainProvider_BroadcastTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// Disconnect provides a mock function for the type MockChainProvider
func (_mock *MockChainProvider) Disconnect() {
	_mock.Called()
	return
}

// MockChainProvider_Disconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnect'
type MockChainProvider_Disconnect_Call struct {
	*mock.Call
}

// Disconnect is a helper method to define mock.On call
func (_e *MockChainProvider_Expecter) Disconnect() *MockChainProvider_Disconnect_Call {
	return &MockChainProvider_Disconnect_Call{Call: _e.mock.On("Disconnect")}
}

func (_c *MockChainProvider_Disconnect_Call) Run(run func()) *MockChainProvider_Disconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChainProvider_Disconnect_Call) Return() *MockChainProvider_Disconnect_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockChainProvider_Disconnect_Call) RunAndReturn(run func()) *MockChainProvider_Disconnect_Call {
	_c.Run(run)
	return _c
}

// EstimateFee provides a mock function for the type MockChainProvider
func (_mock *MockChainProvider) EstimateFee() (float64, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for EstimateFee")
	}

	var r0 float64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (float64, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() float64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(float64)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChainProvider_EstimateFee_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EstimateFee'
type MockChainProvider_EstimateFee_Call struct {
	*mock.Call
}

// EstimateFee is a helper method to define mock.On call
func (_e *MockChainProvider_Expecter) EstimateFee() *MockChainProvider_EstimateFee_Call {
	return &MockChainProvider_EstimateFee_Call{Call: _e.mock.On("EstimateFee")}
}

func (_c *MockChainProvider_EstimateFee_Call) Run(run func()) *MockChainProvider_EstimateFee_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChainProvider_EstimateFee_Call) Return(f float64, err error) *MockChainProvider_EstimateFee_Call {
	_c.Call.Return(f, err)
	return _c
}

func (_c *MockChainProvider_EstimateFee_Call) RunAndReturn(run func() (float64, error)) *MockChainProvider_EstimateFee_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockHeight provides a mock function for the type MockChainProvider
func (_mock *MockChainProvider) GetBlockHeight() (uint32, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBlockHeight")
	}

	var r0 uint32
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (uint32, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() uint32); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(uint32)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChainProvider_GetBlockHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockHeight'
type MockChainProvider_GetBlockHeight_Call struct {
	*mock.Call
}

// GetBlockHeight is a helper method to define mock.On call
func (_e *MockChainProvider_Expecter) GetBlockHeight() *MockChainProvider_GetBlockHeight_Call {
	return &MockChainProvider_GetBlockHeight_Call{Call: _e.mock.On("GetBlockHeight")}
}

func (_c *MockChainProvider_GetBlockHeight_Call) Run(run func()) *MockChainProvider_GetBlockHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChainProvider_GetBlockHeight_Call) Return(v uint32, err error) *MockChainProvider_GetBlockHeight_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockChainProvider_GetBlockHeight_Call) RunAndReturn(run func() (uint32, error)) *MockChainProvider_GetBlockHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetRawTransaction provides a mock function for the type MockChainProvider
func (_mock *MockChainProvider) GetRawTransaction(txId string) (string, error) {
	ret := _mock.Called(txId)

	if len(ret) == 0 {
		panic("no return value specified for GetRawTransaction")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(txId)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(txId)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(txId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChainProvider_GetRawTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRawTransaction'
type MockChainProvider_GetRawTransaction_Call struct {
	*mock.Call
}

// GetRawTransaction is a helper method to define mock.On call
//   - txId string
func (_e *MockChainProvider_Expecter) GetRawTransaction(txId interface{}) *MockChainProvider_GetRawTransaction_Call {
	return &MockChainProvider_GetRawTransaction_Call{Call: _e.mock.On("GetRawTransaction", txId)}
}

func (_c *MockChainProvider_GetRawTransaction_Call) Run(run func(txId string)) *MockChainProvider_GetRawTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockChainProvider_GetRawTransaction_Call) Return(s string, err error) *MockChainProvider_GetRawTransaction_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockChainProvider_GetRawTransaction_Call) RunAndReturn(run func(txId string) (string, error)) *MockChainProvider_GetRawTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetUnspentOutputs provides a mock function for the type MockChainProvider
func (_mock *MockChainProvider) GetUnspentOutputs(address string) ([]*onchain.Output, error) {
	ret := _mock.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for GetUnspentOutputs")
	}

	var r0 []*onchain.Output
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]*onchain.Output, error)); ok {
		return returnFunc(address)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []*onchain.Output); ok {
		r0 = returnFunc(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*onchain.Output)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(address)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChainProvider_GetUnspentOutputs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUnspentOutputs'
type MockChainProvider_GetUnspentOutputs_Call struct {
	*mock.Call
}

// GetUnspentOutputs is a helper method to define mock.On call
//   - address string
func (_e *MockChainProvider_Expecter) GetUnspentOutputs(address interface{}) *MockChainProvider_GetUnspentOutputs_Call {
	return &MockChainProvider_GetUnspentOutputs_Call{Call: _e.mock.On("GetUnspentOutputs", address)}
}

func (_c *MockChainProvider_GetUnspentOutputs_Call) Run(run func(address string)) *MockChainProvider_GetUnspentOutputs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockChainProvider_GetUnspentOutputs_Call) Return(outputs []*onchain.Output, err error) *MockChainProvider_GetUnspentOutputs_Call {
	_c.Call.Return(outputs, err)
	return _c
}

func (_c *MockChainProvider_GetUnspentOutputs_Call) RunAndReturn(run func(address string) ([]*onchain.Output, error)) *MockChainProvider_GetUnspentOutputs_Call {
	_c.Call.Return(run)
	return _c
}

// IsTransactionConfirmed provides a mock function for the type MockChainProvider
func (_mock *MockChainProvider) IsTransactionConfirmed(txId string) (bool, error) {
	ret := _mock.Called(txId)

	if len(ret) == 0 {
		panic("no return value specified for IsTransactionConfirmed")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return returnFunc(txId)
	}
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(txId)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(txId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChainProvider_IsTransactionConfirmed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTransactionConfirmed'
type MockChainProvider_IsTransactionConfirmed_Call struct {
	*mock.Call
}

// IsTransactionConfirmed is a helper method to define mock.On call
//   - txId string
func (_e *MockChainProvider_Expecter) IsTransactionConfirmed(txId interface{}) *MockChainProvider_IsTransactionConfirmed_Call {
	return &MockChainProvider_IsTransactionConfirmed_Call{Call: _e.mock.On("IsTransactionConfirmed", txId)}
}

func (_c *MockChainProvider_IsTransactionConfirmed_Call) Run(run func(txId string)) *MockChainProvider_IsTransactionConfirmed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockChainProvider_IsTransactionConfirmed_Call) Return(b bool, err error) *MockChainProvider_IsTransactionConfirmed_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockChainProvider_IsTransactionConfirmed_Call) RunAndReturn(run func(txId string) (bool, error)) *MockChainProvider_IsTransactionConfirmed_Call {
	_c.Call.Return(run)
	return _c
}
