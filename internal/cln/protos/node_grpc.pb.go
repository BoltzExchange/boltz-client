// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: node.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Node_Getinfo_FullMethodName                        = "/cln.Node/Getinfo"
	Node_ListPeers_FullMethodName                      = "/cln.Node/ListPeers"
	Node_ListFunds_FullMethodName                      = "/cln.Node/ListFunds"
	Node_SendPay_FullMethodName                        = "/cln.Node/SendPay"
	Node_ListChannels_FullMethodName                   = "/cln.Node/ListChannels"
	Node_AddGossip_FullMethodName                      = "/cln.Node/AddGossip"
	Node_AddPsbtOutput_FullMethodName                  = "/cln.Node/AddPsbtOutput"
	Node_AutoCleanOnce_FullMethodName                  = "/cln.Node/AutoCleanOnce"
	Node_AutoCleanStatus_FullMethodName                = "/cln.Node/AutoCleanStatus"
	Node_CheckMessage_FullMethodName                   = "/cln.Node/CheckMessage"
	Node_Close_FullMethodName                          = "/cln.Node/Close"
	Node_ConnectPeer_FullMethodName                    = "/cln.Node/ConnectPeer"
	Node_CreateInvoice_FullMethodName                  = "/cln.Node/CreateInvoice"
	Node_Datastore_FullMethodName                      = "/cln.Node/Datastore"
	Node_DatastoreUsage_FullMethodName                 = "/cln.Node/DatastoreUsage"
	Node_CreateOnion_FullMethodName                    = "/cln.Node/CreateOnion"
	Node_DelDatastore_FullMethodName                   = "/cln.Node/DelDatastore"
	Node_DelInvoice_FullMethodName                     = "/cln.Node/DelInvoice"
	Node_DevForgetChannel_FullMethodName               = "/cln.Node/DevForgetChannel"
	Node_EmergencyRecover_FullMethodName               = "/cln.Node/EmergencyRecover"
	Node_GetEmergencyRecoverData_FullMethodName        = "/cln.Node/GetEmergencyRecoverData"
	Node_ExposeSecret_FullMethodName                   = "/cln.Node/ExposeSecret"
	Node_Recover_FullMethodName                        = "/cln.Node/Recover"
	Node_RecoverChannel_FullMethodName                 = "/cln.Node/RecoverChannel"
	Node_Invoice_FullMethodName                        = "/cln.Node/Invoice"
	Node_CreateInvoiceRequest_FullMethodName           = "/cln.Node/CreateInvoiceRequest"
	Node_DisableInvoiceRequest_FullMethodName          = "/cln.Node/DisableInvoiceRequest"
	Node_ListInvoiceRequests_FullMethodName            = "/cln.Node/ListInvoiceRequests"
	Node_ListDatastore_FullMethodName                  = "/cln.Node/ListDatastore"
	Node_ListInvoices_FullMethodName                   = "/cln.Node/ListInvoices"
	Node_SendOnion_FullMethodName                      = "/cln.Node/SendOnion"
	Node_ListSendPays_FullMethodName                   = "/cln.Node/ListSendPays"
	Node_ListTransactions_FullMethodName               = "/cln.Node/ListTransactions"
	Node_MakeSecret_FullMethodName                     = "/cln.Node/MakeSecret"
	Node_Pay_FullMethodName                            = "/cln.Node/Pay"
	Node_ListNodes_FullMethodName                      = "/cln.Node/ListNodes"
	Node_WaitAnyInvoice_FullMethodName                 = "/cln.Node/WaitAnyInvoice"
	Node_WaitInvoice_FullMethodName                    = "/cln.Node/WaitInvoice"
	Node_WaitSendPay_FullMethodName                    = "/cln.Node/WaitSendPay"
	Node_NewAddr_FullMethodName                        = "/cln.Node/NewAddr"
	Node_Withdraw_FullMethodName                       = "/cln.Node/Withdraw"
	Node_KeySend_FullMethodName                        = "/cln.Node/KeySend"
	Node_FundPsbt_FullMethodName                       = "/cln.Node/FundPsbt"
	Node_SendPsbt_FullMethodName                       = "/cln.Node/SendPsbt"
	Node_SignPsbt_FullMethodName                       = "/cln.Node/SignPsbt"
	Node_UtxoPsbt_FullMethodName                       = "/cln.Node/UtxoPsbt"
	Node_TxDiscard_FullMethodName                      = "/cln.Node/TxDiscard"
	Node_TxPrepare_FullMethodName                      = "/cln.Node/TxPrepare"
	Node_TxSend_FullMethodName                         = "/cln.Node/TxSend"
	Node_ListPeerChannels_FullMethodName               = "/cln.Node/ListPeerChannels"
	Node_ListClosedChannels_FullMethodName             = "/cln.Node/ListClosedChannels"
	Node_DecodePay_FullMethodName                      = "/cln.Node/DecodePay"
	Node_Decode_FullMethodName                         = "/cln.Node/Decode"
	Node_DelPay_FullMethodName                         = "/cln.Node/DelPay"
	Node_DelForward_FullMethodName                     = "/cln.Node/DelForward"
	Node_DisableOffer_FullMethodName                   = "/cln.Node/DisableOffer"
	Node_EnableOffer_FullMethodName                    = "/cln.Node/EnableOffer"
	Node_Disconnect_FullMethodName                     = "/cln.Node/Disconnect"
	Node_Feerates_FullMethodName                       = "/cln.Node/Feerates"
	Node_FetchBip353_FullMethodName                    = "/cln.Node/FetchBip353"
	Node_FetchInvoice_FullMethodName                   = "/cln.Node/FetchInvoice"
	Node_FundChannelCancel_FullMethodName              = "/cln.Node/FundChannelCancel"
	Node_FundChannelComplete_FullMethodName            = "/cln.Node/FundChannelComplete"
	Node_FundChannel_FullMethodName                    = "/cln.Node/FundChannel"
	Node_FundChannelStart_FullMethodName               = "/cln.Node/FundChannelStart"
	Node_GetLog_FullMethodName                         = "/cln.Node/GetLog"
	Node_FunderUpdate_FullMethodName                   = "/cln.Node/FunderUpdate"
	Node_GetRoute_FullMethodName                       = "/cln.Node/GetRoute"
	Node_ListAddresses_FullMethodName                  = "/cln.Node/ListAddresses"
	Node_ListForwards_FullMethodName                   = "/cln.Node/ListForwards"
	Node_ListOffers_FullMethodName                     = "/cln.Node/ListOffers"
	Node_ListPays_FullMethodName                       = "/cln.Node/ListPays"
	Node_ListHtlcs_FullMethodName                      = "/cln.Node/ListHtlcs"
	Node_MultiFundChannel_FullMethodName               = "/cln.Node/MultiFundChannel"
	Node_MultiWithdraw_FullMethodName                  = "/cln.Node/MultiWithdraw"
	Node_Offer_FullMethodName                          = "/cln.Node/Offer"
	Node_OpenChannelAbort_FullMethodName               = "/cln.Node/OpenChannelAbort"
	Node_OpenChannelBump_FullMethodName                = "/cln.Node/OpenChannelBump"
	Node_OpenChannelInit_FullMethodName                = "/cln.Node/OpenChannelInit"
	Node_OpenChannelSigned_FullMethodName              = "/cln.Node/OpenChannelSigned"
	Node_OpenChannelUpdate_FullMethodName              = "/cln.Node/OpenChannelUpdate"
	Node_Ping_FullMethodName                           = "/cln.Node/Ping"
	Node_Plugin_FullMethodName                         = "/cln.Node/Plugin"
	Node_RenePayStatus_FullMethodName                  = "/cln.Node/RenePayStatus"
	Node_RenePay_FullMethodName                        = "/cln.Node/RenePay"
	Node_ReserveInputs_FullMethodName                  = "/cln.Node/ReserveInputs"
	Node_SendCustomMsg_FullMethodName                  = "/cln.Node/SendCustomMsg"
	Node_SendInvoice_FullMethodName                    = "/cln.Node/SendInvoice"
	Node_SetChannel_FullMethodName                     = "/cln.Node/SetChannel"
	Node_SetConfig_FullMethodName                      = "/cln.Node/SetConfig"
	Node_SetPsbtVersion_FullMethodName                 = "/cln.Node/SetPsbtVersion"
	Node_SignInvoice_FullMethodName                    = "/cln.Node/SignInvoice"
	Node_SignMessage_FullMethodName                    = "/cln.Node/SignMessage"
	Node_SpliceInit_FullMethodName                     = "/cln.Node/SpliceInit"
	Node_SpliceSigned_FullMethodName                   = "/cln.Node/SpliceSigned"
	Node_SpliceUpdate_FullMethodName                   = "/cln.Node/SpliceUpdate"
	Node_DevSplice_FullMethodName                      = "/cln.Node/DevSplice"
	Node_UnreserveInputs_FullMethodName                = "/cln.Node/UnreserveInputs"
	Node_UpgradeWallet_FullMethodName                  = "/cln.Node/UpgradeWallet"
	Node_WaitBlockHeight_FullMethodName                = "/cln.Node/WaitBlockHeight"
	Node_Wait_FullMethodName                           = "/cln.Node/Wait"
	Node_ListConfigs_FullMethodName                    = "/cln.Node/ListConfigs"
	Node_Stop_FullMethodName                           = "/cln.Node/Stop"
	Node_Help_FullMethodName                           = "/cln.Node/Help"
	Node_PreApproveKeysend_FullMethodName              = "/cln.Node/PreApproveKeysend"
	Node_PreApproveInvoice_FullMethodName              = "/cln.Node/PreApproveInvoice"
	Node_StaticBackup_FullMethodName                   = "/cln.Node/StaticBackup"
	Node_BkprChannelsApy_FullMethodName                = "/cln.Node/BkprChannelsApy"
	Node_BkprDumpIncomeCsv_FullMethodName              = "/cln.Node/BkprDumpIncomeCsv"
	Node_BkprInspect_FullMethodName                    = "/cln.Node/BkprInspect"
	Node_BkprListAccountEvents_FullMethodName          = "/cln.Node/BkprListAccountEvents"
	Node_BkprListBalances_FullMethodName               = "/cln.Node/BkprListBalances"
	Node_BkprListIncome_FullMethodName                 = "/cln.Node/BkprListIncome"
	Node_BkprEditDescriptionByPaymentId_FullMethodName = "/cln.Node/BkprEditDescriptionByPaymentId"
	Node_BkprEditDescriptionByOutpoint_FullMethodName  = "/cln.Node/BkprEditDescriptionByOutpoint"
	Node_BlacklistRune_FullMethodName                  = "/cln.Node/BlacklistRune"
	Node_CheckRune_FullMethodName                      = "/cln.Node/CheckRune"
	Node_CreateRune_FullMethodName                     = "/cln.Node/CreateRune"
	Node_ShowRunes_FullMethodName                      = "/cln.Node/ShowRunes"
	Node_AskReneUnreserve_FullMethodName               = "/cln.Node/AskReneUnreserve"
	Node_AskReneListLayers_FullMethodName              = "/cln.Node/AskReneListLayers"
	Node_AskReneCreateLayer_FullMethodName             = "/cln.Node/AskReneCreateLayer"
	Node_AskReneRemoveLayer_FullMethodName             = "/cln.Node/AskReneRemoveLayer"
	Node_AskReneReserve_FullMethodName                 = "/cln.Node/AskReneReserve"
	Node_AskReneAge_FullMethodName                     = "/cln.Node/AskReneAge"
	Node_GetRoutes_FullMethodName                      = "/cln.Node/GetRoutes"
	Node_AskReneDisableNode_FullMethodName             = "/cln.Node/AskReneDisableNode"
	Node_AskReneInformChannel_FullMethodName           = "/cln.Node/AskReneInformChannel"
	Node_AskReneCreateChannel_FullMethodName           = "/cln.Node/AskReneCreateChannel"
	Node_AskReneUpdateChannel_FullMethodName           = "/cln.Node/AskReneUpdateChannel"
	Node_AskReneBiasChannel_FullMethodName             = "/cln.Node/AskReneBiasChannel"
	Node_AskReneListReservations_FullMethodName        = "/cln.Node/AskReneListReservations"
	Node_InjectPaymentOnion_FullMethodName             = "/cln.Node/InjectPaymentOnion"
	Node_InjectOnionMessage_FullMethodName             = "/cln.Node/InjectOnionMessage"
	Node_Xpay_FullMethodName                           = "/cln.Node/Xpay"
	Node_SignMessageWithKey_FullMethodName             = "/cln.Node/SignMessageWithKey"
	Node_SubscribeBlockAdded_FullMethodName            = "/cln.Node/SubscribeBlockAdded"
	Node_SubscribeChannelOpenFailed_FullMethodName     = "/cln.Node/SubscribeChannelOpenFailed"
	Node_SubscribeChannelOpened_FullMethodName         = "/cln.Node/SubscribeChannelOpened"
	Node_SubscribeConnect_FullMethodName               = "/cln.Node/SubscribeConnect"
	Node_SubscribeCustomMsg_FullMethodName             = "/cln.Node/SubscribeCustomMsg"
	Node_SubscribeChannelStateChanged_FullMethodName   = "/cln.Node/SubscribeChannelStateChanged"
)

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeClient interface {
	Getinfo(ctx context.Context, in *GetinfoRequest, opts ...grpc.CallOption) (*GetinfoResponse, error)
	ListPeers(ctx context.Context, in *ListpeersRequest, opts ...grpc.CallOption) (*ListpeersResponse, error)
	ListFunds(ctx context.Context, in *ListfundsRequest, opts ...grpc.CallOption) (*ListfundsResponse, error)
	SendPay(ctx context.Context, in *SendpayRequest, opts ...grpc.CallOption) (*SendpayResponse, error)
	ListChannels(ctx context.Context, in *ListchannelsRequest, opts ...grpc.CallOption) (*ListchannelsResponse, error)
	AddGossip(ctx context.Context, in *AddgossipRequest, opts ...grpc.CallOption) (*AddgossipResponse, error)
	AddPsbtOutput(ctx context.Context, in *AddpsbtoutputRequest, opts ...grpc.CallOption) (*AddpsbtoutputResponse, error)
	AutoCleanOnce(ctx context.Context, in *AutocleanonceRequest, opts ...grpc.CallOption) (*AutocleanonceResponse, error)
	AutoCleanStatus(ctx context.Context, in *AutocleanstatusRequest, opts ...grpc.CallOption) (*AutocleanstatusResponse, error)
	CheckMessage(ctx context.Context, in *CheckmessageRequest, opts ...grpc.CallOption) (*CheckmessageResponse, error)
	Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error)
	ConnectPeer(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error)
	CreateInvoice(ctx context.Context, in *CreateinvoiceRequest, opts ...grpc.CallOption) (*CreateinvoiceResponse, error)
	Datastore(ctx context.Context, in *DatastoreRequest, opts ...grpc.CallOption) (*DatastoreResponse, error)
	DatastoreUsage(ctx context.Context, in *DatastoreusageRequest, opts ...grpc.CallOption) (*DatastoreusageResponse, error)
	CreateOnion(ctx context.Context, in *CreateonionRequest, opts ...grpc.CallOption) (*CreateonionResponse, error)
	DelDatastore(ctx context.Context, in *DeldatastoreRequest, opts ...grpc.CallOption) (*DeldatastoreResponse, error)
	DelInvoice(ctx context.Context, in *DelinvoiceRequest, opts ...grpc.CallOption) (*DelinvoiceResponse, error)
	DevForgetChannel(ctx context.Context, in *DevforgetchannelRequest, opts ...grpc.CallOption) (*DevforgetchannelResponse, error)
	EmergencyRecover(ctx context.Context, in *EmergencyrecoverRequest, opts ...grpc.CallOption) (*EmergencyrecoverResponse, error)
	GetEmergencyRecoverData(ctx context.Context, in *GetemergencyrecoverdataRequest, opts ...grpc.CallOption) (*GetemergencyrecoverdataResponse, error)
	ExposeSecret(ctx context.Context, in *ExposesecretRequest, opts ...grpc.CallOption) (*ExposesecretResponse, error)
	Recover(ctx context.Context, in *RecoverRequest, opts ...grpc.CallOption) (*RecoverResponse, error)
	RecoverChannel(ctx context.Context, in *RecoverchannelRequest, opts ...grpc.CallOption) (*RecoverchannelResponse, error)
	Invoice(ctx context.Context, in *InvoiceRequest, opts ...grpc.CallOption) (*InvoiceResponse, error)
	CreateInvoiceRequest(ctx context.Context, in *InvoicerequestRequest, opts ...grpc.CallOption) (*InvoicerequestResponse, error)
	DisableInvoiceRequest(ctx context.Context, in *DisableinvoicerequestRequest, opts ...grpc.CallOption) (*DisableinvoicerequestResponse, error)
	ListInvoiceRequests(ctx context.Context, in *ListinvoicerequestsRequest, opts ...grpc.CallOption) (*ListinvoicerequestsResponse, error)
	ListDatastore(ctx context.Context, in *ListdatastoreRequest, opts ...grpc.CallOption) (*ListdatastoreResponse, error)
	ListInvoices(ctx context.Context, in *ListinvoicesRequest, opts ...grpc.CallOption) (*ListinvoicesResponse, error)
	SendOnion(ctx context.Context, in *SendonionRequest, opts ...grpc.CallOption) (*SendonionResponse, error)
	ListSendPays(ctx context.Context, in *ListsendpaysRequest, opts ...grpc.CallOption) (*ListsendpaysResponse, error)
	ListTransactions(ctx context.Context, in *ListtransactionsRequest, opts ...grpc.CallOption) (*ListtransactionsResponse, error)
	MakeSecret(ctx context.Context, in *MakesecretRequest, opts ...grpc.CallOption) (*MakesecretResponse, error)
	Pay(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*PayResponse, error)
	ListNodes(ctx context.Context, in *ListnodesRequest, opts ...grpc.CallOption) (*ListnodesResponse, error)
	WaitAnyInvoice(ctx context.Context, in *WaitanyinvoiceRequest, opts ...grpc.CallOption) (*WaitanyinvoiceResponse, error)
	WaitInvoice(ctx context.Context, in *WaitinvoiceRequest, opts ...grpc.CallOption) (*WaitinvoiceResponse, error)
	WaitSendPay(ctx context.Context, in *WaitsendpayRequest, opts ...grpc.CallOption) (*WaitsendpayResponse, error)
	NewAddr(ctx context.Context, in *NewaddrRequest, opts ...grpc.CallOption) (*NewaddrResponse, error)
	Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error)
	KeySend(ctx context.Context, in *KeysendRequest, opts ...grpc.CallOption) (*KeysendResponse, error)
	FundPsbt(ctx context.Context, in *FundpsbtRequest, opts ...grpc.CallOption) (*FundpsbtResponse, error)
	SendPsbt(ctx context.Context, in *SendpsbtRequest, opts ...grpc.CallOption) (*SendpsbtResponse, error)
	SignPsbt(ctx context.Context, in *SignpsbtRequest, opts ...grpc.CallOption) (*SignpsbtResponse, error)
	UtxoPsbt(ctx context.Context, in *UtxopsbtRequest, opts ...grpc.CallOption) (*UtxopsbtResponse, error)
	TxDiscard(ctx context.Context, in *TxdiscardRequest, opts ...grpc.CallOption) (*TxdiscardResponse, error)
	TxPrepare(ctx context.Context, in *TxprepareRequest, opts ...grpc.CallOption) (*TxprepareResponse, error)
	TxSend(ctx context.Context, in *TxsendRequest, opts ...grpc.CallOption) (*TxsendResponse, error)
	ListPeerChannels(ctx context.Context, in *ListpeerchannelsRequest, opts ...grpc.CallOption) (*ListpeerchannelsResponse, error)
	ListClosedChannels(ctx context.Context, in *ListclosedchannelsRequest, opts ...grpc.CallOption) (*ListclosedchannelsResponse, error)
	DecodePay(ctx context.Context, in *DecodepayRequest, opts ...grpc.CallOption) (*DecodepayResponse, error)
	Decode(ctx context.Context, in *DecodeRequest, opts ...grpc.CallOption) (*DecodeResponse, error)
	DelPay(ctx context.Context, in *DelpayRequest, opts ...grpc.CallOption) (*DelpayResponse, error)
	DelForward(ctx context.Context, in *DelforwardRequest, opts ...grpc.CallOption) (*DelforwardResponse, error)
	DisableOffer(ctx context.Context, in *DisableofferRequest, opts ...grpc.CallOption) (*DisableofferResponse, error)
	EnableOffer(ctx context.Context, in *EnableofferRequest, opts ...grpc.CallOption) (*EnableofferResponse, error)
	Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectResponse, error)
	Feerates(ctx context.Context, in *FeeratesRequest, opts ...grpc.CallOption) (*FeeratesResponse, error)
	FetchBip353(ctx context.Context, in *Fetchbip353Request, opts ...grpc.CallOption) (*Fetchbip353Response, error)
	FetchInvoice(ctx context.Context, in *FetchinvoiceRequest, opts ...grpc.CallOption) (*FetchinvoiceResponse, error)
	FundChannelCancel(ctx context.Context, in *FundchannelCancelRequest, opts ...grpc.CallOption) (*FundchannelCancelResponse, error)
	FundChannelComplete(ctx context.Context, in *FundchannelCompleteRequest, opts ...grpc.CallOption) (*FundchannelCompleteResponse, error)
	FundChannel(ctx context.Context, in *FundchannelRequest, opts ...grpc.CallOption) (*FundchannelResponse, error)
	FundChannelStart(ctx context.Context, in *FundchannelStartRequest, opts ...grpc.CallOption) (*FundchannelStartResponse, error)
	GetLog(ctx context.Context, in *GetlogRequest, opts ...grpc.CallOption) (*GetlogResponse, error)
	FunderUpdate(ctx context.Context, in *FunderupdateRequest, opts ...grpc.CallOption) (*FunderupdateResponse, error)
	GetRoute(ctx context.Context, in *GetrouteRequest, opts ...grpc.CallOption) (*GetrouteResponse, error)
	ListAddresses(ctx context.Context, in *ListaddressesRequest, opts ...grpc.CallOption) (*ListaddressesResponse, error)
	ListForwards(ctx context.Context, in *ListforwardsRequest, opts ...grpc.CallOption) (*ListforwardsResponse, error)
	ListOffers(ctx context.Context, in *ListoffersRequest, opts ...grpc.CallOption) (*ListoffersResponse, error)
	ListPays(ctx context.Context, in *ListpaysRequest, opts ...grpc.CallOption) (*ListpaysResponse, error)
	ListHtlcs(ctx context.Context, in *ListhtlcsRequest, opts ...grpc.CallOption) (*ListhtlcsResponse, error)
	MultiFundChannel(ctx context.Context, in *MultifundchannelRequest, opts ...grpc.CallOption) (*MultifundchannelResponse, error)
	MultiWithdraw(ctx context.Context, in *MultiwithdrawRequest, opts ...grpc.CallOption) (*MultiwithdrawResponse, error)
	Offer(ctx context.Context, in *OfferRequest, opts ...grpc.CallOption) (*OfferResponse, error)
	OpenChannelAbort(ctx context.Context, in *OpenchannelAbortRequest, opts ...grpc.CallOption) (*OpenchannelAbortResponse, error)
	OpenChannelBump(ctx context.Context, in *OpenchannelBumpRequest, opts ...grpc.CallOption) (*OpenchannelBumpResponse, error)
	OpenChannelInit(ctx context.Context, in *OpenchannelInitRequest, opts ...grpc.CallOption) (*OpenchannelInitResponse, error)
	OpenChannelSigned(ctx context.Context, in *OpenchannelSignedRequest, opts ...grpc.CallOption) (*OpenchannelSignedResponse, error)
	OpenChannelUpdate(ctx context.Context, in *OpenchannelUpdateRequest, opts ...grpc.CallOption) (*OpenchannelUpdateResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Plugin(ctx context.Context, in *PluginRequest, opts ...grpc.CallOption) (*PluginResponse, error)
	RenePayStatus(ctx context.Context, in *RenepaystatusRequest, opts ...grpc.CallOption) (*RenepaystatusResponse, error)
	RenePay(ctx context.Context, in *RenepayRequest, opts ...grpc.CallOption) (*RenepayResponse, error)
	ReserveInputs(ctx context.Context, in *ReserveinputsRequest, opts ...grpc.CallOption) (*ReserveinputsResponse, error)
	SendCustomMsg(ctx context.Context, in *SendcustommsgRequest, opts ...grpc.CallOption) (*SendcustommsgResponse, error)
	SendInvoice(ctx context.Context, in *SendinvoiceRequest, opts ...grpc.CallOption) (*SendinvoiceResponse, error)
	SetChannel(ctx context.Context, in *SetchannelRequest, opts ...grpc.CallOption) (*SetchannelResponse, error)
	SetConfig(ctx context.Context, in *SetconfigRequest, opts ...grpc.CallOption) (*SetconfigResponse, error)
	SetPsbtVersion(ctx context.Context, in *SetpsbtversionRequest, opts ...grpc.CallOption) (*SetpsbtversionResponse, error)
	SignInvoice(ctx context.Context, in *SigninvoiceRequest, opts ...grpc.CallOption) (*SigninvoiceResponse, error)
	SignMessage(ctx context.Context, in *SignmessageRequest, opts ...grpc.CallOption) (*SignmessageResponse, error)
	SpliceInit(ctx context.Context, in *SpliceInitRequest, opts ...grpc.CallOption) (*SpliceInitResponse, error)
	SpliceSigned(ctx context.Context, in *SpliceSignedRequest, opts ...grpc.CallOption) (*SpliceSignedResponse, error)
	SpliceUpdate(ctx context.Context, in *SpliceUpdateRequest, opts ...grpc.CallOption) (*SpliceUpdateResponse, error)
	DevSplice(ctx context.Context, in *DevspliceRequest, opts ...grpc.CallOption) (*DevspliceResponse, error)
	UnreserveInputs(ctx context.Context, in *UnreserveinputsRequest, opts ...grpc.CallOption) (*UnreserveinputsResponse, error)
	UpgradeWallet(ctx context.Context, in *UpgradewalletRequest, opts ...grpc.CallOption) (*UpgradewalletResponse, error)
	WaitBlockHeight(ctx context.Context, in *WaitblockheightRequest, opts ...grpc.CallOption) (*WaitblockheightResponse, error)
	Wait(ctx context.Context, in *WaitRequest, opts ...grpc.CallOption) (*WaitResponse, error)
	ListConfigs(ctx context.Context, in *ListconfigsRequest, opts ...grpc.CallOption) (*ListconfigsResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	Help(ctx context.Context, in *HelpRequest, opts ...grpc.CallOption) (*HelpResponse, error)
	PreApproveKeysend(ctx context.Context, in *PreapprovekeysendRequest, opts ...grpc.CallOption) (*PreapprovekeysendResponse, error)
	PreApproveInvoice(ctx context.Context, in *PreapproveinvoiceRequest, opts ...grpc.CallOption) (*PreapproveinvoiceResponse, error)
	StaticBackup(ctx context.Context, in *StaticbackupRequest, opts ...grpc.CallOption) (*StaticbackupResponse, error)
	BkprChannelsApy(ctx context.Context, in *BkprchannelsapyRequest, opts ...grpc.CallOption) (*BkprchannelsapyResponse, error)
	BkprDumpIncomeCsv(ctx context.Context, in *BkprdumpincomecsvRequest, opts ...grpc.CallOption) (*BkprdumpincomecsvResponse, error)
	BkprInspect(ctx context.Context, in *BkprinspectRequest, opts ...grpc.CallOption) (*BkprinspectResponse, error)
	BkprListAccountEvents(ctx context.Context, in *BkprlistaccounteventsRequest, opts ...grpc.CallOption) (*BkprlistaccounteventsResponse, error)
	BkprListBalances(ctx context.Context, in *BkprlistbalancesRequest, opts ...grpc.CallOption) (*BkprlistbalancesResponse, error)
	BkprListIncome(ctx context.Context, in *BkprlistincomeRequest, opts ...grpc.CallOption) (*BkprlistincomeResponse, error)
	BkprEditDescriptionByPaymentId(ctx context.Context, in *BkpreditdescriptionbypaymentidRequest, opts ...grpc.CallOption) (*BkpreditdescriptionbypaymentidResponse, error)
	BkprEditDescriptionByOutpoint(ctx context.Context, in *BkpreditdescriptionbyoutpointRequest, opts ...grpc.CallOption) (*BkpreditdescriptionbyoutpointResponse, error)
	BlacklistRune(ctx context.Context, in *BlacklistruneRequest, opts ...grpc.CallOption) (*BlacklistruneResponse, error)
	CheckRune(ctx context.Context, in *CheckruneRequest, opts ...grpc.CallOption) (*CheckruneResponse, error)
	CreateRune(ctx context.Context, in *CreateruneRequest, opts ...grpc.CallOption) (*CreateruneResponse, error)
	ShowRunes(ctx context.Context, in *ShowrunesRequest, opts ...grpc.CallOption) (*ShowrunesResponse, error)
	AskReneUnreserve(ctx context.Context, in *AskreneunreserveRequest, opts ...grpc.CallOption) (*AskreneunreserveResponse, error)
	AskReneListLayers(ctx context.Context, in *AskrenelistlayersRequest, opts ...grpc.CallOption) (*AskrenelistlayersResponse, error)
	AskReneCreateLayer(ctx context.Context, in *AskrenecreatelayerRequest, opts ...grpc.CallOption) (*AskrenecreatelayerResponse, error)
	AskReneRemoveLayer(ctx context.Context, in *AskreneremovelayerRequest, opts ...grpc.CallOption) (*AskreneremovelayerResponse, error)
	AskReneReserve(ctx context.Context, in *AskrenereserveRequest, opts ...grpc.CallOption) (*AskrenereserveResponse, error)
	AskReneAge(ctx context.Context, in *AskreneageRequest, opts ...grpc.CallOption) (*AskreneageResponse, error)
	GetRoutes(ctx context.Context, in *GetroutesRequest, opts ...grpc.CallOption) (*GetroutesResponse, error)
	AskReneDisableNode(ctx context.Context, in *AskrenedisablenodeRequest, opts ...grpc.CallOption) (*AskrenedisablenodeResponse, error)
	AskReneInformChannel(ctx context.Context, in *AskreneinformchannelRequest, opts ...grpc.CallOption) (*AskreneinformchannelResponse, error)
	AskReneCreateChannel(ctx context.Context, in *AskrenecreatechannelRequest, opts ...grpc.CallOption) (*AskrenecreatechannelResponse, error)
	AskReneUpdateChannel(ctx context.Context, in *AskreneupdatechannelRequest, opts ...grpc.CallOption) (*AskreneupdatechannelResponse, error)
	AskReneBiasChannel(ctx context.Context, in *AskrenebiaschannelRequest, opts ...grpc.CallOption) (*AskrenebiaschannelResponse, error)
	AskReneListReservations(ctx context.Context, in *AskrenelistreservationsRequest, opts ...grpc.CallOption) (*AskrenelistreservationsResponse, error)
	InjectPaymentOnion(ctx context.Context, in *InjectpaymentonionRequest, opts ...grpc.CallOption) (*InjectpaymentonionResponse, error)
	InjectOnionMessage(ctx context.Context, in *InjectonionmessageRequest, opts ...grpc.CallOption) (*InjectonionmessageResponse, error)
	Xpay(ctx context.Context, in *XpayRequest, opts ...grpc.CallOption) (*XpayResponse, error)
	SignMessageWithKey(ctx context.Context, in *SignmessagewithkeyRequest, opts ...grpc.CallOption) (*SignmessagewithkeyResponse, error)
	SubscribeBlockAdded(ctx context.Context, in *StreamBlockAddedRequest, opts ...grpc.CallOption) (Node_SubscribeBlockAddedClient, error)
	SubscribeChannelOpenFailed(ctx context.Context, in *StreamChannelOpenFailedRequest, opts ...grpc.CallOption) (Node_SubscribeChannelOpenFailedClient, error)
	SubscribeChannelOpened(ctx context.Context, in *StreamChannelOpenedRequest, opts ...grpc.CallOption) (Node_SubscribeChannelOpenedClient, error)
	SubscribeConnect(ctx context.Context, in *StreamConnectRequest, opts ...grpc.CallOption) (Node_SubscribeConnectClient, error)
	SubscribeCustomMsg(ctx context.Context, in *StreamCustomMsgRequest, opts ...grpc.CallOption) (Node_SubscribeCustomMsgClient, error)
	SubscribeChannelStateChanged(ctx context.Context, in *StreamChannelStateChangedRequest, opts ...grpc.CallOption) (Node_SubscribeChannelStateChangedClient, error)
}

type nodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeClient(cc grpc.ClientConnInterface) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) Getinfo(ctx context.Context, in *GetinfoRequest, opts ...grpc.CallOption) (*GetinfoResponse, error) {
	out := new(GetinfoResponse)
	err := c.cc.Invoke(ctx, Node_Getinfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ListPeers(ctx context.Context, in *ListpeersRequest, opts ...grpc.CallOption) (*ListpeersResponse, error) {
	out := new(ListpeersResponse)
	err := c.cc.Invoke(ctx, Node_ListPeers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ListFunds(ctx context.Context, in *ListfundsRequest, opts ...grpc.CallOption) (*ListfundsResponse, error) {
	out := new(ListfundsResponse)
	err := c.cc.Invoke(ctx, Node_ListFunds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SendPay(ctx context.Context, in *SendpayRequest, opts ...grpc.CallOption) (*SendpayResponse, error) {
	out := new(SendpayResponse)
	err := c.cc.Invoke(ctx, Node_SendPay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ListChannels(ctx context.Context, in *ListchannelsRequest, opts ...grpc.CallOption) (*ListchannelsResponse, error) {
	out := new(ListchannelsResponse)
	err := c.cc.Invoke(ctx, Node_ListChannels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) AddGossip(ctx context.Context, in *AddgossipRequest, opts ...grpc.CallOption) (*AddgossipResponse, error) {
	out := new(AddgossipResponse)
	err := c.cc.Invoke(ctx, Node_AddGossip_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) AddPsbtOutput(ctx context.Context, in *AddpsbtoutputRequest, opts ...grpc.CallOption) (*AddpsbtoutputResponse, error) {
	out := new(AddpsbtoutputResponse)
	err := c.cc.Invoke(ctx, Node_AddPsbtOutput_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) AutoCleanOnce(ctx context.Context, in *AutocleanonceRequest, opts ...grpc.CallOption) (*AutocleanonceResponse, error) {
	out := new(AutocleanonceResponse)
	err := c.cc.Invoke(ctx, Node_AutoCleanOnce_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) AutoCleanStatus(ctx context.Context, in *AutocleanstatusRequest, opts ...grpc.CallOption) (*AutocleanstatusResponse, error) {
	out := new(AutocleanstatusResponse)
	err := c.cc.Invoke(ctx, Node_AutoCleanStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) CheckMessage(ctx context.Context, in *CheckmessageRequest, opts ...grpc.CallOption) (*CheckmessageResponse, error) {
	out := new(CheckmessageResponse)
	err := c.cc.Invoke(ctx, Node_CheckMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error) {
	out := new(CloseResponse)
	err := c.cc.Invoke(ctx, Node_Close_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ConnectPeer(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error) {
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, Node_ConnectPeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) CreateInvoice(ctx context.Context, in *CreateinvoiceRequest, opts ...grpc.CallOption) (*CreateinvoiceResponse, error) {
	out := new(CreateinvoiceResponse)
	err := c.cc.Invoke(ctx, Node_CreateInvoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Datastore(ctx context.Context, in *DatastoreRequest, opts ...grpc.CallOption) (*DatastoreResponse, error) {
	out := new(DatastoreResponse)
	err := c.cc.Invoke(ctx, Node_Datastore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) DatastoreUsage(ctx context.Context, in *DatastoreusageRequest, opts ...grpc.CallOption) (*DatastoreusageResponse, error) {
	out := new(DatastoreusageResponse)
	err := c.cc.Invoke(ctx, Node_DatastoreUsage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) CreateOnion(ctx context.Context, in *CreateonionRequest, opts ...grpc.CallOption) (*CreateonionResponse, error) {
	out := new(CreateonionResponse)
	err := c.cc.Invoke(ctx, Node_CreateOnion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) DelDatastore(ctx context.Context, in *DeldatastoreRequest, opts ...grpc.CallOption) (*DeldatastoreResponse, error) {
	out := new(DeldatastoreResponse)
	err := c.cc.Invoke(ctx, Node_DelDatastore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) DelInvoice(ctx context.Context, in *DelinvoiceRequest, opts ...grpc.CallOption) (*DelinvoiceResponse, error) {
	out := new(DelinvoiceResponse)
	err := c.cc.Invoke(ctx, Node_DelInvoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) DevForgetChannel(ctx context.Context, in *DevforgetchannelRequest, opts ...grpc.CallOption) (*DevforgetchannelResponse, error) {
	out := new(DevforgetchannelResponse)
	err := c.cc.Invoke(ctx, Node_DevForgetChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) EmergencyRecover(ctx context.Context, in *EmergencyrecoverRequest, opts ...grpc.CallOption) (*EmergencyrecoverResponse, error) {
	out := new(EmergencyrecoverResponse)
	err := c.cc.Invoke(ctx, Node_EmergencyRecover_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetEmergencyRecoverData(ctx context.Context, in *GetemergencyrecoverdataRequest, opts ...grpc.CallOption) (*GetemergencyrecoverdataResponse, error) {
	out := new(GetemergencyrecoverdataResponse)
	err := c.cc.Invoke(ctx, Node_GetEmergencyRecoverData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ExposeSecret(ctx context.Context, in *ExposesecretRequest, opts ...grpc.CallOption) (*ExposesecretResponse, error) {
	out := new(ExposesecretResponse)
	err := c.cc.Invoke(ctx, Node_ExposeSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Recover(ctx context.Context, in *RecoverRequest, opts ...grpc.CallOption) (*RecoverResponse, error) {
	out := new(RecoverResponse)
	err := c.cc.Invoke(ctx, Node_Recover_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) RecoverChannel(ctx context.Context, in *RecoverchannelRequest, opts ...grpc.CallOption) (*RecoverchannelResponse, error) {
	out := new(RecoverchannelResponse)
	err := c.cc.Invoke(ctx, Node_RecoverChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Invoice(ctx context.Context, in *InvoiceRequest, opts ...grpc.CallOption) (*InvoiceResponse, error) {
	out := new(InvoiceResponse)
	err := c.cc.Invoke(ctx, Node_Invoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) CreateInvoiceRequest(ctx context.Context, in *InvoicerequestRequest, opts ...grpc.CallOption) (*InvoicerequestResponse, error) {
	out := new(InvoicerequestResponse)
	err := c.cc.Invoke(ctx, Node_CreateInvoiceRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) DisableInvoiceRequest(ctx context.Context, in *DisableinvoicerequestRequest, opts ...grpc.CallOption) (*DisableinvoicerequestResponse, error) {
	out := new(DisableinvoicerequestResponse)
	err := c.cc.Invoke(ctx, Node_DisableInvoiceRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ListInvoiceRequests(ctx context.Context, in *ListinvoicerequestsRequest, opts ...grpc.CallOption) (*ListinvoicerequestsResponse, error) {
	out := new(ListinvoicerequestsResponse)
	err := c.cc.Invoke(ctx, Node_ListInvoiceRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ListDatastore(ctx context.Context, in *ListdatastoreRequest, opts ...grpc.CallOption) (*ListdatastoreResponse, error) {
	out := new(ListdatastoreResponse)
	err := c.cc.Invoke(ctx, Node_ListDatastore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ListInvoices(ctx context.Context, in *ListinvoicesRequest, opts ...grpc.CallOption) (*ListinvoicesResponse, error) {
	out := new(ListinvoicesResponse)
	err := c.cc.Invoke(ctx, Node_ListInvoices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SendOnion(ctx context.Context, in *SendonionRequest, opts ...grpc.CallOption) (*SendonionResponse, error) {
	out := new(SendonionResponse)
	err := c.cc.Invoke(ctx, Node_SendOnion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ListSendPays(ctx context.Context, in *ListsendpaysRequest, opts ...grpc.CallOption) (*ListsendpaysResponse, error) {
	out := new(ListsendpaysResponse)
	err := c.cc.Invoke(ctx, Node_ListSendPays_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ListTransactions(ctx context.Context, in *ListtransactionsRequest, opts ...grpc.CallOption) (*ListtransactionsResponse, error) {
	out := new(ListtransactionsResponse)
	err := c.cc.Invoke(ctx, Node_ListTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) MakeSecret(ctx context.Context, in *MakesecretRequest, opts ...grpc.CallOption) (*MakesecretResponse, error) {
	out := new(MakesecretResponse)
	err := c.cc.Invoke(ctx, Node_MakeSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Pay(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*PayResponse, error) {
	out := new(PayResponse)
	err := c.cc.Invoke(ctx, Node_Pay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ListNodes(ctx context.Context, in *ListnodesRequest, opts ...grpc.CallOption) (*ListnodesResponse, error) {
	out := new(ListnodesResponse)
	err := c.cc.Invoke(ctx, Node_ListNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) WaitAnyInvoice(ctx context.Context, in *WaitanyinvoiceRequest, opts ...grpc.CallOption) (*WaitanyinvoiceResponse, error) {
	out := new(WaitanyinvoiceResponse)
	err := c.cc.Invoke(ctx, Node_WaitAnyInvoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) WaitInvoice(ctx context.Context, in *WaitinvoiceRequest, opts ...grpc.CallOption) (*WaitinvoiceResponse, error) {
	out := new(WaitinvoiceResponse)
	err := c.cc.Invoke(ctx, Node_WaitInvoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) WaitSendPay(ctx context.Context, in *WaitsendpayRequest, opts ...grpc.CallOption) (*WaitsendpayResponse, error) {
	out := new(WaitsendpayResponse)
	err := c.cc.Invoke(ctx, Node_WaitSendPay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) NewAddr(ctx context.Context, in *NewaddrRequest, opts ...grpc.CallOption) (*NewaddrResponse, error) {
	out := new(NewaddrResponse)
	err := c.cc.Invoke(ctx, Node_NewAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error) {
	out := new(WithdrawResponse)
	err := c.cc.Invoke(ctx, Node_Withdraw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) KeySend(ctx context.Context, in *KeysendRequest, opts ...grpc.CallOption) (*KeysendResponse, error) {
	out := new(KeysendResponse)
	err := c.cc.Invoke(ctx, Node_KeySend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) FundPsbt(ctx context.Context, in *FundpsbtRequest, opts ...grpc.CallOption) (*FundpsbtResponse, error) {
	out := new(FundpsbtResponse)
	err := c.cc.Invoke(ctx, Node_FundPsbt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SendPsbt(ctx context.Context, in *SendpsbtRequest, opts ...grpc.CallOption) (*SendpsbtResponse, error) {
	out := new(SendpsbtResponse)
	err := c.cc.Invoke(ctx, Node_SendPsbt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SignPsbt(ctx context.Context, in *SignpsbtRequest, opts ...grpc.CallOption) (*SignpsbtResponse, error) {
	out := new(SignpsbtResponse)
	err := c.cc.Invoke(ctx, Node_SignPsbt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) UtxoPsbt(ctx context.Context, in *UtxopsbtRequest, opts ...grpc.CallOption) (*UtxopsbtResponse, error) {
	out := new(UtxopsbtResponse)
	err := c.cc.Invoke(ctx, Node_UtxoPsbt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) TxDiscard(ctx context.Context, in *TxdiscardRequest, opts ...grpc.CallOption) (*TxdiscardResponse, error) {
	out := new(TxdiscardResponse)
	err := c.cc.Invoke(ctx, Node_TxDiscard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) TxPrepare(ctx context.Context, in *TxprepareRequest, opts ...grpc.CallOption) (*TxprepareResponse, error) {
	out := new(TxprepareResponse)
	err := c.cc.Invoke(ctx, Node_TxPrepare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) TxSend(ctx context.Context, in *TxsendRequest, opts ...grpc.CallOption) (*TxsendResponse, error) {
	out := new(TxsendResponse)
	err := c.cc.Invoke(ctx, Node_TxSend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ListPeerChannels(ctx context.Context, in *ListpeerchannelsRequest, opts ...grpc.CallOption) (*ListpeerchannelsResponse, error) {
	out := new(ListpeerchannelsResponse)
	err := c.cc.Invoke(ctx, Node_ListPeerChannels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ListClosedChannels(ctx context.Context, in *ListclosedchannelsRequest, opts ...grpc.CallOption) (*ListclosedchannelsResponse, error) {
	out := new(ListclosedchannelsResponse)
	err := c.cc.Invoke(ctx, Node_ListClosedChannels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) DecodePay(ctx context.Context, in *DecodepayRequest, opts ...grpc.CallOption) (*DecodepayResponse, error) {
	out := new(DecodepayResponse)
	err := c.cc.Invoke(ctx, Node_DecodePay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Decode(ctx context.Context, in *DecodeRequest, opts ...grpc.CallOption) (*DecodeResponse, error) {
	out := new(DecodeResponse)
	err := c.cc.Invoke(ctx, Node_Decode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) DelPay(ctx context.Context, in *DelpayRequest, opts ...grpc.CallOption) (*DelpayResponse, error) {
	out := new(DelpayResponse)
	err := c.cc.Invoke(ctx, Node_DelPay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) DelForward(ctx context.Context, in *DelforwardRequest, opts ...grpc.CallOption) (*DelforwardResponse, error) {
	out := new(DelforwardResponse)
	err := c.cc.Invoke(ctx, Node_DelForward_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) DisableOffer(ctx context.Context, in *DisableofferRequest, opts ...grpc.CallOption) (*DisableofferResponse, error) {
	out := new(DisableofferResponse)
	err := c.cc.Invoke(ctx, Node_DisableOffer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) EnableOffer(ctx context.Context, in *EnableofferRequest, opts ...grpc.CallOption) (*EnableofferResponse, error) {
	out := new(EnableofferResponse)
	err := c.cc.Invoke(ctx, Node_EnableOffer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectResponse, error) {
	out := new(DisconnectResponse)
	err := c.cc.Invoke(ctx, Node_Disconnect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Feerates(ctx context.Context, in *FeeratesRequest, opts ...grpc.CallOption) (*FeeratesResponse, error) {
	out := new(FeeratesResponse)
	err := c.cc.Invoke(ctx, Node_Feerates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) FetchBip353(ctx context.Context, in *Fetchbip353Request, opts ...grpc.CallOption) (*Fetchbip353Response, error) {
	out := new(Fetchbip353Response)
	err := c.cc.Invoke(ctx, Node_FetchBip353_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) FetchInvoice(ctx context.Context, in *FetchinvoiceRequest, opts ...grpc.CallOption) (*FetchinvoiceResponse, error) {
	out := new(FetchinvoiceResponse)
	err := c.cc.Invoke(ctx, Node_FetchInvoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) FundChannelCancel(ctx context.Context, in *FundchannelCancelRequest, opts ...grpc.CallOption) (*FundchannelCancelResponse, error) {
	out := new(FundchannelCancelResponse)
	err := c.cc.Invoke(ctx, Node_FundChannelCancel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) FundChannelComplete(ctx context.Context, in *FundchannelCompleteRequest, opts ...grpc.CallOption) (*FundchannelCompleteResponse, error) {
	out := new(FundchannelCompleteResponse)
	err := c.cc.Invoke(ctx, Node_FundChannelComplete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) FundChannel(ctx context.Context, in *FundchannelRequest, opts ...grpc.CallOption) (*FundchannelResponse, error) {
	out := new(FundchannelResponse)
	err := c.cc.Invoke(ctx, Node_FundChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) FundChannelStart(ctx context.Context, in *FundchannelStartRequest, opts ...grpc.CallOption) (*FundchannelStartResponse, error) {
	out := new(FundchannelStartResponse)
	err := c.cc.Invoke(ctx, Node_FundChannelStart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetLog(ctx context.Context, in *GetlogRequest, opts ...grpc.CallOption) (*GetlogResponse, error) {
	out := new(GetlogResponse)
	err := c.cc.Invoke(ctx, Node_GetLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) FunderUpdate(ctx context.Context, in *FunderupdateRequest, opts ...grpc.CallOption) (*FunderupdateResponse, error) {
	out := new(FunderupdateResponse)
	err := c.cc.Invoke(ctx, Node_FunderUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetRoute(ctx context.Context, in *GetrouteRequest, opts ...grpc.CallOption) (*GetrouteResponse, error) {
	out := new(GetrouteResponse)
	err := c.cc.Invoke(ctx, Node_GetRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ListAddresses(ctx context.Context, in *ListaddressesRequest, opts ...grpc.CallOption) (*ListaddressesResponse, error) {
	out := new(ListaddressesResponse)
	err := c.cc.Invoke(ctx, Node_ListAddresses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ListForwards(ctx context.Context, in *ListforwardsRequest, opts ...grpc.CallOption) (*ListforwardsResponse, error) {
	out := new(ListforwardsResponse)
	err := c.cc.Invoke(ctx, Node_ListForwards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ListOffers(ctx context.Context, in *ListoffersRequest, opts ...grpc.CallOption) (*ListoffersResponse, error) {
	out := new(ListoffersResponse)
	err := c.cc.Invoke(ctx, Node_ListOffers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ListPays(ctx context.Context, in *ListpaysRequest, opts ...grpc.CallOption) (*ListpaysResponse, error) {
	out := new(ListpaysResponse)
	err := c.cc.Invoke(ctx, Node_ListPays_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ListHtlcs(ctx context.Context, in *ListhtlcsRequest, opts ...grpc.CallOption) (*ListhtlcsResponse, error) {
	out := new(ListhtlcsResponse)
	err := c.cc.Invoke(ctx, Node_ListHtlcs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) MultiFundChannel(ctx context.Context, in *MultifundchannelRequest, opts ...grpc.CallOption) (*MultifundchannelResponse, error) {
	out := new(MultifundchannelResponse)
	err := c.cc.Invoke(ctx, Node_MultiFundChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) MultiWithdraw(ctx context.Context, in *MultiwithdrawRequest, opts ...grpc.CallOption) (*MultiwithdrawResponse, error) {
	out := new(MultiwithdrawResponse)
	err := c.cc.Invoke(ctx, Node_MultiWithdraw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Offer(ctx context.Context, in *OfferRequest, opts ...grpc.CallOption) (*OfferResponse, error) {
	out := new(OfferResponse)
	err := c.cc.Invoke(ctx, Node_Offer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) OpenChannelAbort(ctx context.Context, in *OpenchannelAbortRequest, opts ...grpc.CallOption) (*OpenchannelAbortResponse, error) {
	out := new(OpenchannelAbortResponse)
	err := c.cc.Invoke(ctx, Node_OpenChannelAbort_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) OpenChannelBump(ctx context.Context, in *OpenchannelBumpRequest, opts ...grpc.CallOption) (*OpenchannelBumpResponse, error) {
	out := new(OpenchannelBumpResponse)
	err := c.cc.Invoke(ctx, Node_OpenChannelBump_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) OpenChannelInit(ctx context.Context, in *OpenchannelInitRequest, opts ...grpc.CallOption) (*OpenchannelInitResponse, error) {
	out := new(OpenchannelInitResponse)
	err := c.cc.Invoke(ctx, Node_OpenChannelInit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) OpenChannelSigned(ctx context.Context, in *OpenchannelSignedRequest, opts ...grpc.CallOption) (*OpenchannelSignedResponse, error) {
	out := new(OpenchannelSignedResponse)
	err := c.cc.Invoke(ctx, Node_OpenChannelSigned_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) OpenChannelUpdate(ctx context.Context, in *OpenchannelUpdateRequest, opts ...grpc.CallOption) (*OpenchannelUpdateResponse, error) {
	out := new(OpenchannelUpdateResponse)
	err := c.cc.Invoke(ctx, Node_OpenChannelUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, Node_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Plugin(ctx context.Context, in *PluginRequest, opts ...grpc.CallOption) (*PluginResponse, error) {
	out := new(PluginResponse)
	err := c.cc.Invoke(ctx, Node_Plugin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) RenePayStatus(ctx context.Context, in *RenepaystatusRequest, opts ...grpc.CallOption) (*RenepaystatusResponse, error) {
	out := new(RenepaystatusResponse)
	err := c.cc.Invoke(ctx, Node_RenePayStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) RenePay(ctx context.Context, in *RenepayRequest, opts ...grpc.CallOption) (*RenepayResponse, error) {
	out := new(RenepayResponse)
	err := c.cc.Invoke(ctx, Node_RenePay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ReserveInputs(ctx context.Context, in *ReserveinputsRequest, opts ...grpc.CallOption) (*ReserveinputsResponse, error) {
	out := new(ReserveinputsResponse)
	err := c.cc.Invoke(ctx, Node_ReserveInputs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SendCustomMsg(ctx context.Context, in *SendcustommsgRequest, opts ...grpc.CallOption) (*SendcustommsgResponse, error) {
	out := new(SendcustommsgResponse)
	err := c.cc.Invoke(ctx, Node_SendCustomMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SendInvoice(ctx context.Context, in *SendinvoiceRequest, opts ...grpc.CallOption) (*SendinvoiceResponse, error) {
	out := new(SendinvoiceResponse)
	err := c.cc.Invoke(ctx, Node_SendInvoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SetChannel(ctx context.Context, in *SetchannelRequest, opts ...grpc.CallOption) (*SetchannelResponse, error) {
	out := new(SetchannelResponse)
	err := c.cc.Invoke(ctx, Node_SetChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SetConfig(ctx context.Context, in *SetconfigRequest, opts ...grpc.CallOption) (*SetconfigResponse, error) {
	out := new(SetconfigResponse)
	err := c.cc.Invoke(ctx, Node_SetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SetPsbtVersion(ctx context.Context, in *SetpsbtversionRequest, opts ...grpc.CallOption) (*SetpsbtversionResponse, error) {
	out := new(SetpsbtversionResponse)
	err := c.cc.Invoke(ctx, Node_SetPsbtVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SignInvoice(ctx context.Context, in *SigninvoiceRequest, opts ...grpc.CallOption) (*SigninvoiceResponse, error) {
	out := new(SigninvoiceResponse)
	err := c.cc.Invoke(ctx, Node_SignInvoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SignMessage(ctx context.Context, in *SignmessageRequest, opts ...grpc.CallOption) (*SignmessageResponse, error) {
	out := new(SignmessageResponse)
	err := c.cc.Invoke(ctx, Node_SignMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SpliceInit(ctx context.Context, in *SpliceInitRequest, opts ...grpc.CallOption) (*SpliceInitResponse, error) {
	out := new(SpliceInitResponse)
	err := c.cc.Invoke(ctx, Node_SpliceInit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SpliceSigned(ctx context.Context, in *SpliceSignedRequest, opts ...grpc.CallOption) (*SpliceSignedResponse, error) {
	out := new(SpliceSignedResponse)
	err := c.cc.Invoke(ctx, Node_SpliceSigned_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SpliceUpdate(ctx context.Context, in *SpliceUpdateRequest, opts ...grpc.CallOption) (*SpliceUpdateResponse, error) {
	out := new(SpliceUpdateResponse)
	err := c.cc.Invoke(ctx, Node_SpliceUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) DevSplice(ctx context.Context, in *DevspliceRequest, opts ...grpc.CallOption) (*DevspliceResponse, error) {
	out := new(DevspliceResponse)
	err := c.cc.Invoke(ctx, Node_DevSplice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) UnreserveInputs(ctx context.Context, in *UnreserveinputsRequest, opts ...grpc.CallOption) (*UnreserveinputsResponse, error) {
	out := new(UnreserveinputsResponse)
	err := c.cc.Invoke(ctx, Node_UnreserveInputs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) UpgradeWallet(ctx context.Context, in *UpgradewalletRequest, opts ...grpc.CallOption) (*UpgradewalletResponse, error) {
	out := new(UpgradewalletResponse)
	err := c.cc.Invoke(ctx, Node_UpgradeWallet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) WaitBlockHeight(ctx context.Context, in *WaitblockheightRequest, opts ...grpc.CallOption) (*WaitblockheightResponse, error) {
	out := new(WaitblockheightResponse)
	err := c.cc.Invoke(ctx, Node_WaitBlockHeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Wait(ctx context.Context, in *WaitRequest, opts ...grpc.CallOption) (*WaitResponse, error) {
	out := new(WaitResponse)
	err := c.cc.Invoke(ctx, Node_Wait_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ListConfigs(ctx context.Context, in *ListconfigsRequest, opts ...grpc.CallOption) (*ListconfigsResponse, error) {
	out := new(ListconfigsResponse)
	err := c.cc.Invoke(ctx, Node_ListConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, Node_Stop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Help(ctx context.Context, in *HelpRequest, opts ...grpc.CallOption) (*HelpResponse, error) {
	out := new(HelpResponse)
	err := c.cc.Invoke(ctx, Node_Help_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) PreApproveKeysend(ctx context.Context, in *PreapprovekeysendRequest, opts ...grpc.CallOption) (*PreapprovekeysendResponse, error) {
	out := new(PreapprovekeysendResponse)
	err := c.cc.Invoke(ctx, Node_PreApproveKeysend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) PreApproveInvoice(ctx context.Context, in *PreapproveinvoiceRequest, opts ...grpc.CallOption) (*PreapproveinvoiceResponse, error) {
	out := new(PreapproveinvoiceResponse)
	err := c.cc.Invoke(ctx, Node_PreApproveInvoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) StaticBackup(ctx context.Context, in *StaticbackupRequest, opts ...grpc.CallOption) (*StaticbackupResponse, error) {
	out := new(StaticbackupResponse)
	err := c.cc.Invoke(ctx, Node_StaticBackup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) BkprChannelsApy(ctx context.Context, in *BkprchannelsapyRequest, opts ...grpc.CallOption) (*BkprchannelsapyResponse, error) {
	out := new(BkprchannelsapyResponse)
	err := c.cc.Invoke(ctx, Node_BkprChannelsApy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) BkprDumpIncomeCsv(ctx context.Context, in *BkprdumpincomecsvRequest, opts ...grpc.CallOption) (*BkprdumpincomecsvResponse, error) {
	out := new(BkprdumpincomecsvResponse)
	err := c.cc.Invoke(ctx, Node_BkprDumpIncomeCsv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) BkprInspect(ctx context.Context, in *BkprinspectRequest, opts ...grpc.CallOption) (*BkprinspectResponse, error) {
	out := new(BkprinspectResponse)
	err := c.cc.Invoke(ctx, Node_BkprInspect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) BkprListAccountEvents(ctx context.Context, in *BkprlistaccounteventsRequest, opts ...grpc.CallOption) (*BkprlistaccounteventsResponse, error) {
	out := new(BkprlistaccounteventsResponse)
	err := c.cc.Invoke(ctx, Node_BkprListAccountEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) BkprListBalances(ctx context.Context, in *BkprlistbalancesRequest, opts ...grpc.CallOption) (*BkprlistbalancesResponse, error) {
	out := new(BkprlistbalancesResponse)
	err := c.cc.Invoke(ctx, Node_BkprListBalances_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) BkprListIncome(ctx context.Context, in *BkprlistincomeRequest, opts ...grpc.CallOption) (*BkprlistincomeResponse, error) {
	out := new(BkprlistincomeResponse)
	err := c.cc.Invoke(ctx, Node_BkprListIncome_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) BkprEditDescriptionByPaymentId(ctx context.Context, in *BkpreditdescriptionbypaymentidRequest, opts ...grpc.CallOption) (*BkpreditdescriptionbypaymentidResponse, error) {
	out := new(BkpreditdescriptionbypaymentidResponse)
	err := c.cc.Invoke(ctx, Node_BkprEditDescriptionByPaymentId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) BkprEditDescriptionByOutpoint(ctx context.Context, in *BkpreditdescriptionbyoutpointRequest, opts ...grpc.CallOption) (*BkpreditdescriptionbyoutpointResponse, error) {
	out := new(BkpreditdescriptionbyoutpointResponse)
	err := c.cc.Invoke(ctx, Node_BkprEditDescriptionByOutpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) BlacklistRune(ctx context.Context, in *BlacklistruneRequest, opts ...grpc.CallOption) (*BlacklistruneResponse, error) {
	out := new(BlacklistruneResponse)
	err := c.cc.Invoke(ctx, Node_BlacklistRune_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) CheckRune(ctx context.Context, in *CheckruneRequest, opts ...grpc.CallOption) (*CheckruneResponse, error) {
	out := new(CheckruneResponse)
	err := c.cc.Invoke(ctx, Node_CheckRune_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) CreateRune(ctx context.Context, in *CreateruneRequest, opts ...grpc.CallOption) (*CreateruneResponse, error) {
	out := new(CreateruneResponse)
	err := c.cc.Invoke(ctx, Node_CreateRune_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ShowRunes(ctx context.Context, in *ShowrunesRequest, opts ...grpc.CallOption) (*ShowrunesResponse, error) {
	out := new(ShowrunesResponse)
	err := c.cc.Invoke(ctx, Node_ShowRunes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) AskReneUnreserve(ctx context.Context, in *AskreneunreserveRequest, opts ...grpc.CallOption) (*AskreneunreserveResponse, error) {
	out := new(AskreneunreserveResponse)
	err := c.cc.Invoke(ctx, Node_AskReneUnreserve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) AskReneListLayers(ctx context.Context, in *AskrenelistlayersRequest, opts ...grpc.CallOption) (*AskrenelistlayersResponse, error) {
	out := new(AskrenelistlayersResponse)
	err := c.cc.Invoke(ctx, Node_AskReneListLayers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) AskReneCreateLayer(ctx context.Context, in *AskrenecreatelayerRequest, opts ...grpc.CallOption) (*AskrenecreatelayerResponse, error) {
	out := new(AskrenecreatelayerResponse)
	err := c.cc.Invoke(ctx, Node_AskReneCreateLayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) AskReneRemoveLayer(ctx context.Context, in *AskreneremovelayerRequest, opts ...grpc.CallOption) (*AskreneremovelayerResponse, error) {
	out := new(AskreneremovelayerResponse)
	err := c.cc.Invoke(ctx, Node_AskReneRemoveLayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) AskReneReserve(ctx context.Context, in *AskrenereserveRequest, opts ...grpc.CallOption) (*AskrenereserveResponse, error) {
	out := new(AskrenereserveResponse)
	err := c.cc.Invoke(ctx, Node_AskReneReserve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) AskReneAge(ctx context.Context, in *AskreneageRequest, opts ...grpc.CallOption) (*AskreneageResponse, error) {
	out := new(AskreneageResponse)
	err := c.cc.Invoke(ctx, Node_AskReneAge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetRoutes(ctx context.Context, in *GetroutesRequest, opts ...grpc.CallOption) (*GetroutesResponse, error) {
	out := new(GetroutesResponse)
	err := c.cc.Invoke(ctx, Node_GetRoutes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) AskReneDisableNode(ctx context.Context, in *AskrenedisablenodeRequest, opts ...grpc.CallOption) (*AskrenedisablenodeResponse, error) {
	out := new(AskrenedisablenodeResponse)
	err := c.cc.Invoke(ctx, Node_AskReneDisableNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) AskReneInformChannel(ctx context.Context, in *AskreneinformchannelRequest, opts ...grpc.CallOption) (*AskreneinformchannelResponse, error) {
	out := new(AskreneinformchannelResponse)
	err := c.cc.Invoke(ctx, Node_AskReneInformChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) AskReneCreateChannel(ctx context.Context, in *AskrenecreatechannelRequest, opts ...grpc.CallOption) (*AskrenecreatechannelResponse, error) {
	out := new(AskrenecreatechannelResponse)
	err := c.cc.Invoke(ctx, Node_AskReneCreateChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) AskReneUpdateChannel(ctx context.Context, in *AskreneupdatechannelRequest, opts ...grpc.CallOption) (*AskreneupdatechannelResponse, error) {
	out := new(AskreneupdatechannelResponse)
	err := c.cc.Invoke(ctx, Node_AskReneUpdateChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) AskReneBiasChannel(ctx context.Context, in *AskrenebiaschannelRequest, opts ...grpc.CallOption) (*AskrenebiaschannelResponse, error) {
	out := new(AskrenebiaschannelResponse)
	err := c.cc.Invoke(ctx, Node_AskReneBiasChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) AskReneListReservations(ctx context.Context, in *AskrenelistreservationsRequest, opts ...grpc.CallOption) (*AskrenelistreservationsResponse, error) {
	out := new(AskrenelistreservationsResponse)
	err := c.cc.Invoke(ctx, Node_AskReneListReservations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) InjectPaymentOnion(ctx context.Context, in *InjectpaymentonionRequest, opts ...grpc.CallOption) (*InjectpaymentonionResponse, error) {
	out := new(InjectpaymentonionResponse)
	err := c.cc.Invoke(ctx, Node_InjectPaymentOnion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) InjectOnionMessage(ctx context.Context, in *InjectonionmessageRequest, opts ...grpc.CallOption) (*InjectonionmessageResponse, error) {
	out := new(InjectonionmessageResponse)
	err := c.cc.Invoke(ctx, Node_InjectOnionMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Xpay(ctx context.Context, in *XpayRequest, opts ...grpc.CallOption) (*XpayResponse, error) {
	out := new(XpayResponse)
	err := c.cc.Invoke(ctx, Node_Xpay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SignMessageWithKey(ctx context.Context, in *SignmessagewithkeyRequest, opts ...grpc.CallOption) (*SignmessagewithkeyResponse, error) {
	out := new(SignmessagewithkeyResponse)
	err := c.cc.Invoke(ctx, Node_SignMessageWithKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SubscribeBlockAdded(ctx context.Context, in *StreamBlockAddedRequest, opts ...grpc.CallOption) (Node_SubscribeBlockAddedClient, error) {
	stream, err := c.cc.NewStream(ctx, &Node_ServiceDesc.Streams[0], Node_SubscribeBlockAdded_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeSubscribeBlockAddedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Node_SubscribeBlockAddedClient interface {
	Recv() (*BlockAddedNotification, error)
	grpc.ClientStream
}

type nodeSubscribeBlockAddedClient struct {
	grpc.ClientStream
}

func (x *nodeSubscribeBlockAddedClient) Recv() (*BlockAddedNotification, error) {
	m := new(BlockAddedNotification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) SubscribeChannelOpenFailed(ctx context.Context, in *StreamChannelOpenFailedRequest, opts ...grpc.CallOption) (Node_SubscribeChannelOpenFailedClient, error) {
	stream, err := c.cc.NewStream(ctx, &Node_ServiceDesc.Streams[1], Node_SubscribeChannelOpenFailed_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeSubscribeChannelOpenFailedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Node_SubscribeChannelOpenFailedClient interface {
	Recv() (*ChannelOpenFailedNotification, error)
	grpc.ClientStream
}

type nodeSubscribeChannelOpenFailedClient struct {
	grpc.ClientStream
}

func (x *nodeSubscribeChannelOpenFailedClient) Recv() (*ChannelOpenFailedNotification, error) {
	m := new(ChannelOpenFailedNotification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) SubscribeChannelOpened(ctx context.Context, in *StreamChannelOpenedRequest, opts ...grpc.CallOption) (Node_SubscribeChannelOpenedClient, error) {
	stream, err := c.cc.NewStream(ctx, &Node_ServiceDesc.Streams[2], Node_SubscribeChannelOpened_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeSubscribeChannelOpenedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Node_SubscribeChannelOpenedClient interface {
	Recv() (*ChannelOpenedNotification, error)
	grpc.ClientStream
}

type nodeSubscribeChannelOpenedClient struct {
	grpc.ClientStream
}

func (x *nodeSubscribeChannelOpenedClient) Recv() (*ChannelOpenedNotification, error) {
	m := new(ChannelOpenedNotification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) SubscribeConnect(ctx context.Context, in *StreamConnectRequest, opts ...grpc.CallOption) (Node_SubscribeConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Node_ServiceDesc.Streams[3], Node_SubscribeConnect_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeSubscribeConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Node_SubscribeConnectClient interface {
	Recv() (*PeerConnectNotification, error)
	grpc.ClientStream
}

type nodeSubscribeConnectClient struct {
	grpc.ClientStream
}

func (x *nodeSubscribeConnectClient) Recv() (*PeerConnectNotification, error) {
	m := new(PeerConnectNotification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) SubscribeCustomMsg(ctx context.Context, in *StreamCustomMsgRequest, opts ...grpc.CallOption) (Node_SubscribeCustomMsgClient, error) {
	stream, err := c.cc.NewStream(ctx, &Node_ServiceDesc.Streams[4], Node_SubscribeCustomMsg_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeSubscribeCustomMsgClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Node_SubscribeCustomMsgClient interface {
	Recv() (*CustomMsgNotification, error)
	grpc.ClientStream
}

type nodeSubscribeCustomMsgClient struct {
	grpc.ClientStream
}

func (x *nodeSubscribeCustomMsgClient) Recv() (*CustomMsgNotification, error) {
	m := new(CustomMsgNotification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) SubscribeChannelStateChanged(ctx context.Context, in *StreamChannelStateChangedRequest, opts ...grpc.CallOption) (Node_SubscribeChannelStateChangedClient, error) {
	stream, err := c.cc.NewStream(ctx, &Node_ServiceDesc.Streams[5], Node_SubscribeChannelStateChanged_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeSubscribeChannelStateChangedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Node_SubscribeChannelStateChangedClient interface {
	Recv() (*ChannelStateChangedNotification, error)
	grpc.ClientStream
}

type nodeSubscribeChannelStateChangedClient struct {
	grpc.ClientStream
}

func (x *nodeSubscribeChannelStateChangedClient) Recv() (*ChannelStateChangedNotification, error) {
	m := new(ChannelStateChangedNotification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NodeServer is the server API for Node service.
// All implementations must embed UnimplementedNodeServer
// for forward compatibility
type NodeServer interface {
	Getinfo(context.Context, *GetinfoRequest) (*GetinfoResponse, error)
	ListPeers(context.Context, *ListpeersRequest) (*ListpeersResponse, error)
	ListFunds(context.Context, *ListfundsRequest) (*ListfundsResponse, error)
	SendPay(context.Context, *SendpayRequest) (*SendpayResponse, error)
	ListChannels(context.Context, *ListchannelsRequest) (*ListchannelsResponse, error)
	AddGossip(context.Context, *AddgossipRequest) (*AddgossipResponse, error)
	AddPsbtOutput(context.Context, *AddpsbtoutputRequest) (*AddpsbtoutputResponse, error)
	AutoCleanOnce(context.Context, *AutocleanonceRequest) (*AutocleanonceResponse, error)
	AutoCleanStatus(context.Context, *AutocleanstatusRequest) (*AutocleanstatusResponse, error)
	CheckMessage(context.Context, *CheckmessageRequest) (*CheckmessageResponse, error)
	Close(context.Context, *CloseRequest) (*CloseResponse, error)
	ConnectPeer(context.Context, *ConnectRequest) (*ConnectResponse, error)
	CreateInvoice(context.Context, *CreateinvoiceRequest) (*CreateinvoiceResponse, error)
	Datastore(context.Context, *DatastoreRequest) (*DatastoreResponse, error)
	DatastoreUsage(context.Context, *DatastoreusageRequest) (*DatastoreusageResponse, error)
	CreateOnion(context.Context, *CreateonionRequest) (*CreateonionResponse, error)
	DelDatastore(context.Context, *DeldatastoreRequest) (*DeldatastoreResponse, error)
	DelInvoice(context.Context, *DelinvoiceRequest) (*DelinvoiceResponse, error)
	DevForgetChannel(context.Context, *DevforgetchannelRequest) (*DevforgetchannelResponse, error)
	EmergencyRecover(context.Context, *EmergencyrecoverRequest) (*EmergencyrecoverResponse, error)
	GetEmergencyRecoverData(context.Context, *GetemergencyrecoverdataRequest) (*GetemergencyrecoverdataResponse, error)
	ExposeSecret(context.Context, *ExposesecretRequest) (*ExposesecretResponse, error)
	Recover(context.Context, *RecoverRequest) (*RecoverResponse, error)
	RecoverChannel(context.Context, *RecoverchannelRequest) (*RecoverchannelResponse, error)
	Invoice(context.Context, *InvoiceRequest) (*InvoiceResponse, error)
	CreateInvoiceRequest(context.Context, *InvoicerequestRequest) (*InvoicerequestResponse, error)
	DisableInvoiceRequest(context.Context, *DisableinvoicerequestRequest) (*DisableinvoicerequestResponse, error)
	ListInvoiceRequests(context.Context, *ListinvoicerequestsRequest) (*ListinvoicerequestsResponse, error)
	ListDatastore(context.Context, *ListdatastoreRequest) (*ListdatastoreResponse, error)
	ListInvoices(context.Context, *ListinvoicesRequest) (*ListinvoicesResponse, error)
	SendOnion(context.Context, *SendonionRequest) (*SendonionResponse, error)
	ListSendPays(context.Context, *ListsendpaysRequest) (*ListsendpaysResponse, error)
	ListTransactions(context.Context, *ListtransactionsRequest) (*ListtransactionsResponse, error)
	MakeSecret(context.Context, *MakesecretRequest) (*MakesecretResponse, error)
	Pay(context.Context, *PayRequest) (*PayResponse, error)
	ListNodes(context.Context, *ListnodesRequest) (*ListnodesResponse, error)
	WaitAnyInvoice(context.Context, *WaitanyinvoiceRequest) (*WaitanyinvoiceResponse, error)
	WaitInvoice(context.Context, *WaitinvoiceRequest) (*WaitinvoiceResponse, error)
	WaitSendPay(context.Context, *WaitsendpayRequest) (*WaitsendpayResponse, error)
	NewAddr(context.Context, *NewaddrRequest) (*NewaddrResponse, error)
	Withdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error)
	KeySend(context.Context, *KeysendRequest) (*KeysendResponse, error)
	FundPsbt(context.Context, *FundpsbtRequest) (*FundpsbtResponse, error)
	SendPsbt(context.Context, *SendpsbtRequest) (*SendpsbtResponse, error)
	SignPsbt(context.Context, *SignpsbtRequest) (*SignpsbtResponse, error)
	UtxoPsbt(context.Context, *UtxopsbtRequest) (*UtxopsbtResponse, error)
	TxDiscard(context.Context, *TxdiscardRequest) (*TxdiscardResponse, error)
	TxPrepare(context.Context, *TxprepareRequest) (*TxprepareResponse, error)
	TxSend(context.Context, *TxsendRequest) (*TxsendResponse, error)
	ListPeerChannels(context.Context, *ListpeerchannelsRequest) (*ListpeerchannelsResponse, error)
	ListClosedChannels(context.Context, *ListclosedchannelsRequest) (*ListclosedchannelsResponse, error)
	DecodePay(context.Context, *DecodepayRequest) (*DecodepayResponse, error)
	Decode(context.Context, *DecodeRequest) (*DecodeResponse, error)
	DelPay(context.Context, *DelpayRequest) (*DelpayResponse, error)
	DelForward(context.Context, *DelforwardRequest) (*DelforwardResponse, error)
	DisableOffer(context.Context, *DisableofferRequest) (*DisableofferResponse, error)
	EnableOffer(context.Context, *EnableofferRequest) (*EnableofferResponse, error)
	Disconnect(context.Context, *DisconnectRequest) (*DisconnectResponse, error)
	Feerates(context.Context, *FeeratesRequest) (*FeeratesResponse, error)
	FetchBip353(context.Context, *Fetchbip353Request) (*Fetchbip353Response, error)
	FetchInvoice(context.Context, *FetchinvoiceRequest) (*FetchinvoiceResponse, error)
	FundChannelCancel(context.Context, *FundchannelCancelRequest) (*FundchannelCancelResponse, error)
	FundChannelComplete(context.Context, *FundchannelCompleteRequest) (*FundchannelCompleteResponse, error)
	FundChannel(context.Context, *FundchannelRequest) (*FundchannelResponse, error)
	FundChannelStart(context.Context, *FundchannelStartRequest) (*FundchannelStartResponse, error)
	GetLog(context.Context, *GetlogRequest) (*GetlogResponse, error)
	FunderUpdate(context.Context, *FunderupdateRequest) (*FunderupdateResponse, error)
	GetRoute(context.Context, *GetrouteRequest) (*GetrouteResponse, error)
	ListAddresses(context.Context, *ListaddressesRequest) (*ListaddressesResponse, error)
	ListForwards(context.Context, *ListforwardsRequest) (*ListforwardsResponse, error)
	ListOffers(context.Context, *ListoffersRequest) (*ListoffersResponse, error)
	ListPays(context.Context, *ListpaysRequest) (*ListpaysResponse, error)
	ListHtlcs(context.Context, *ListhtlcsRequest) (*ListhtlcsResponse, error)
	MultiFundChannel(context.Context, *MultifundchannelRequest) (*MultifundchannelResponse, error)
	MultiWithdraw(context.Context, *MultiwithdrawRequest) (*MultiwithdrawResponse, error)
	Offer(context.Context, *OfferRequest) (*OfferResponse, error)
	OpenChannelAbort(context.Context, *OpenchannelAbortRequest) (*OpenchannelAbortResponse, error)
	OpenChannelBump(context.Context, *OpenchannelBumpRequest) (*OpenchannelBumpResponse, error)
	OpenChannelInit(context.Context, *OpenchannelInitRequest) (*OpenchannelInitResponse, error)
	OpenChannelSigned(context.Context, *OpenchannelSignedRequest) (*OpenchannelSignedResponse, error)
	OpenChannelUpdate(context.Context, *OpenchannelUpdateRequest) (*OpenchannelUpdateResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Plugin(context.Context, *PluginRequest) (*PluginResponse, error)
	RenePayStatus(context.Context, *RenepaystatusRequest) (*RenepaystatusResponse, error)
	RenePay(context.Context, *RenepayRequest) (*RenepayResponse, error)
	ReserveInputs(context.Context, *ReserveinputsRequest) (*ReserveinputsResponse, error)
	SendCustomMsg(context.Context, *SendcustommsgRequest) (*SendcustommsgResponse, error)
	SendInvoice(context.Context, *SendinvoiceRequest) (*SendinvoiceResponse, error)
	SetChannel(context.Context, *SetchannelRequest) (*SetchannelResponse, error)
	SetConfig(context.Context, *SetconfigRequest) (*SetconfigResponse, error)
	SetPsbtVersion(context.Context, *SetpsbtversionRequest) (*SetpsbtversionResponse, error)
	SignInvoice(context.Context, *SigninvoiceRequest) (*SigninvoiceResponse, error)
	SignMessage(context.Context, *SignmessageRequest) (*SignmessageResponse, error)
	SpliceInit(context.Context, *SpliceInitRequest) (*SpliceInitResponse, error)
	SpliceSigned(context.Context, *SpliceSignedRequest) (*SpliceSignedResponse, error)
	SpliceUpdate(context.Context, *SpliceUpdateRequest) (*SpliceUpdateResponse, error)
	DevSplice(context.Context, *DevspliceRequest) (*DevspliceResponse, error)
	UnreserveInputs(context.Context, *UnreserveinputsRequest) (*UnreserveinputsResponse, error)
	UpgradeWallet(context.Context, *UpgradewalletRequest) (*UpgradewalletResponse, error)
	WaitBlockHeight(context.Context, *WaitblockheightRequest) (*WaitblockheightResponse, error)
	Wait(context.Context, *WaitRequest) (*WaitResponse, error)
	ListConfigs(context.Context, *ListconfigsRequest) (*ListconfigsResponse, error)
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	Help(context.Context, *HelpRequest) (*HelpResponse, error)
	PreApproveKeysend(context.Context, *PreapprovekeysendRequest) (*PreapprovekeysendResponse, error)
	PreApproveInvoice(context.Context, *PreapproveinvoiceRequest) (*PreapproveinvoiceResponse, error)
	StaticBackup(context.Context, *StaticbackupRequest) (*StaticbackupResponse, error)
	BkprChannelsApy(context.Context, *BkprchannelsapyRequest) (*BkprchannelsapyResponse, error)
	BkprDumpIncomeCsv(context.Context, *BkprdumpincomecsvRequest) (*BkprdumpincomecsvResponse, error)
	BkprInspect(context.Context, *BkprinspectRequest) (*BkprinspectResponse, error)
	BkprListAccountEvents(context.Context, *BkprlistaccounteventsRequest) (*BkprlistaccounteventsResponse, error)
	BkprListBalances(context.Context, *BkprlistbalancesRequest) (*BkprlistbalancesResponse, error)
	BkprListIncome(context.Context, *BkprlistincomeRequest) (*BkprlistincomeResponse, error)
	BkprEditDescriptionByPaymentId(context.Context, *BkpreditdescriptionbypaymentidRequest) (*BkpreditdescriptionbypaymentidResponse, error)
	BkprEditDescriptionByOutpoint(context.Context, *BkpreditdescriptionbyoutpointRequest) (*BkpreditdescriptionbyoutpointResponse, error)
	BlacklistRune(context.Context, *BlacklistruneRequest) (*BlacklistruneResponse, error)
	CheckRune(context.Context, *CheckruneRequest) (*CheckruneResponse, error)
	CreateRune(context.Context, *CreateruneRequest) (*CreateruneResponse, error)
	ShowRunes(context.Context, *ShowrunesRequest) (*ShowrunesResponse, error)
	AskReneUnreserve(context.Context, *AskreneunreserveRequest) (*AskreneunreserveResponse, error)
	AskReneListLayers(context.Context, *AskrenelistlayersRequest) (*AskrenelistlayersResponse, error)
	AskReneCreateLayer(context.Context, *AskrenecreatelayerRequest) (*AskrenecreatelayerResponse, error)
	AskReneRemoveLayer(context.Context, *AskreneremovelayerRequest) (*AskreneremovelayerResponse, error)
	AskReneReserve(context.Context, *AskrenereserveRequest) (*AskrenereserveResponse, error)
	AskReneAge(context.Context, *AskreneageRequest) (*AskreneageResponse, error)
	GetRoutes(context.Context, *GetroutesRequest) (*GetroutesResponse, error)
	AskReneDisableNode(context.Context, *AskrenedisablenodeRequest) (*AskrenedisablenodeResponse, error)
	AskReneInformChannel(context.Context, *AskreneinformchannelRequest) (*AskreneinformchannelResponse, error)
	AskReneCreateChannel(context.Context, *AskrenecreatechannelRequest) (*AskrenecreatechannelResponse, error)
	AskReneUpdateChannel(context.Context, *AskreneupdatechannelRequest) (*AskreneupdatechannelResponse, error)
	AskReneBiasChannel(context.Context, *AskrenebiaschannelRequest) (*AskrenebiaschannelResponse, error)
	AskReneListReservations(context.Context, *AskrenelistreservationsRequest) (*AskrenelistreservationsResponse, error)
	InjectPaymentOnion(context.Context, *InjectpaymentonionRequest) (*InjectpaymentonionResponse, error)
	InjectOnionMessage(context.Context, *InjectonionmessageRequest) (*InjectonionmessageResponse, error)
	Xpay(context.Context, *XpayRequest) (*XpayResponse, error)
	SignMessageWithKey(context.Context, *SignmessagewithkeyRequest) (*SignmessagewithkeyResponse, error)
	SubscribeBlockAdded(*StreamBlockAddedRequest, Node_SubscribeBlockAddedServer) error
	SubscribeChannelOpenFailed(*StreamChannelOpenFailedRequest, Node_SubscribeChannelOpenFailedServer) error
	SubscribeChannelOpened(*StreamChannelOpenedRequest, Node_SubscribeChannelOpenedServer) error
	SubscribeConnect(*StreamConnectRequest, Node_SubscribeConnectServer) error
	SubscribeCustomMsg(*StreamCustomMsgRequest, Node_SubscribeCustomMsgServer) error
	SubscribeChannelStateChanged(*StreamChannelStateChangedRequest, Node_SubscribeChannelStateChangedServer) error
	mustEmbedUnimplementedNodeServer()
}

// UnimplementedNodeServer must be embedded to have forward compatible implementations.
type UnimplementedNodeServer struct {
}

func (UnimplementedNodeServer) Getinfo(context.Context, *GetinfoRequest) (*GetinfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getinfo not implemented")
}
func (UnimplementedNodeServer) ListPeers(context.Context, *ListpeersRequest) (*ListpeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPeers not implemented")
}
func (UnimplementedNodeServer) ListFunds(context.Context, *ListfundsRequest) (*ListfundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFunds not implemented")
}
func (UnimplementedNodeServer) SendPay(context.Context, *SendpayRequest) (*SendpayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPay not implemented")
}
func (UnimplementedNodeServer) ListChannels(context.Context, *ListchannelsRequest) (*ListchannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChannels not implemented")
}
func (UnimplementedNodeServer) AddGossip(context.Context, *AddgossipRequest) (*AddgossipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGossip not implemented")
}
func (UnimplementedNodeServer) AddPsbtOutput(context.Context, *AddpsbtoutputRequest) (*AddpsbtoutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPsbtOutput not implemented")
}
func (UnimplementedNodeServer) AutoCleanOnce(context.Context, *AutocleanonceRequest) (*AutocleanonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoCleanOnce not implemented")
}
func (UnimplementedNodeServer) AutoCleanStatus(context.Context, *AutocleanstatusRequest) (*AutocleanstatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoCleanStatus not implemented")
}
func (UnimplementedNodeServer) CheckMessage(context.Context, *CheckmessageRequest) (*CheckmessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMessage not implemented")
}
func (UnimplementedNodeServer) Close(context.Context, *CloseRequest) (*CloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedNodeServer) ConnectPeer(context.Context, *ConnectRequest) (*ConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectPeer not implemented")
}
func (UnimplementedNodeServer) CreateInvoice(context.Context, *CreateinvoiceRequest) (*CreateinvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoice not implemented")
}
func (UnimplementedNodeServer) Datastore(context.Context, *DatastoreRequest) (*DatastoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Datastore not implemented")
}
func (UnimplementedNodeServer) DatastoreUsage(context.Context, *DatastoreusageRequest) (*DatastoreusageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatastoreUsage not implemented")
}
func (UnimplementedNodeServer) CreateOnion(context.Context, *CreateonionRequest) (*CreateonionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOnion not implemented")
}
func (UnimplementedNodeServer) DelDatastore(context.Context, *DeldatastoreRequest) (*DeldatastoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDatastore not implemented")
}
func (UnimplementedNodeServer) DelInvoice(context.Context, *DelinvoiceRequest) (*DelinvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelInvoice not implemented")
}
func (UnimplementedNodeServer) DevForgetChannel(context.Context, *DevforgetchannelRequest) (*DevforgetchannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DevForgetChannel not implemented")
}
func (UnimplementedNodeServer) EmergencyRecover(context.Context, *EmergencyrecoverRequest) (*EmergencyrecoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmergencyRecover not implemented")
}
func (UnimplementedNodeServer) GetEmergencyRecoverData(context.Context, *GetemergencyrecoverdataRequest) (*GetemergencyrecoverdataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmergencyRecoverData not implemented")
}
func (UnimplementedNodeServer) ExposeSecret(context.Context, *ExposesecretRequest) (*ExposesecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExposeSecret not implemented")
}
func (UnimplementedNodeServer) Recover(context.Context, *RecoverRequest) (*RecoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recover not implemented")
}
func (UnimplementedNodeServer) RecoverChannel(context.Context, *RecoverchannelRequest) (*RecoverchannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverChannel not implemented")
}
func (UnimplementedNodeServer) Invoice(context.Context, *InvoiceRequest) (*InvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invoice not implemented")
}
func (UnimplementedNodeServer) CreateInvoiceRequest(context.Context, *InvoicerequestRequest) (*InvoicerequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoiceRequest not implemented")
}
func (UnimplementedNodeServer) DisableInvoiceRequest(context.Context, *DisableinvoicerequestRequest) (*DisableinvoicerequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableInvoiceRequest not implemented")
}
func (UnimplementedNodeServer) ListInvoiceRequests(context.Context, *ListinvoicerequestsRequest) (*ListinvoicerequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvoiceRequests not implemented")
}
func (UnimplementedNodeServer) ListDatastore(context.Context, *ListdatastoreRequest) (*ListdatastoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatastore not implemented")
}
func (UnimplementedNodeServer) ListInvoices(context.Context, *ListinvoicesRequest) (*ListinvoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvoices not implemented")
}
func (UnimplementedNodeServer) SendOnion(context.Context, *SendonionRequest) (*SendonionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOnion not implemented")
}
func (UnimplementedNodeServer) ListSendPays(context.Context, *ListsendpaysRequest) (*ListsendpaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSendPays not implemented")
}
func (UnimplementedNodeServer) ListTransactions(context.Context, *ListtransactionsRequest) (*ListtransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactions not implemented")
}
func (UnimplementedNodeServer) MakeSecret(context.Context, *MakesecretRequest) (*MakesecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeSecret not implemented")
}
func (UnimplementedNodeServer) Pay(context.Context, *PayRequest) (*PayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pay not implemented")
}
func (UnimplementedNodeServer) ListNodes(context.Context, *ListnodesRequest) (*ListnodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (UnimplementedNodeServer) WaitAnyInvoice(context.Context, *WaitanyinvoiceRequest) (*WaitanyinvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitAnyInvoice not implemented")
}
func (UnimplementedNodeServer) WaitInvoice(context.Context, *WaitinvoiceRequest) (*WaitinvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitInvoice not implemented")
}
func (UnimplementedNodeServer) WaitSendPay(context.Context, *WaitsendpayRequest) (*WaitsendpayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitSendPay not implemented")
}
func (UnimplementedNodeServer) NewAddr(context.Context, *NewaddrRequest) (*NewaddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAddr not implemented")
}
func (UnimplementedNodeServer) Withdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (UnimplementedNodeServer) KeySend(context.Context, *KeysendRequest) (*KeysendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeySend not implemented")
}
func (UnimplementedNodeServer) FundPsbt(context.Context, *FundpsbtRequest) (*FundpsbtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundPsbt not implemented")
}
func (UnimplementedNodeServer) SendPsbt(context.Context, *SendpsbtRequest) (*SendpsbtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPsbt not implemented")
}
func (UnimplementedNodeServer) SignPsbt(context.Context, *SignpsbtRequest) (*SignpsbtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignPsbt not implemented")
}
func (UnimplementedNodeServer) UtxoPsbt(context.Context, *UtxopsbtRequest) (*UtxopsbtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UtxoPsbt not implemented")
}
func (UnimplementedNodeServer) TxDiscard(context.Context, *TxdiscardRequest) (*TxdiscardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxDiscard not implemented")
}
func (UnimplementedNodeServer) TxPrepare(context.Context, *TxprepareRequest) (*TxprepareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxPrepare not implemented")
}
func (UnimplementedNodeServer) TxSend(context.Context, *TxsendRequest) (*TxsendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxSend not implemented")
}
func (UnimplementedNodeServer) ListPeerChannels(context.Context, *ListpeerchannelsRequest) (*ListpeerchannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPeerChannels not implemented")
}
func (UnimplementedNodeServer) ListClosedChannels(context.Context, *ListclosedchannelsRequest) (*ListclosedchannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClosedChannels not implemented")
}
func (UnimplementedNodeServer) DecodePay(context.Context, *DecodepayRequest) (*DecodepayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecodePay not implemented")
}
func (UnimplementedNodeServer) Decode(context.Context, *DecodeRequest) (*DecodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decode not implemented")
}
func (UnimplementedNodeServer) DelPay(context.Context, *DelpayRequest) (*DelpayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelPay not implemented")
}
func (UnimplementedNodeServer) DelForward(context.Context, *DelforwardRequest) (*DelforwardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelForward not implemented")
}
func (UnimplementedNodeServer) DisableOffer(context.Context, *DisableofferRequest) (*DisableofferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableOffer not implemented")
}
func (UnimplementedNodeServer) EnableOffer(context.Context, *EnableofferRequest) (*EnableofferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableOffer not implemented")
}
func (UnimplementedNodeServer) Disconnect(context.Context, *DisconnectRequest) (*DisconnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedNodeServer) Feerates(context.Context, *FeeratesRequest) (*FeeratesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Feerates not implemented")
}
func (UnimplementedNodeServer) FetchBip353(context.Context, *Fetchbip353Request) (*Fetchbip353Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchBip353 not implemented")
}
func (UnimplementedNodeServer) FetchInvoice(context.Context, *FetchinvoiceRequest) (*FetchinvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchInvoice not implemented")
}
func (UnimplementedNodeServer) FundChannelCancel(context.Context, *FundchannelCancelRequest) (*FundchannelCancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundChannelCancel not implemented")
}
func (UnimplementedNodeServer) FundChannelComplete(context.Context, *FundchannelCompleteRequest) (*FundchannelCompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundChannelComplete not implemented")
}
func (UnimplementedNodeServer) FundChannel(context.Context, *FundchannelRequest) (*FundchannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundChannel not implemented")
}
func (UnimplementedNodeServer) FundChannelStart(context.Context, *FundchannelStartRequest) (*FundchannelStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundChannelStart not implemented")
}
func (UnimplementedNodeServer) GetLog(context.Context, *GetlogRequest) (*GetlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLog not implemented")
}
func (UnimplementedNodeServer) FunderUpdate(context.Context, *FunderupdateRequest) (*FunderupdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FunderUpdate not implemented")
}
func (UnimplementedNodeServer) GetRoute(context.Context, *GetrouteRequest) (*GetrouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoute not implemented")
}
func (UnimplementedNodeServer) ListAddresses(context.Context, *ListaddressesRequest) (*ListaddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAddresses not implemented")
}
func (UnimplementedNodeServer) ListForwards(context.Context, *ListforwardsRequest) (*ListforwardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListForwards not implemented")
}
func (UnimplementedNodeServer) ListOffers(context.Context, *ListoffersRequest) (*ListoffersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOffers not implemented")
}
func (UnimplementedNodeServer) ListPays(context.Context, *ListpaysRequest) (*ListpaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPays not implemented")
}
func (UnimplementedNodeServer) ListHtlcs(context.Context, *ListhtlcsRequest) (*ListhtlcsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHtlcs not implemented")
}
func (UnimplementedNodeServer) MultiFundChannel(context.Context, *MultifundchannelRequest) (*MultifundchannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiFundChannel not implemented")
}
func (UnimplementedNodeServer) MultiWithdraw(context.Context, *MultiwithdrawRequest) (*MultiwithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiWithdraw not implemented")
}
func (UnimplementedNodeServer) Offer(context.Context, *OfferRequest) (*OfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Offer not implemented")
}
func (UnimplementedNodeServer) OpenChannelAbort(context.Context, *OpenchannelAbortRequest) (*OpenchannelAbortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenChannelAbort not implemented")
}
func (UnimplementedNodeServer) OpenChannelBump(context.Context, *OpenchannelBumpRequest) (*OpenchannelBumpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenChannelBump not implemented")
}
func (UnimplementedNodeServer) OpenChannelInit(context.Context, *OpenchannelInitRequest) (*OpenchannelInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenChannelInit not implemented")
}
func (UnimplementedNodeServer) OpenChannelSigned(context.Context, *OpenchannelSignedRequest) (*OpenchannelSignedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenChannelSigned not implemented")
}
func (UnimplementedNodeServer) OpenChannelUpdate(context.Context, *OpenchannelUpdateRequest) (*OpenchannelUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenChannelUpdate not implemented")
}
func (UnimplementedNodeServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedNodeServer) Plugin(context.Context, *PluginRequest) (*PluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Plugin not implemented")
}
func (UnimplementedNodeServer) RenePayStatus(context.Context, *RenepaystatusRequest) (*RenepaystatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenePayStatus not implemented")
}
func (UnimplementedNodeServer) RenePay(context.Context, *RenepayRequest) (*RenepayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenePay not implemented")
}
func (UnimplementedNodeServer) ReserveInputs(context.Context, *ReserveinputsRequest) (*ReserveinputsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveInputs not implemented")
}
func (UnimplementedNodeServer) SendCustomMsg(context.Context, *SendcustommsgRequest) (*SendcustommsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCustomMsg not implemented")
}
func (UnimplementedNodeServer) SendInvoice(context.Context, *SendinvoiceRequest) (*SendinvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInvoice not implemented")
}
func (UnimplementedNodeServer) SetChannel(context.Context, *SetchannelRequest) (*SetchannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChannel not implemented")
}
func (UnimplementedNodeServer) SetConfig(context.Context, *SetconfigRequest) (*SetconfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedNodeServer) SetPsbtVersion(context.Context, *SetpsbtversionRequest) (*SetpsbtversionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPsbtVersion not implemented")
}
func (UnimplementedNodeServer) SignInvoice(context.Context, *SigninvoiceRequest) (*SigninvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignInvoice not implemented")
}
func (UnimplementedNodeServer) SignMessage(context.Context, *SignmessageRequest) (*SignmessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignMessage not implemented")
}
func (UnimplementedNodeServer) SpliceInit(context.Context, *SpliceInitRequest) (*SpliceInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpliceInit not implemented")
}
func (UnimplementedNodeServer) SpliceSigned(context.Context, *SpliceSignedRequest) (*SpliceSignedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpliceSigned not implemented")
}
func (UnimplementedNodeServer) SpliceUpdate(context.Context, *SpliceUpdateRequest) (*SpliceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpliceUpdate not implemented")
}
func (UnimplementedNodeServer) DevSplice(context.Context, *DevspliceRequest) (*DevspliceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DevSplice not implemented")
}
func (UnimplementedNodeServer) UnreserveInputs(context.Context, *UnreserveinputsRequest) (*UnreserveinputsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnreserveInputs not implemented")
}
func (UnimplementedNodeServer) UpgradeWallet(context.Context, *UpgradewalletRequest) (*UpgradewalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeWallet not implemented")
}
func (UnimplementedNodeServer) WaitBlockHeight(context.Context, *WaitblockheightRequest) (*WaitblockheightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitBlockHeight not implemented")
}
func (UnimplementedNodeServer) Wait(context.Context, *WaitRequest) (*WaitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Wait not implemented")
}
func (UnimplementedNodeServer) ListConfigs(context.Context, *ListconfigsRequest) (*ListconfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfigs not implemented")
}
func (UnimplementedNodeServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedNodeServer) Help(context.Context, *HelpRequest) (*HelpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Help not implemented")
}
func (UnimplementedNodeServer) PreApproveKeysend(context.Context, *PreapprovekeysendRequest) (*PreapprovekeysendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreApproveKeysend not implemented")
}
func (UnimplementedNodeServer) PreApproveInvoice(context.Context, *PreapproveinvoiceRequest) (*PreapproveinvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreApproveInvoice not implemented")
}
func (UnimplementedNodeServer) StaticBackup(context.Context, *StaticbackupRequest) (*StaticbackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StaticBackup not implemented")
}
func (UnimplementedNodeServer) BkprChannelsApy(context.Context, *BkprchannelsapyRequest) (*BkprchannelsapyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BkprChannelsApy not implemented")
}
func (UnimplementedNodeServer) BkprDumpIncomeCsv(context.Context, *BkprdumpincomecsvRequest) (*BkprdumpincomecsvResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BkprDumpIncomeCsv not implemented")
}
func (UnimplementedNodeServer) BkprInspect(context.Context, *BkprinspectRequest) (*BkprinspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BkprInspect not implemented")
}
func (UnimplementedNodeServer) BkprListAccountEvents(context.Context, *BkprlistaccounteventsRequest) (*BkprlistaccounteventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BkprListAccountEvents not implemented")
}
func (UnimplementedNodeServer) BkprListBalances(context.Context, *BkprlistbalancesRequest) (*BkprlistbalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BkprListBalances not implemented")
}
func (UnimplementedNodeServer) BkprListIncome(context.Context, *BkprlistincomeRequest) (*BkprlistincomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BkprListIncome not implemented")
}
func (UnimplementedNodeServer) BkprEditDescriptionByPaymentId(context.Context, *BkpreditdescriptionbypaymentidRequest) (*BkpreditdescriptionbypaymentidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BkprEditDescriptionByPaymentId not implemented")
}
func (UnimplementedNodeServer) BkprEditDescriptionByOutpoint(context.Context, *BkpreditdescriptionbyoutpointRequest) (*BkpreditdescriptionbyoutpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BkprEditDescriptionByOutpoint not implemented")
}
func (UnimplementedNodeServer) BlacklistRune(context.Context, *BlacklistruneRequest) (*BlacklistruneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlacklistRune not implemented")
}
func (UnimplementedNodeServer) CheckRune(context.Context, *CheckruneRequest) (*CheckruneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRune not implemented")
}
func (UnimplementedNodeServer) CreateRune(context.Context, *CreateruneRequest) (*CreateruneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRune not implemented")
}
func (UnimplementedNodeServer) ShowRunes(context.Context, *ShowrunesRequest) (*ShowrunesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowRunes not implemented")
}
func (UnimplementedNodeServer) AskReneUnreserve(context.Context, *AskreneunreserveRequest) (*AskreneunreserveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskReneUnreserve not implemented")
}
func (UnimplementedNodeServer) AskReneListLayers(context.Context, *AskrenelistlayersRequest) (*AskrenelistlayersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskReneListLayers not implemented")
}
func (UnimplementedNodeServer) AskReneCreateLayer(context.Context, *AskrenecreatelayerRequest) (*AskrenecreatelayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskReneCreateLayer not implemented")
}
func (UnimplementedNodeServer) AskReneRemoveLayer(context.Context, *AskreneremovelayerRequest) (*AskreneremovelayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskReneRemoveLayer not implemented")
}
func (UnimplementedNodeServer) AskReneReserve(context.Context, *AskrenereserveRequest) (*AskrenereserveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskReneReserve not implemented")
}
func (UnimplementedNodeServer) AskReneAge(context.Context, *AskreneageRequest) (*AskreneageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskReneAge not implemented")
}
func (UnimplementedNodeServer) GetRoutes(context.Context, *GetroutesRequest) (*GetroutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoutes not implemented")
}
func (UnimplementedNodeServer) AskReneDisableNode(context.Context, *AskrenedisablenodeRequest) (*AskrenedisablenodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskReneDisableNode not implemented")
}
func (UnimplementedNodeServer) AskReneInformChannel(context.Context, *AskreneinformchannelRequest) (*AskreneinformchannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskReneInformChannel not implemented")
}
func (UnimplementedNodeServer) AskReneCreateChannel(context.Context, *AskrenecreatechannelRequest) (*AskrenecreatechannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskReneCreateChannel not implemented")
}
func (UnimplementedNodeServer) AskReneUpdateChannel(context.Context, *AskreneupdatechannelRequest) (*AskreneupdatechannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskReneUpdateChannel not implemented")
}
func (UnimplementedNodeServer) AskReneBiasChannel(context.Context, *AskrenebiaschannelRequest) (*AskrenebiaschannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskReneBiasChannel not implemented")
}
func (UnimplementedNodeServer) AskReneListReservations(context.Context, *AskrenelistreservationsRequest) (*AskrenelistreservationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskReneListReservations not implemented")
}
func (UnimplementedNodeServer) InjectPaymentOnion(context.Context, *InjectpaymentonionRequest) (*InjectpaymentonionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InjectPaymentOnion not implemented")
}
func (UnimplementedNodeServer) InjectOnionMessage(context.Context, *InjectonionmessageRequest) (*InjectonionmessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InjectOnionMessage not implemented")
}
func (UnimplementedNodeServer) Xpay(context.Context, *XpayRequest) (*XpayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Xpay not implemented")
}
func (UnimplementedNodeServer) SignMessageWithKey(context.Context, *SignmessagewithkeyRequest) (*SignmessagewithkeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignMessageWithKey not implemented")
}
func (UnimplementedNodeServer) SubscribeBlockAdded(*StreamBlockAddedRequest, Node_SubscribeBlockAddedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBlockAdded not implemented")
}
func (UnimplementedNodeServer) SubscribeChannelOpenFailed(*StreamChannelOpenFailedRequest, Node_SubscribeChannelOpenFailedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeChannelOpenFailed not implemented")
}
func (UnimplementedNodeServer) SubscribeChannelOpened(*StreamChannelOpenedRequest, Node_SubscribeChannelOpenedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeChannelOpened not implemented")
}
func (UnimplementedNodeServer) SubscribeConnect(*StreamConnectRequest, Node_SubscribeConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeConnect not implemented")
}
func (UnimplementedNodeServer) SubscribeCustomMsg(*StreamCustomMsgRequest, Node_SubscribeCustomMsgServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCustomMsg not implemented")
}
func (UnimplementedNodeServer) SubscribeChannelStateChanged(*StreamChannelStateChangedRequest, Node_SubscribeChannelStateChangedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeChannelStateChanged not implemented")
}
func (UnimplementedNodeServer) mustEmbedUnimplementedNodeServer() {}

// UnsafeNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServer will
// result in compilation errors.
type UnsafeNodeServer interface {
	mustEmbedUnimplementedNodeServer()
}

func RegisterNodeServer(s grpc.ServiceRegistrar, srv NodeServer) {
	s.RegisterService(&Node_ServiceDesc, srv)
}

func _Node_Getinfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetinfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Getinfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_Getinfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Getinfo(ctx, req.(*GetinfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ListPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListpeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_ListPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListPeers(ctx, req.(*ListpeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ListFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListfundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_ListFunds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListFunds(ctx, req.(*ListfundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SendPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendpayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SendPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_SendPay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SendPay(ctx, req.(*SendpayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ListChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListchannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_ListChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListChannels(ctx, req.(*ListchannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_AddGossip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddgossipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AddGossip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_AddGossip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AddGossip(ctx, req.(*AddgossipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_AddPsbtOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddpsbtoutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AddPsbtOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_AddPsbtOutput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AddPsbtOutput(ctx, req.(*AddpsbtoutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_AutoCleanOnce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutocleanonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AutoCleanOnce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_AutoCleanOnce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AutoCleanOnce(ctx, req.(*AutocleanonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_AutoCleanStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutocleanstatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AutoCleanStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_AutoCleanStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AutoCleanStatus(ctx, req.(*AutocleanstatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_CheckMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckmessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).CheckMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_CheckMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).CheckMessage(ctx, req.(*CheckmessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_Close_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Close(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ConnectPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ConnectPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_ConnectPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ConnectPeer(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_CreateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateinvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).CreateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_CreateInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).CreateInvoice(ctx, req.(*CreateinvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Datastore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatastoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Datastore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_Datastore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Datastore(ctx, req.(*DatastoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_DatastoreUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatastoreusageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).DatastoreUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_DatastoreUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).DatastoreUsage(ctx, req.(*DatastoreusageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_CreateOnion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateonionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).CreateOnion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_CreateOnion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).CreateOnion(ctx, req.(*CreateonionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_DelDatastore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeldatastoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).DelDatastore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_DelDatastore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).DelDatastore(ctx, req.(*DeldatastoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_DelInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelinvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).DelInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_DelInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).DelInvoice(ctx, req.(*DelinvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_DevForgetChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DevforgetchannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).DevForgetChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_DevForgetChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).DevForgetChannel(ctx, req.(*DevforgetchannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_EmergencyRecover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmergencyrecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).EmergencyRecover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_EmergencyRecover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).EmergencyRecover(ctx, req.(*EmergencyrecoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetEmergencyRecoverData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetemergencyrecoverdataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetEmergencyRecoverData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetEmergencyRecoverData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetEmergencyRecoverData(ctx, req.(*GetemergencyrecoverdataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ExposeSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExposesecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ExposeSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_ExposeSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ExposeSecret(ctx, req.(*ExposesecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Recover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Recover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_Recover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Recover(ctx, req.(*RecoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_RecoverChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverchannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).RecoverChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_RecoverChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).RecoverChannel(ctx, req.(*RecoverchannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Invoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Invoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_Invoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Invoice(ctx, req.(*InvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_CreateInvoiceRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoicerequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).CreateInvoiceRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_CreateInvoiceRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).CreateInvoiceRequest(ctx, req.(*InvoicerequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_DisableInvoiceRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableinvoicerequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).DisableInvoiceRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_DisableInvoiceRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).DisableInvoiceRequest(ctx, req.(*DisableinvoicerequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ListInvoiceRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListinvoicerequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListInvoiceRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_ListInvoiceRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListInvoiceRequests(ctx, req.(*ListinvoicerequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ListDatastore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListdatastoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListDatastore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_ListDatastore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListDatastore(ctx, req.(*ListdatastoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ListInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListinvoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_ListInvoices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListInvoices(ctx, req.(*ListinvoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SendOnion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendonionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SendOnion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_SendOnion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SendOnion(ctx, req.(*SendonionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ListSendPays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListsendpaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListSendPays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_ListSendPays_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListSendPays(ctx, req.(*ListsendpaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ListTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListtransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_ListTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListTransactions(ctx, req.(*ListtransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_MakeSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakesecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).MakeSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_MakeSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).MakeSecret(ctx, req.(*MakesecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Pay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Pay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_Pay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Pay(ctx, req.(*PayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListnodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_ListNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListNodes(ctx, req.(*ListnodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_WaitAnyInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitanyinvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).WaitAnyInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_WaitAnyInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).WaitAnyInvoice(ctx, req.(*WaitanyinvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_WaitInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitinvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).WaitInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_WaitInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).WaitInvoice(ctx, req.(*WaitinvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_WaitSendPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitsendpayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).WaitSendPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_WaitSendPay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).WaitSendPay(ctx, req.(*WaitsendpayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_NewAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewaddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).NewAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_NewAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).NewAddr(ctx, req.(*NewaddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_Withdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Withdraw(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_KeySend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeysendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).KeySend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_KeySend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).KeySend(ctx, req.(*KeysendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_FundPsbt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundpsbtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).FundPsbt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_FundPsbt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).FundPsbt(ctx, req.(*FundpsbtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SendPsbt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendpsbtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SendPsbt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_SendPsbt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SendPsbt(ctx, req.(*SendpsbtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SignPsbt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignpsbtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SignPsbt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_SignPsbt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SignPsbt(ctx, req.(*SignpsbtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_UtxoPsbt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UtxopsbtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).UtxoPsbt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_UtxoPsbt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).UtxoPsbt(ctx, req.(*UtxopsbtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_TxDiscard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxdiscardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).TxDiscard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_TxDiscard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).TxDiscard(ctx, req.(*TxdiscardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_TxPrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxprepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).TxPrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_TxPrepare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).TxPrepare(ctx, req.(*TxprepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_TxSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxsendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).TxSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_TxSend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).TxSend(ctx, req.(*TxsendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ListPeerChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListpeerchannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListPeerChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_ListPeerChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListPeerChannels(ctx, req.(*ListpeerchannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ListClosedChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListclosedchannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListClosedChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_ListClosedChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListClosedChannels(ctx, req.(*ListclosedchannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_DecodePay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecodepayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).DecodePay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_DecodePay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).DecodePay(ctx, req.(*DecodepayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Decode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Decode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_Decode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Decode(ctx, req.(*DecodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_DelPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelpayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).DelPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_DelPay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).DelPay(ctx, req.(*DelpayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_DelForward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelforwardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).DelForward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_DelForward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).DelForward(ctx, req.(*DelforwardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_DisableOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableofferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).DisableOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_DisableOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).DisableOffer(ctx, req.(*DisableofferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_EnableOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableofferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).EnableOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_EnableOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).EnableOffer(ctx, req.(*EnableofferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_Disconnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Disconnect(ctx, req.(*DisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Feerates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeeratesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Feerates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_Feerates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Feerates(ctx, req.(*FeeratesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_FetchBip353_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fetchbip353Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).FetchBip353(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_FetchBip353_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).FetchBip353(ctx, req.(*Fetchbip353Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_FetchInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchinvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).FetchInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_FetchInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).FetchInvoice(ctx, req.(*FetchinvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_FundChannelCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundchannelCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).FundChannelCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_FundChannelCancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).FundChannelCancel(ctx, req.(*FundchannelCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_FundChannelComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundchannelCompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).FundChannelComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_FundChannelComplete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).FundChannelComplete(ctx, req.(*FundchannelCompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_FundChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundchannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).FundChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_FundChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).FundChannel(ctx, req.(*FundchannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_FundChannelStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundchannelStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).FundChannelStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_FundChannelStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).FundChannelStart(ctx, req.(*FundchannelStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetLog(ctx, req.(*GetlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_FunderUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunderupdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).FunderUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_FunderUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).FunderUpdate(ctx, req.(*FunderupdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetrouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetRoute(ctx, req.(*GetrouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ListAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListaddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_ListAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListAddresses(ctx, req.(*ListaddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ListForwards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListforwardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListForwards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_ListForwards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListForwards(ctx, req.(*ListforwardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ListOffers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListoffersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListOffers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_ListOffers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListOffers(ctx, req.(*ListoffersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ListPays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListpaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListPays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_ListPays_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListPays(ctx, req.(*ListpaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ListHtlcs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListhtlcsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListHtlcs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_ListHtlcs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListHtlcs(ctx, req.(*ListhtlcsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_MultiFundChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultifundchannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).MultiFundChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_MultiFundChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).MultiFundChannel(ctx, req.(*MultifundchannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_MultiWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiwithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).MultiWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_MultiWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).MultiWithdraw(ctx, req.(*MultiwithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Offer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Offer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_Offer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Offer(ctx, req.(*OfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_OpenChannelAbort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenchannelAbortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).OpenChannelAbort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_OpenChannelAbort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).OpenChannelAbort(ctx, req.(*OpenchannelAbortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_OpenChannelBump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenchannelBumpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).OpenChannelBump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_OpenChannelBump_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).OpenChannelBump(ctx, req.(*OpenchannelBumpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_OpenChannelInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenchannelInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).OpenChannelInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_OpenChannelInit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).OpenChannelInit(ctx, req.(*OpenchannelInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_OpenChannelSigned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenchannelSignedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).OpenChannelSigned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_OpenChannelSigned_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).OpenChannelSigned(ctx, req.(*OpenchannelSignedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_OpenChannelUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenchannelUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).OpenChannelUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_OpenChannelUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).OpenChannelUpdate(ctx, req.(*OpenchannelUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Plugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Plugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_Plugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Plugin(ctx, req.(*PluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_RenePayStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenepaystatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).RenePayStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_RenePayStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).RenePayStatus(ctx, req.(*RenepaystatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_RenePay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenepayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).RenePay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_RenePay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).RenePay(ctx, req.(*RenepayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ReserveInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveinputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ReserveInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_ReserveInputs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ReserveInputs(ctx, req.(*ReserveinputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SendCustomMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendcustommsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SendCustomMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_SendCustomMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SendCustomMsg(ctx, req.(*SendcustommsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SendInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendinvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SendInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_SendInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SendInvoice(ctx, req.(*SendinvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SetChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetchannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SetChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_SetChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SetChannel(ctx, req.(*SetchannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetconfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_SetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SetConfig(ctx, req.(*SetconfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SetPsbtVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetpsbtversionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SetPsbtVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_SetPsbtVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SetPsbtVersion(ctx, req.(*SetpsbtversionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SignInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SigninvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SignInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_SignInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SignInvoice(ctx, req.(*SigninvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SignMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignmessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SignMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_SignMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SignMessage(ctx, req.(*SignmessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SpliceInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpliceInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SpliceInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_SpliceInit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SpliceInit(ctx, req.(*SpliceInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SpliceSigned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpliceSignedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SpliceSigned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_SpliceSigned_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SpliceSigned(ctx, req.(*SpliceSignedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SpliceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpliceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SpliceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_SpliceUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SpliceUpdate(ctx, req.(*SpliceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_DevSplice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DevspliceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).DevSplice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_DevSplice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).DevSplice(ctx, req.(*DevspliceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_UnreserveInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnreserveinputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).UnreserveInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_UnreserveInputs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).UnreserveInputs(ctx, req.(*UnreserveinputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_UpgradeWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradewalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).UpgradeWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_UpgradeWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).UpgradeWallet(ctx, req.(*UpgradewalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_WaitBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitblockheightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).WaitBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_WaitBlockHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).WaitBlockHeight(ctx, req.(*WaitblockheightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Wait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Wait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_Wait_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Wait(ctx, req.(*WaitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ListConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListconfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_ListConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListConfigs(ctx, req.(*ListconfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Help_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Help(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_Help_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Help(ctx, req.(*HelpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_PreApproveKeysend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreapprovekeysendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).PreApproveKeysend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_PreApproveKeysend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).PreApproveKeysend(ctx, req.(*PreapprovekeysendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_PreApproveInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreapproveinvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).PreApproveInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_PreApproveInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).PreApproveInvoice(ctx, req.(*PreapproveinvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_StaticBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaticbackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).StaticBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_StaticBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).StaticBackup(ctx, req.(*StaticbackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_BkprChannelsApy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BkprchannelsapyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).BkprChannelsApy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_BkprChannelsApy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).BkprChannelsApy(ctx, req.(*BkprchannelsapyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_BkprDumpIncomeCsv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BkprdumpincomecsvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).BkprDumpIncomeCsv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_BkprDumpIncomeCsv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).BkprDumpIncomeCsv(ctx, req.(*BkprdumpincomecsvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_BkprInspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BkprinspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).BkprInspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_BkprInspect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).BkprInspect(ctx, req.(*BkprinspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_BkprListAccountEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BkprlistaccounteventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).BkprListAccountEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_BkprListAccountEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).BkprListAccountEvents(ctx, req.(*BkprlistaccounteventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_BkprListBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BkprlistbalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).BkprListBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_BkprListBalances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).BkprListBalances(ctx, req.(*BkprlistbalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_BkprListIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BkprlistincomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).BkprListIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_BkprListIncome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).BkprListIncome(ctx, req.(*BkprlistincomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_BkprEditDescriptionByPaymentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BkpreditdescriptionbypaymentidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).BkprEditDescriptionByPaymentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_BkprEditDescriptionByPaymentId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).BkprEditDescriptionByPaymentId(ctx, req.(*BkpreditdescriptionbypaymentidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_BkprEditDescriptionByOutpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BkpreditdescriptionbyoutpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).BkprEditDescriptionByOutpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_BkprEditDescriptionByOutpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).BkprEditDescriptionByOutpoint(ctx, req.(*BkpreditdescriptionbyoutpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_BlacklistRune_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlacklistruneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).BlacklistRune(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_BlacklistRune_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).BlacklistRune(ctx, req.(*BlacklistruneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_CheckRune_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckruneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).CheckRune(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_CheckRune_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).CheckRune(ctx, req.(*CheckruneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_CreateRune_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateruneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).CreateRune(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_CreateRune_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).CreateRune(ctx, req.(*CreateruneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ShowRunes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowrunesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ShowRunes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_ShowRunes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ShowRunes(ctx, req.(*ShowrunesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_AskReneUnreserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskreneunreserveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AskReneUnreserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_AskReneUnreserve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AskReneUnreserve(ctx, req.(*AskreneunreserveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_AskReneListLayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskrenelistlayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AskReneListLayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_AskReneListLayers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AskReneListLayers(ctx, req.(*AskrenelistlayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_AskReneCreateLayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskrenecreatelayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AskReneCreateLayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_AskReneCreateLayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AskReneCreateLayer(ctx, req.(*AskrenecreatelayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_AskReneRemoveLayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskreneremovelayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AskReneRemoveLayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_AskReneRemoveLayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AskReneRemoveLayer(ctx, req.(*AskreneremovelayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_AskReneReserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskrenereserveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AskReneReserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_AskReneReserve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AskReneReserve(ctx, req.(*AskrenereserveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_AskReneAge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskreneageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AskReneAge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_AskReneAge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AskReneAge(ctx, req.(*AskreneageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetroutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetRoutes(ctx, req.(*GetroutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_AskReneDisableNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskrenedisablenodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AskReneDisableNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_AskReneDisableNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AskReneDisableNode(ctx, req.(*AskrenedisablenodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_AskReneInformChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskreneinformchannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AskReneInformChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_AskReneInformChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AskReneInformChannel(ctx, req.(*AskreneinformchannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_AskReneCreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskrenecreatechannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AskReneCreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_AskReneCreateChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AskReneCreateChannel(ctx, req.(*AskrenecreatechannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_AskReneUpdateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskreneupdatechannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AskReneUpdateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_AskReneUpdateChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AskReneUpdateChannel(ctx, req.(*AskreneupdatechannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_AskReneBiasChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskrenebiaschannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AskReneBiasChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_AskReneBiasChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AskReneBiasChannel(ctx, req.(*AskrenebiaschannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_AskReneListReservations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskrenelistreservationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AskReneListReservations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_AskReneListReservations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AskReneListReservations(ctx, req.(*AskrenelistreservationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_InjectPaymentOnion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InjectpaymentonionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).InjectPaymentOnion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_InjectPaymentOnion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).InjectPaymentOnion(ctx, req.(*InjectpaymentonionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_InjectOnionMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InjectonionmessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).InjectOnionMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_InjectOnionMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).InjectOnionMessage(ctx, req.(*InjectonionmessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Xpay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XpayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Xpay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_Xpay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Xpay(ctx, req.(*XpayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SignMessageWithKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignmessagewithkeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SignMessageWithKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_SignMessageWithKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SignMessageWithKey(ctx, req.(*SignmessagewithkeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SubscribeBlockAdded_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamBlockAddedRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServer).SubscribeBlockAdded(m, &nodeSubscribeBlockAddedServer{stream})
}

type Node_SubscribeBlockAddedServer interface {
	Send(*BlockAddedNotification) error
	grpc.ServerStream
}

type nodeSubscribeBlockAddedServer struct {
	grpc.ServerStream
}

func (x *nodeSubscribeBlockAddedServer) Send(m *BlockAddedNotification) error {
	return x.ServerStream.SendMsg(m)
}

func _Node_SubscribeChannelOpenFailed_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamChannelOpenFailedRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServer).SubscribeChannelOpenFailed(m, &nodeSubscribeChannelOpenFailedServer{stream})
}

type Node_SubscribeChannelOpenFailedServer interface {
	Send(*ChannelOpenFailedNotification) error
	grpc.ServerStream
}

type nodeSubscribeChannelOpenFailedServer struct {
	grpc.ServerStream
}

func (x *nodeSubscribeChannelOpenFailedServer) Send(m *ChannelOpenFailedNotification) error {
	return x.ServerStream.SendMsg(m)
}

func _Node_SubscribeChannelOpened_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamChannelOpenedRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServer).SubscribeChannelOpened(m, &nodeSubscribeChannelOpenedServer{stream})
}

type Node_SubscribeChannelOpenedServer interface {
	Send(*ChannelOpenedNotification) error
	grpc.ServerStream
}

type nodeSubscribeChannelOpenedServer struct {
	grpc.ServerStream
}

func (x *nodeSubscribeChannelOpenedServer) Send(m *ChannelOpenedNotification) error {
	return x.ServerStream.SendMsg(m)
}

func _Node_SubscribeConnect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamConnectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServer).SubscribeConnect(m, &nodeSubscribeConnectServer{stream})
}

type Node_SubscribeConnectServer interface {
	Send(*PeerConnectNotification) error
	grpc.ServerStream
}

type nodeSubscribeConnectServer struct {
	grpc.ServerStream
}

func (x *nodeSubscribeConnectServer) Send(m *PeerConnectNotification) error {
	return x.ServerStream.SendMsg(m)
}

func _Node_SubscribeCustomMsg_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamCustomMsgRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServer).SubscribeCustomMsg(m, &nodeSubscribeCustomMsgServer{stream})
}

type Node_SubscribeCustomMsgServer interface {
	Send(*CustomMsgNotification) error
	grpc.ServerStream
}

type nodeSubscribeCustomMsgServer struct {
	grpc.ServerStream
}

func (x *nodeSubscribeCustomMsgServer) Send(m *CustomMsgNotification) error {
	return x.ServerStream.SendMsg(m)
}

func _Node_SubscribeChannelStateChanged_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamChannelStateChangedRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServer).SubscribeChannelStateChanged(m, &nodeSubscribeChannelStateChangedServer{stream})
}

type Node_SubscribeChannelStateChangedServer interface {
	Send(*ChannelStateChangedNotification) error
	grpc.ServerStream
}

type nodeSubscribeChannelStateChangedServer struct {
	grpc.ServerStream
}

func (x *nodeSubscribeChannelStateChangedServer) Send(m *ChannelStateChangedNotification) error {
	return x.ServerStream.SendMsg(m)
}

// Node_ServiceDesc is the grpc.ServiceDesc for Node service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Node_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cln.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Getinfo",
			Handler:    _Node_Getinfo_Handler,
		},
		{
			MethodName: "ListPeers",
			Handler:    _Node_ListPeers_Handler,
		},
		{
			MethodName: "ListFunds",
			Handler:    _Node_ListFunds_Handler,
		},
		{
			MethodName: "SendPay",
			Handler:    _Node_SendPay_Handler,
		},
		{
			MethodName: "ListChannels",
			Handler:    _Node_ListChannels_Handler,
		},
		{
			MethodName: "AddGossip",
			Handler:    _Node_AddGossip_Handler,
		},
		{
			MethodName: "AddPsbtOutput",
			Handler:    _Node_AddPsbtOutput_Handler,
		},
		{
			MethodName: "AutoCleanOnce",
			Handler:    _Node_AutoCleanOnce_Handler,
		},
		{
			MethodName: "AutoCleanStatus",
			Handler:    _Node_AutoCleanStatus_Handler,
		},
		{
			MethodName: "CheckMessage",
			Handler:    _Node_CheckMessage_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Node_Close_Handler,
		},
		{
			MethodName: "ConnectPeer",
			Handler:    _Node_ConnectPeer_Handler,
		},
		{
			MethodName: "CreateInvoice",
			Handler:    _Node_CreateInvoice_Handler,
		},
		{
			MethodName: "Datastore",
			Handler:    _Node_Datastore_Handler,
		},
		{
			MethodName: "DatastoreUsage",
			Handler:    _Node_DatastoreUsage_Handler,
		},
		{
			MethodName: "CreateOnion",
			Handler:    _Node_CreateOnion_Handler,
		},
		{
			MethodName: "DelDatastore",
			Handler:    _Node_DelDatastore_Handler,
		},
		{
			MethodName: "DelInvoice",
			Handler:    _Node_DelInvoice_Handler,
		},
		{
			MethodName: "DevForgetChannel",
			Handler:    _Node_DevForgetChannel_Handler,
		},
		{
			MethodName: "EmergencyRecover",
			Handler:    _Node_EmergencyRecover_Handler,
		},
		{
			MethodName: "GetEmergencyRecoverData",
			Handler:    _Node_GetEmergencyRecoverData_Handler,
		},
		{
			MethodName: "ExposeSecret",
			Handler:    _Node_ExposeSecret_Handler,
		},
		{
			MethodName: "Recover",
			Handler:    _Node_Recover_Handler,
		},
		{
			MethodName: "RecoverChannel",
			Handler:    _Node_RecoverChannel_Handler,
		},
		{
			MethodName: "Invoice",
			Handler:    _Node_Invoice_Handler,
		},
		{
			MethodName: "CreateInvoiceRequest",
			Handler:    _Node_CreateInvoiceRequest_Handler,
		},
		{
			MethodName: "DisableInvoiceRequest",
			Handler:    _Node_DisableInvoiceRequest_Handler,
		},
		{
			MethodName: "ListInvoiceRequests",
			Handler:    _Node_ListInvoiceRequests_Handler,
		},
		{
			MethodName: "ListDatastore",
			Handler:    _Node_ListDatastore_Handler,
		},
		{
			MethodName: "ListInvoices",
			Handler:    _Node_ListInvoices_Handler,
		},
		{
			MethodName: "SendOnion",
			Handler:    _Node_SendOnion_Handler,
		},
		{
			MethodName: "ListSendPays",
			Handler:    _Node_ListSendPays_Handler,
		},
		{
			MethodName: "ListTransactions",
			Handler:    _Node_ListTransactions_Handler,
		},
		{
			MethodName: "MakeSecret",
			Handler:    _Node_MakeSecret_Handler,
		},
		{
			MethodName: "Pay",
			Handler:    _Node_Pay_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _Node_ListNodes_Handler,
		},
		{
			MethodName: "WaitAnyInvoice",
			Handler:    _Node_WaitAnyInvoice_Handler,
		},
		{
			MethodName: "WaitInvoice",
			Handler:    _Node_WaitInvoice_Handler,
		},
		{
			MethodName: "WaitSendPay",
			Handler:    _Node_WaitSendPay_Handler,
		},
		{
			MethodName: "NewAddr",
			Handler:    _Node_NewAddr_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _Node_Withdraw_Handler,
		},
		{
			MethodName: "KeySend",
			Handler:    _Node_KeySend_Handler,
		},
		{
			MethodName: "FundPsbt",
			Handler:    _Node_FundPsbt_Handler,
		},
		{
			MethodName: "SendPsbt",
			Handler:    _Node_SendPsbt_Handler,
		},
		{
			MethodName: "SignPsbt",
			Handler:    _Node_SignPsbt_Handler,
		},
		{
			MethodName: "UtxoPsbt",
			Handler:    _Node_UtxoPsbt_Handler,
		},
		{
			MethodName: "TxDiscard",
			Handler:    _Node_TxDiscard_Handler,
		},
		{
			MethodName: "TxPrepare",
			Handler:    _Node_TxPrepare_Handler,
		},
		{
			MethodName: "TxSend",
			Handler:    _Node_TxSend_Handler,
		},
		{
			MethodName: "ListPeerChannels",
			Handler:    _Node_ListPeerChannels_Handler,
		},
		{
			MethodName: "ListClosedChannels",
			Handler:    _Node_ListClosedChannels_Handler,
		},
		{
			MethodName: "DecodePay",
			Handler:    _Node_DecodePay_Handler,
		},
		{
			MethodName: "Decode",
			Handler:    _Node_Decode_Handler,
		},
		{
			MethodName: "DelPay",
			Handler:    _Node_DelPay_Handler,
		},
		{
			MethodName: "DelForward",
			Handler:    _Node_DelForward_Handler,
		},
		{
			MethodName: "DisableOffer",
			Handler:    _Node_DisableOffer_Handler,
		},
		{
			MethodName: "EnableOffer",
			Handler:    _Node_EnableOffer_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _Node_Disconnect_Handler,
		},
		{
			MethodName: "Feerates",
			Handler:    _Node_Feerates_Handler,
		},
		{
			MethodName: "FetchBip353",
			Handler:    _Node_FetchBip353_Handler,
		},
		{
			MethodName: "FetchInvoice",
			Handler:    _Node_FetchInvoice_Handler,
		},
		{
			MethodName: "FundChannelCancel",
			Handler:    _Node_FundChannelCancel_Handler,
		},
		{
			MethodName: "FundChannelComplete",
			Handler:    _Node_FundChannelComplete_Handler,
		},
		{
			MethodName: "FundChannel",
			Handler:    _Node_FundChannel_Handler,
		},
		{
			MethodName: "FundChannelStart",
			Handler:    _Node_FundChannelStart_Handler,
		},
		{
			MethodName: "GetLog",
			Handler:    _Node_GetLog_Handler,
		},
		{
			MethodName: "FunderUpdate",
			Handler:    _Node_FunderUpdate_Handler,
		},
		{
			MethodName: "GetRoute",
			Handler:    _Node_GetRoute_Handler,
		},
		{
			MethodName: "ListAddresses",
			Handler:    _Node_ListAddresses_Handler,
		},
		{
			MethodName: "ListForwards",
			Handler:    _Node_ListForwards_Handler,
		},
		{
			MethodName: "ListOffers",
			Handler:    _Node_ListOffers_Handler,
		},
		{
			MethodName: "ListPays",
			Handler:    _Node_ListPays_Handler,
		},
		{
			MethodName: "ListHtlcs",
			Handler:    _Node_ListHtlcs_Handler,
		},
		{
			MethodName: "MultiFundChannel",
			Handler:    _Node_MultiFundChannel_Handler,
		},
		{
			MethodName: "MultiWithdraw",
			Handler:    _Node_MultiWithdraw_Handler,
		},
		{
			MethodName: "Offer",
			Handler:    _Node_Offer_Handler,
		},
		{
			MethodName: "OpenChannelAbort",
			Handler:    _Node_OpenChannelAbort_Handler,
		},
		{
			MethodName: "OpenChannelBump",
			Handler:    _Node_OpenChannelBump_Handler,
		},
		{
			MethodName: "OpenChannelInit",
			Handler:    _Node_OpenChannelInit_Handler,
		},
		{
			MethodName: "OpenChannelSigned",
			Handler:    _Node_OpenChannelSigned_Handler,
		},
		{
			MethodName: "OpenChannelUpdate",
			Handler:    _Node_OpenChannelUpdate_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Node_Ping_Handler,
		},
		{
			MethodName: "Plugin",
			Handler:    _Node_Plugin_Handler,
		},
		{
			MethodName: "RenePayStatus",
			Handler:    _Node_RenePayStatus_Handler,
		},
		{
			MethodName: "RenePay",
			Handler:    _Node_RenePay_Handler,
		},
		{
			MethodName: "ReserveInputs",
			Handler:    _Node_ReserveInputs_Handler,
		},
		{
			MethodName: "SendCustomMsg",
			Handler:    _Node_SendCustomMsg_Handler,
		},
		{
			MethodName: "SendInvoice",
			Handler:    _Node_SendInvoice_Handler,
		},
		{
			MethodName: "SetChannel",
			Handler:    _Node_SetChannel_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _Node_SetConfig_Handler,
		},
		{
			MethodName: "SetPsbtVersion",
			Handler:    _Node_SetPsbtVersion_Handler,
		},
		{
			MethodName: "SignInvoice",
			Handler:    _Node_SignInvoice_Handler,
		},
		{
			MethodName: "SignMessage",
			Handler:    _Node_SignMessage_Handler,
		},
		{
			MethodName: "SpliceInit",
			Handler:    _Node_SpliceInit_Handler,
		},
		{
			MethodName: "SpliceSigned",
			Handler:    _Node_SpliceSigned_Handler,
		},
		{
			MethodName: "SpliceUpdate",
			Handler:    _Node_SpliceUpdate_Handler,
		},
		{
			MethodName: "DevSplice",
			Handler:    _Node_DevSplice_Handler,
		},
		{
			MethodName: "UnreserveInputs",
			Handler:    _Node_UnreserveInputs_Handler,
		},
		{
			MethodName: "UpgradeWallet",
			Handler:    _Node_UpgradeWallet_Handler,
		},
		{
			MethodName: "WaitBlockHeight",
			Handler:    _Node_WaitBlockHeight_Handler,
		},
		{
			MethodName: "Wait",
			Handler:    _Node_Wait_Handler,
		},
		{
			MethodName: "ListConfigs",
			Handler:    _Node_ListConfigs_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Node_Stop_Handler,
		},
		{
			MethodName: "Help",
			Handler:    _Node_Help_Handler,
		},
		{
			MethodName: "PreApproveKeysend",
			Handler:    _Node_PreApproveKeysend_Handler,
		},
		{
			MethodName: "PreApproveInvoice",
			Handler:    _Node_PreApproveInvoice_Handler,
		},
		{
			MethodName: "StaticBackup",
			Handler:    _Node_StaticBackup_Handler,
		},
		{
			MethodName: "BkprChannelsApy",
			Handler:    _Node_BkprChannelsApy_Handler,
		},
		{
			MethodName: "BkprDumpIncomeCsv",
			Handler:    _Node_BkprDumpIncomeCsv_Handler,
		},
		{
			MethodName: "BkprInspect",
			Handler:    _Node_BkprInspect_Handler,
		},
		{
			MethodName: "BkprListAccountEvents",
			Handler:    _Node_BkprListAccountEvents_Handler,
		},
		{
			MethodName: "BkprListBalances",
			Handler:    _Node_BkprListBalances_Handler,
		},
		{
			MethodName: "BkprListIncome",
			Handler:    _Node_BkprListIncome_Handler,
		},
		{
			MethodName: "BkprEditDescriptionByPaymentId",
			Handler:    _Node_BkprEditDescriptionByPaymentId_Handler,
		},
		{
			MethodName: "BkprEditDescriptionByOutpoint",
			Handler:    _Node_BkprEditDescriptionByOutpoint_Handler,
		},
		{
			MethodName: "BlacklistRune",
			Handler:    _Node_BlacklistRune_Handler,
		},
		{
			MethodName: "CheckRune",
			Handler:    _Node_CheckRune_Handler,
		},
		{
			MethodName: "CreateRune",
			Handler:    _Node_CreateRune_Handler,
		},
		{
			MethodName: "ShowRunes",
			Handler:    _Node_ShowRunes_Handler,
		},
		{
			MethodName: "AskReneUnreserve",
			Handler:    _Node_AskReneUnreserve_Handler,
		},
		{
			MethodName: "AskReneListLayers",
			Handler:    _Node_AskReneListLayers_Handler,
		},
		{
			MethodName: "AskReneCreateLayer",
			Handler:    _Node_AskReneCreateLayer_Handler,
		},
		{
			MethodName: "AskReneRemoveLayer",
			Handler:    _Node_AskReneRemoveLayer_Handler,
		},
		{
			MethodName: "AskReneReserve",
			Handler:    _Node_AskReneReserve_Handler,
		},
		{
			MethodName: "AskReneAge",
			Handler:    _Node_AskReneAge_Handler,
		},
		{
			MethodName: "GetRoutes",
			Handler:    _Node_GetRoutes_Handler,
		},
		{
			MethodName: "AskReneDisableNode",
			Handler:    _Node_AskReneDisableNode_Handler,
		},
		{
			MethodName: "AskReneInformChannel",
			Handler:    _Node_AskReneInformChannel_Handler,
		},
		{
			MethodName: "AskReneCreateChannel",
			Handler:    _Node_AskReneCreateChannel_Handler,
		},
		{
			MethodName: "AskReneUpdateChannel",
			Handler:    _Node_AskReneUpdateChannel_Handler,
		},
		{
			MethodName: "AskReneBiasChannel",
			Handler:    _Node_AskReneBiasChannel_Handler,
		},
		{
			MethodName: "AskReneListReservations",
			Handler:    _Node_AskReneListReservations_Handler,
		},
		{
			MethodName: "InjectPaymentOnion",
			Handler:    _Node_InjectPaymentOnion_Handler,
		},
		{
			MethodName: "InjectOnionMessage",
			Handler:    _Node_InjectOnionMessage_Handler,
		},
		{
			MethodName: "Xpay",
			Handler:    _Node_Xpay_Handler,
		},
		{
			MethodName: "SignMessageWithKey",
			Handler:    _Node_SignMessageWithKey_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeBlockAdded",
			Handler:       _Node_SubscribeBlockAdded_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeChannelOpenFailed",
			Handler:       _Node_SubscribeChannelOpenFailed_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeChannelOpened",
			Handler:       _Node_SubscribeChannelOpened_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeConnect",
			Handler:       _Node_SubscribeConnect_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeCustomMsg",
			Handler:       _Node_SubscribeCustomMsg_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeChannelStateChanged",
			Handler:       _Node_SubscribeChannelStateChanged_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "node.proto",
}
