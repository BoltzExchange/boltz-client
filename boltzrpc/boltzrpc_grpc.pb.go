// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0
// source: boltzrpc.proto

package boltzrpc

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Boltz_GetInfo_FullMethodName              = "/boltzrpc.Boltz/GetInfo"
	Boltz_GetServiceInfo_FullMethodName       = "/boltzrpc.Boltz/GetServiceInfo"
	Boltz_GetSubmarinePair_FullMethodName     = "/boltzrpc.Boltz/GetSubmarinePair"
	Boltz_GetReversePair_FullMethodName       = "/boltzrpc.Boltz/GetReversePair"
	Boltz_GetChainPair_FullMethodName         = "/boltzrpc.Boltz/GetChainPair"
	Boltz_GetPairs_FullMethodName             = "/boltzrpc.Boltz/GetPairs"
	Boltz_ListSwaps_FullMethodName            = "/boltzrpc.Boltz/ListSwaps"
	Boltz_RefundSwap_FullMethodName           = "/boltzrpc.Boltz/RefundSwap"
	Boltz_GetSwapInfo_FullMethodName          = "/boltzrpc.Boltz/GetSwapInfo"
	Boltz_GetSwapInfoStream_FullMethodName    = "/boltzrpc.Boltz/GetSwapInfoStream"
	Boltz_Deposit_FullMethodName              = "/boltzrpc.Boltz/Deposit"
	Boltz_CreateSwap_FullMethodName           = "/boltzrpc.Boltz/CreateSwap"
	Boltz_CreateChannel_FullMethodName        = "/boltzrpc.Boltz/CreateChannel"
	Boltz_CreateReverseSwap_FullMethodName    = "/boltzrpc.Boltz/CreateReverseSwap"
	Boltz_CreateChainSwap_FullMethodName      = "/boltzrpc.Boltz/CreateChainSwap"
	Boltz_CreateWallet_FullMethodName         = "/boltzrpc.Boltz/CreateWallet"
	Boltz_ImportWallet_FullMethodName         = "/boltzrpc.Boltz/ImportWallet"
	Boltz_SetSubaccount_FullMethodName        = "/boltzrpc.Boltz/SetSubaccount"
	Boltz_GetSubaccounts_FullMethodName       = "/boltzrpc.Boltz/GetSubaccounts"
	Boltz_GetWallets_FullMethodName           = "/boltzrpc.Boltz/GetWallets"
	Boltz_GetWallet_FullMethodName            = "/boltzrpc.Boltz/GetWallet"
	Boltz_GetWalletCredentials_FullMethodName = "/boltzrpc.Boltz/GetWalletCredentials"
	Boltz_RemoveWallet_FullMethodName         = "/boltzrpc.Boltz/RemoveWallet"
	Boltz_Stop_FullMethodName                 = "/boltzrpc.Boltz/Stop"
	Boltz_Unlock_FullMethodName               = "/boltzrpc.Boltz/Unlock"
	Boltz_VerifyWalletPassword_FullMethodName = "/boltzrpc.Boltz/VerifyWalletPassword"
	Boltz_ChangeWalletPassword_FullMethodName = "/boltzrpc.Boltz/ChangeWalletPassword"
	Boltz_CreateEntity_FullMethodName         = "/boltzrpc.Boltz/CreateEntity"
	Boltz_ListEntities_FullMethodName         = "/boltzrpc.Boltz/ListEntities"
	Boltz_GetEntity_FullMethodName            = "/boltzrpc.Boltz/GetEntity"
	Boltz_BakeMacaroon_FullMethodName         = "/boltzrpc.Boltz/BakeMacaroon"
)

// BoltzClient is the client API for Boltz service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BoltzClient interface {
	// Gets general information about the daemon like the chain of the lightning node it is connected to
	// and the IDs of pending swaps.
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
	// Deprecated: Do not use.
	//
	// Fetches the latest limits and fees from the Boltz backend API it is connected to.
	GetServiceInfo(ctx context.Context, in *GetServiceInfoRequest, opts ...grpc.CallOption) (*GetServiceInfoResponse, error)
	// Fetches information about a specific pair for a submarine swap.
	GetSubmarinePair(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*SubmarinePair, error)
	// Fetches information about a specific pair for a reverse swap.
	GetReversePair(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*ReversePair, error)
	// Fetches information about a specific pair for a reverse swap.
	GetChainPair(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*ChainPair, error)
	// Fetches all available pairs for submarine and reverse swaps.
	GetPairs(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetPairsResponse, error)
	// Returns a list of all swaps, reverse swaps and channel creations in the database.
	ListSwaps(ctx context.Context, in *ListSwapsRequest, opts ...grpc.CallOption) (*ListSwapsResponse, error)
	// Refund a failed swap manually.
	// This is only required when no refund address has been set or the daemon has no wallet for the currency.
	RefundSwap(ctx context.Context, in *RefundSwapRequest, opts ...grpc.CallOption) (*GetSwapInfoResponse, error)
	// Gets all available information about a swap from the database.
	GetSwapInfo(ctx context.Context, in *GetSwapInfoRequest, opts ...grpc.CallOption) (*GetSwapInfoResponse, error)
	// Returns the entire history of the swap if is still pending and streams updates in real time.
	// If the swap id is empty or "*" updates for all swaps will be streamed.
	GetSwapInfoStream(ctx context.Context, in *GetSwapInfoRequest, opts ...grpc.CallOption) (Boltz_GetSwapInfoStreamClient, error)
	// Deprecated: Do not use.
	//
	// This is a wrapper for channel creation swaps. The daemon only returns the ID, timeout block height and lockup address.
	// The Boltz backend takes care of the rest. When an amount of onchain coins that is in the limits is sent to the address
	// before the timeout block height, the daemon creates a new lightning invoice, sends it to the Boltz backend which
	// will try to pay it and if that is not possible, create a new channel to make the swap succeed.
	Deposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositResponse, error)
	// Creates a new swap from onchain to lightning.
	CreateSwap(ctx context.Context, in *CreateSwapRequest, opts ...grpc.CallOption) (*CreateSwapResponse, error)
	// Deprecated: Do not use.
	//
	// Create a new swap from onchain to a new lightning channel. The daemon will only accept the invoice payment if the HTLCs
	// is coming trough a new channel channel opened by Boltz.
	CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*CreateSwapResponse, error)
	// Creates a new reverse swap from lightning to onchain. If `accept_zero_conf` is set to true in the request, the daemon
	// will not wait until the lockup transaction from Boltz is confirmed in a block, but will claim it instantly.
	CreateReverseSwap(ctx context.Context, in *CreateReverseSwapRequest, opts ...grpc.CallOption) (*CreateReverseSwapResponse, error)
	// Creates a new chain swap from one chain to another. If `accept_zero_conf` is set to true in the request, the daemon
	// will not wait until the lockup transaction from Boltz is confirmed in a block, but will claim it instantly.
	CreateChainSwap(ctx context.Context, in *CreateChainSwapRequest, opts ...grpc.CallOption) (*ChainSwapInfo, error)
	// Creates a new liquid wallet and returns the mnemonic.
	CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*WalletCredentials, error)
	// Imports an existing wallet.
	ImportWallet(ctx context.Context, in *ImportWalletRequest, opts ...grpc.CallOption) (*Wallet, error)
	// Sets the subaccount of a wallet. Not supported for readonly wallets.
	SetSubaccount(ctx context.Context, in *SetSubaccountRequest, opts ...grpc.CallOption) (*Subaccount, error)
	// Returns all subaccounts for a given wallet. Not supported for readonly wallets.
	GetSubaccounts(ctx context.Context, in *WalletInfo, opts ...grpc.CallOption) (*GetSubaccountsResponse, error)
	// Returns all available wallets.
	GetWallets(ctx context.Context, in *GetWalletsRequest, opts ...grpc.CallOption) (*Wallets, error)
	// Returns the current balance and subaccount of a wallet.
	GetWallet(ctx context.Context, in *GetWalletRequest, opts ...grpc.CallOption) (*Wallet, error)
	// Returns the credentials of a wallet. The password will be required if the wallet is encrypted.
	GetWalletCredentials(ctx context.Context, in *GetWalletCredentialsRequest, opts ...grpc.CallOption) (*WalletCredentials, error)
	// Removes a wallet.
	RemoveWallet(ctx context.Context, in *RemoveWalletRequest, opts ...grpc.CallOption) (*RemoveWalletResponse, error)
	// Gracefully stops the daemon.
	Stop(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Unlocks the server. This will be required on startup if there are any encrypted wallets.
	Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Check if the password is correct.
	VerifyWalletPassword(ctx context.Context, in *VerifyWalletPasswordRequest, opts ...grpc.CallOption) (*VerifyWalletPasswordResponse, error)
	// Changes the password for wallet encryption.
	ChangeWalletPassword(ctx context.Context, in *ChangeWalletPasswordRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Creates a new entity which can be used to bake restricted macaroons.
	CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*Entity, error)
	// Returns all entities.
	ListEntities(ctx context.Context, in *ListEntitiesRequest, opts ...grpc.CallOption) (*ListEntitiesResponse, error)
	// Get a specifiy entity.
	GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*Entity, error)
	// Bakes a new macaroon with the specified permissions.
	// The macaroon can also be restricted to a specific entity. In this case,
	// - any swap or wallet created with the returned macaroon will belong to this entity and can not be accessed by other entities.
	// - the lightning node connected to the daemon can not be used to pay or create invoices for swaps.
	BakeMacaroon(ctx context.Context, in *BakeMacaroonRequest, opts ...grpc.CallOption) (*BakeMacaroonResponse, error)
}

type boltzClient struct {
	cc grpc.ClientConnInterface
}

func NewBoltzClient(cc grpc.ClientConnInterface) BoltzClient {
	return &boltzClient{cc}
}

func (c *boltzClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, Boltz_GetInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *boltzClient) GetServiceInfo(ctx context.Context, in *GetServiceInfoRequest, opts ...grpc.CallOption) (*GetServiceInfoResponse, error) {
	out := new(GetServiceInfoResponse)
	err := c.cc.Invoke(ctx, Boltz_GetServiceInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boltzClient) GetSubmarinePair(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*SubmarinePair, error) {
	out := new(SubmarinePair)
	err := c.cc.Invoke(ctx, Boltz_GetSubmarinePair_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boltzClient) GetReversePair(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*ReversePair, error) {
	out := new(ReversePair)
	err := c.cc.Invoke(ctx, Boltz_GetReversePair_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boltzClient) GetChainPair(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*ChainPair, error) {
	out := new(ChainPair)
	err := c.cc.Invoke(ctx, Boltz_GetChainPair_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boltzClient) GetPairs(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetPairsResponse, error) {
	out := new(GetPairsResponse)
	err := c.cc.Invoke(ctx, Boltz_GetPairs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boltzClient) ListSwaps(ctx context.Context, in *ListSwapsRequest, opts ...grpc.CallOption) (*ListSwapsResponse, error) {
	out := new(ListSwapsResponse)
	err := c.cc.Invoke(ctx, Boltz_ListSwaps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boltzClient) RefundSwap(ctx context.Context, in *RefundSwapRequest, opts ...grpc.CallOption) (*GetSwapInfoResponse, error) {
	out := new(GetSwapInfoResponse)
	err := c.cc.Invoke(ctx, Boltz_RefundSwap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boltzClient) GetSwapInfo(ctx context.Context, in *GetSwapInfoRequest, opts ...grpc.CallOption) (*GetSwapInfoResponse, error) {
	out := new(GetSwapInfoResponse)
	err := c.cc.Invoke(ctx, Boltz_GetSwapInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boltzClient) GetSwapInfoStream(ctx context.Context, in *GetSwapInfoRequest, opts ...grpc.CallOption) (Boltz_GetSwapInfoStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Boltz_ServiceDesc.Streams[0], Boltz_GetSwapInfoStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &boltzGetSwapInfoStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Boltz_GetSwapInfoStreamClient interface {
	Recv() (*GetSwapInfoResponse, error)
	grpc.ClientStream
}

type boltzGetSwapInfoStreamClient struct {
	grpc.ClientStream
}

func (x *boltzGetSwapInfoStreamClient) Recv() (*GetSwapInfoResponse, error) {
	m := new(GetSwapInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Deprecated: Do not use.
func (c *boltzClient) Deposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositResponse, error) {
	out := new(DepositResponse)
	err := c.cc.Invoke(ctx, Boltz_Deposit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boltzClient) CreateSwap(ctx context.Context, in *CreateSwapRequest, opts ...grpc.CallOption) (*CreateSwapResponse, error) {
	out := new(CreateSwapResponse)
	err := c.cc.Invoke(ctx, Boltz_CreateSwap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *boltzClient) CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*CreateSwapResponse, error) {
	out := new(CreateSwapResponse)
	err := c.cc.Invoke(ctx, Boltz_CreateChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boltzClient) CreateReverseSwap(ctx context.Context, in *CreateReverseSwapRequest, opts ...grpc.CallOption) (*CreateReverseSwapResponse, error) {
	out := new(CreateReverseSwapResponse)
	err := c.cc.Invoke(ctx, Boltz_CreateReverseSwap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boltzClient) CreateChainSwap(ctx context.Context, in *CreateChainSwapRequest, opts ...grpc.CallOption) (*ChainSwapInfo, error) {
	out := new(ChainSwapInfo)
	err := c.cc.Invoke(ctx, Boltz_CreateChainSwap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boltzClient) CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*WalletCredentials, error) {
	out := new(WalletCredentials)
	err := c.cc.Invoke(ctx, Boltz_CreateWallet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boltzClient) ImportWallet(ctx context.Context, in *ImportWalletRequest, opts ...grpc.CallOption) (*Wallet, error) {
	out := new(Wallet)
	err := c.cc.Invoke(ctx, Boltz_ImportWallet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boltzClient) SetSubaccount(ctx context.Context, in *SetSubaccountRequest, opts ...grpc.CallOption) (*Subaccount, error) {
	out := new(Subaccount)
	err := c.cc.Invoke(ctx, Boltz_SetSubaccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boltzClient) GetSubaccounts(ctx context.Context, in *WalletInfo, opts ...grpc.CallOption) (*GetSubaccountsResponse, error) {
	out := new(GetSubaccountsResponse)
	err := c.cc.Invoke(ctx, Boltz_GetSubaccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boltzClient) GetWallets(ctx context.Context, in *GetWalletsRequest, opts ...grpc.CallOption) (*Wallets, error) {
	out := new(Wallets)
	err := c.cc.Invoke(ctx, Boltz_GetWallets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boltzClient) GetWallet(ctx context.Context, in *GetWalletRequest, opts ...grpc.CallOption) (*Wallet, error) {
	out := new(Wallet)
	err := c.cc.Invoke(ctx, Boltz_GetWallet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boltzClient) GetWalletCredentials(ctx context.Context, in *GetWalletCredentialsRequest, opts ...grpc.CallOption) (*WalletCredentials, error) {
	out := new(WalletCredentials)
	err := c.cc.Invoke(ctx, Boltz_GetWalletCredentials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boltzClient) RemoveWallet(ctx context.Context, in *RemoveWalletRequest, opts ...grpc.CallOption) (*RemoveWalletResponse, error) {
	out := new(RemoveWalletResponse)
	err := c.cc.Invoke(ctx, Boltz_RemoveWallet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boltzClient) Stop(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Boltz_Stop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boltzClient) Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Boltz_Unlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boltzClient) VerifyWalletPassword(ctx context.Context, in *VerifyWalletPasswordRequest, opts ...grpc.CallOption) (*VerifyWalletPasswordResponse, error) {
	out := new(VerifyWalletPasswordResponse)
	err := c.cc.Invoke(ctx, Boltz_VerifyWalletPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boltzClient) ChangeWalletPassword(ctx context.Context, in *ChangeWalletPasswordRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Boltz_ChangeWalletPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boltzClient) CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, Boltz_CreateEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boltzClient) ListEntities(ctx context.Context, in *ListEntitiesRequest, opts ...grpc.CallOption) (*ListEntitiesResponse, error) {
	out := new(ListEntitiesResponse)
	err := c.cc.Invoke(ctx, Boltz_ListEntities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boltzClient) GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, Boltz_GetEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boltzClient) BakeMacaroon(ctx context.Context, in *BakeMacaroonRequest, opts ...grpc.CallOption) (*BakeMacaroonResponse, error) {
	out := new(BakeMacaroonResponse)
	err := c.cc.Invoke(ctx, Boltz_BakeMacaroon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoltzServer is the server API for Boltz service.
// All implementations must embed UnimplementedBoltzServer
// for forward compatibility
type BoltzServer interface {
	// Gets general information about the daemon like the chain of the lightning node it is connected to
	// and the IDs of pending swaps.
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	// Deprecated: Do not use.
	//
	// Fetches the latest limits and fees from the Boltz backend API it is connected to.
	GetServiceInfo(context.Context, *GetServiceInfoRequest) (*GetServiceInfoResponse, error)
	// Fetches information about a specific pair for a submarine swap.
	GetSubmarinePair(context.Context, *Pair) (*SubmarinePair, error)
	// Fetches information about a specific pair for a reverse swap.
	GetReversePair(context.Context, *Pair) (*ReversePair, error)
	// Fetches information about a specific pair for a reverse swap.
	GetChainPair(context.Context, *Pair) (*ChainPair, error)
	// Fetches all available pairs for submarine and reverse swaps.
	GetPairs(context.Context, *empty.Empty) (*GetPairsResponse, error)
	// Returns a list of all swaps, reverse swaps and channel creations in the database.
	ListSwaps(context.Context, *ListSwapsRequest) (*ListSwapsResponse, error)
	// Refund a failed swap manually.
	// This is only required when no refund address has been set or the daemon has no wallet for the currency.
	RefundSwap(context.Context, *RefundSwapRequest) (*GetSwapInfoResponse, error)
	// Gets all available information about a swap from the database.
	GetSwapInfo(context.Context, *GetSwapInfoRequest) (*GetSwapInfoResponse, error)
	// Returns the entire history of the swap if is still pending and streams updates in real time.
	// If the swap id is empty or "*" updates for all swaps will be streamed.
	GetSwapInfoStream(*GetSwapInfoRequest, Boltz_GetSwapInfoStreamServer) error
	// Deprecated: Do not use.
	//
	// This is a wrapper for channel creation swaps. The daemon only returns the ID, timeout block height and lockup address.
	// The Boltz backend takes care of the rest. When an amount of onchain coins that is in the limits is sent to the address
	// before the timeout block height, the daemon creates a new lightning invoice, sends it to the Boltz backend which
	// will try to pay it and if that is not possible, create a new channel to make the swap succeed.
	Deposit(context.Context, *DepositRequest) (*DepositResponse, error)
	// Creates a new swap from onchain to lightning.
	CreateSwap(context.Context, *CreateSwapRequest) (*CreateSwapResponse, error)
	// Deprecated: Do not use.
	//
	// Create a new swap from onchain to a new lightning channel. The daemon will only accept the invoice payment if the HTLCs
	// is coming trough a new channel channel opened by Boltz.
	CreateChannel(context.Context, *CreateChannelRequest) (*CreateSwapResponse, error)
	// Creates a new reverse swap from lightning to onchain. If `accept_zero_conf` is set to true in the request, the daemon
	// will not wait until the lockup transaction from Boltz is confirmed in a block, but will claim it instantly.
	CreateReverseSwap(context.Context, *CreateReverseSwapRequest) (*CreateReverseSwapResponse, error)
	// Creates a new chain swap from one chain to another. If `accept_zero_conf` is set to true in the request, the daemon
	// will not wait until the lockup transaction from Boltz is confirmed in a block, but will claim it instantly.
	CreateChainSwap(context.Context, *CreateChainSwapRequest) (*ChainSwapInfo, error)
	// Creates a new liquid wallet and returns the mnemonic.
	CreateWallet(context.Context, *CreateWalletRequest) (*WalletCredentials, error)
	// Imports an existing wallet.
	ImportWallet(context.Context, *ImportWalletRequest) (*Wallet, error)
	// Sets the subaccount of a wallet. Not supported for readonly wallets.
	SetSubaccount(context.Context, *SetSubaccountRequest) (*Subaccount, error)
	// Returns all subaccounts for a given wallet. Not supported for readonly wallets.
	GetSubaccounts(context.Context, *WalletInfo) (*GetSubaccountsResponse, error)
	// Returns all available wallets.
	GetWallets(context.Context, *GetWalletsRequest) (*Wallets, error)
	// Returns the current balance and subaccount of a wallet.
	GetWallet(context.Context, *GetWalletRequest) (*Wallet, error)
	// Returns the credentials of a wallet. The password will be required if the wallet is encrypted.
	GetWalletCredentials(context.Context, *GetWalletCredentialsRequest) (*WalletCredentials, error)
	// Removes a wallet.
	RemoveWallet(context.Context, *RemoveWalletRequest) (*RemoveWalletResponse, error)
	// Gracefully stops the daemon.
	Stop(context.Context, *empty.Empty) (*empty.Empty, error)
	// Unlocks the server. This will be required on startup if there are any encrypted wallets.
	Unlock(context.Context, *UnlockRequest) (*empty.Empty, error)
	// Check if the password is correct.
	VerifyWalletPassword(context.Context, *VerifyWalletPasswordRequest) (*VerifyWalletPasswordResponse, error)
	// Changes the password for wallet encryption.
	ChangeWalletPassword(context.Context, *ChangeWalletPasswordRequest) (*empty.Empty, error)
	// Creates a new entity which can be used to bake restricted macaroons.
	CreateEntity(context.Context, *CreateEntityRequest) (*Entity, error)
	// Returns all entities.
	ListEntities(context.Context, *ListEntitiesRequest) (*ListEntitiesResponse, error)
	// Get a specifiy entity.
	GetEntity(context.Context, *GetEntityRequest) (*Entity, error)
	// Bakes a new macaroon with the specified permissions.
	// The macaroon can also be restricted to a specific entity. In this case,
	// - any swap or wallet created with the returned macaroon will belong to this entity and can not be accessed by other entities.
	// - the lightning node connected to the daemon can not be used to pay or create invoices for swaps.
	BakeMacaroon(context.Context, *BakeMacaroonRequest) (*BakeMacaroonResponse, error)
	mustEmbedUnimplementedBoltzServer()
}

// UnimplementedBoltzServer must be embedded to have forward compatible implementations.
type UnimplementedBoltzServer struct {
}

func (UnimplementedBoltzServer) GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedBoltzServer) GetServiceInfo(context.Context, *GetServiceInfoRequest) (*GetServiceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceInfo not implemented")
}
func (UnimplementedBoltzServer) GetSubmarinePair(context.Context, *Pair) (*SubmarinePair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmarinePair not implemented")
}
func (UnimplementedBoltzServer) GetReversePair(context.Context, *Pair) (*ReversePair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReversePair not implemented")
}
func (UnimplementedBoltzServer) GetChainPair(context.Context, *Pair) (*ChainPair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainPair not implemented")
}
func (UnimplementedBoltzServer) GetPairs(context.Context, *empty.Empty) (*GetPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPairs not implemented")
}
func (UnimplementedBoltzServer) ListSwaps(context.Context, *ListSwapsRequest) (*ListSwapsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSwaps not implemented")
}
func (UnimplementedBoltzServer) RefundSwap(context.Context, *RefundSwapRequest) (*GetSwapInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundSwap not implemented")
}
func (UnimplementedBoltzServer) GetSwapInfo(context.Context, *GetSwapInfoRequest) (*GetSwapInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwapInfo not implemented")
}
func (UnimplementedBoltzServer) GetSwapInfoStream(*GetSwapInfoRequest, Boltz_GetSwapInfoStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSwapInfoStream not implemented")
}
func (UnimplementedBoltzServer) Deposit(context.Context, *DepositRequest) (*DepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (UnimplementedBoltzServer) CreateSwap(context.Context, *CreateSwapRequest) (*CreateSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSwap not implemented")
}
func (UnimplementedBoltzServer) CreateChannel(context.Context, *CreateChannelRequest) (*CreateSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedBoltzServer) CreateReverseSwap(context.Context, *CreateReverseSwapRequest) (*CreateReverseSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReverseSwap not implemented")
}
func (UnimplementedBoltzServer) CreateChainSwap(context.Context, *CreateChainSwapRequest) (*ChainSwapInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChainSwap not implemented")
}
func (UnimplementedBoltzServer) CreateWallet(context.Context, *CreateWalletRequest) (*WalletCredentials, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedBoltzServer) ImportWallet(context.Context, *ImportWalletRequest) (*Wallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportWallet not implemented")
}
func (UnimplementedBoltzServer) SetSubaccount(context.Context, *SetSubaccountRequest) (*Subaccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSubaccount not implemented")
}
func (UnimplementedBoltzServer) GetSubaccounts(context.Context, *WalletInfo) (*GetSubaccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubaccounts not implemented")
}
func (UnimplementedBoltzServer) GetWallets(context.Context, *GetWalletsRequest) (*Wallets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWallets not implemented")
}
func (UnimplementedBoltzServer) GetWallet(context.Context, *GetWalletRequest) (*Wallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWallet not implemented")
}
func (UnimplementedBoltzServer) GetWalletCredentials(context.Context, *GetWalletCredentialsRequest) (*WalletCredentials, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletCredentials not implemented")
}
func (UnimplementedBoltzServer) RemoveWallet(context.Context, *RemoveWalletRequest) (*RemoveWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWallet not implemented")
}
func (UnimplementedBoltzServer) Stop(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedBoltzServer) Unlock(context.Context, *UnlockRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlock not implemented")
}
func (UnimplementedBoltzServer) VerifyWalletPassword(context.Context, *VerifyWalletPasswordRequest) (*VerifyWalletPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyWalletPassword not implemented")
}
func (UnimplementedBoltzServer) ChangeWalletPassword(context.Context, *ChangeWalletPasswordRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeWalletPassword not implemented")
}
func (UnimplementedBoltzServer) CreateEntity(context.Context, *CreateEntityRequest) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntity not implemented")
}
func (UnimplementedBoltzServer) ListEntities(context.Context, *ListEntitiesRequest) (*ListEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntities not implemented")
}
func (UnimplementedBoltzServer) GetEntity(context.Context, *GetEntityRequest) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntity not implemented")
}
func (UnimplementedBoltzServer) BakeMacaroon(context.Context, *BakeMacaroonRequest) (*BakeMacaroonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BakeMacaroon not implemented")
}
func (UnimplementedBoltzServer) mustEmbedUnimplementedBoltzServer() {}

// UnsafeBoltzServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoltzServer will
// result in compilation errors.
type UnsafeBoltzServer interface {
	mustEmbedUnimplementedBoltzServer()
}

func RegisterBoltzServer(s grpc.ServiceRegistrar, srv BoltzServer) {
	s.RegisterService(&Boltz_ServiceDesc, srv)
}

func _Boltz_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoltzServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boltz_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoltzServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boltz_GetServiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoltzServer).GetServiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boltz_GetServiceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoltzServer).GetServiceInfo(ctx, req.(*GetServiceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boltz_GetSubmarinePair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoltzServer).GetSubmarinePair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boltz_GetSubmarinePair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoltzServer).GetSubmarinePair(ctx, req.(*Pair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boltz_GetReversePair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoltzServer).GetReversePair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boltz_GetReversePair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoltzServer).GetReversePair(ctx, req.(*Pair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boltz_GetChainPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoltzServer).GetChainPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boltz_GetChainPair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoltzServer).GetChainPair(ctx, req.(*Pair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boltz_GetPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoltzServer).GetPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boltz_GetPairs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoltzServer).GetPairs(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boltz_ListSwaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSwapsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoltzServer).ListSwaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boltz_ListSwaps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoltzServer).ListSwaps(ctx, req.(*ListSwapsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boltz_RefundSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoltzServer).RefundSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boltz_RefundSwap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoltzServer).RefundSwap(ctx, req.(*RefundSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boltz_GetSwapInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwapInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoltzServer).GetSwapInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boltz_GetSwapInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoltzServer).GetSwapInfo(ctx, req.(*GetSwapInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boltz_GetSwapInfoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSwapInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BoltzServer).GetSwapInfoStream(m, &boltzGetSwapInfoStreamServer{stream})
}

type Boltz_GetSwapInfoStreamServer interface {
	Send(*GetSwapInfoResponse) error
	grpc.ServerStream
}

type boltzGetSwapInfoStreamServer struct {
	grpc.ServerStream
}

func (x *boltzGetSwapInfoStreamServer) Send(m *GetSwapInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Boltz_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoltzServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boltz_Deposit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoltzServer).Deposit(ctx, req.(*DepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boltz_CreateSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoltzServer).CreateSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boltz_CreateSwap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoltzServer).CreateSwap(ctx, req.(*CreateSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boltz_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoltzServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boltz_CreateChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoltzServer).CreateChannel(ctx, req.(*CreateChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boltz_CreateReverseSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReverseSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoltzServer).CreateReverseSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boltz_CreateReverseSwap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoltzServer).CreateReverseSwap(ctx, req.(*CreateReverseSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boltz_CreateChainSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChainSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoltzServer).CreateChainSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boltz_CreateChainSwap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoltzServer).CreateChainSwap(ctx, req.(*CreateChainSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boltz_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoltzServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boltz_CreateWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoltzServer).CreateWallet(ctx, req.(*CreateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boltz_ImportWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoltzServer).ImportWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boltz_ImportWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoltzServer).ImportWallet(ctx, req.(*ImportWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boltz_SetSubaccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSubaccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoltzServer).SetSubaccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boltz_SetSubaccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoltzServer).SetSubaccount(ctx, req.(*SetSubaccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boltz_GetSubaccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoltzServer).GetSubaccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boltz_GetSubaccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoltzServer).GetSubaccounts(ctx, req.(*WalletInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boltz_GetWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoltzServer).GetWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boltz_GetWallets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoltzServer).GetWallets(ctx, req.(*GetWalletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boltz_GetWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoltzServer).GetWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boltz_GetWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoltzServer).GetWallet(ctx, req.(*GetWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boltz_GetWalletCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoltzServer).GetWalletCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boltz_GetWalletCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoltzServer).GetWalletCredentials(ctx, req.(*GetWalletCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boltz_RemoveWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoltzServer).RemoveWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boltz_RemoveWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoltzServer).RemoveWallet(ctx, req.(*RemoveWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boltz_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoltzServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boltz_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoltzServer).Stop(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boltz_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoltzServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boltz_Unlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoltzServer).Unlock(ctx, req.(*UnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boltz_VerifyWalletPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyWalletPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoltzServer).VerifyWalletPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boltz_VerifyWalletPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoltzServer).VerifyWalletPassword(ctx, req.(*VerifyWalletPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boltz_ChangeWalletPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeWalletPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoltzServer).ChangeWalletPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boltz_ChangeWalletPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoltzServer).ChangeWalletPassword(ctx, req.(*ChangeWalletPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boltz_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoltzServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boltz_CreateEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoltzServer).CreateEntity(ctx, req.(*CreateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boltz_ListEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoltzServer).ListEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boltz_ListEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoltzServer).ListEntities(ctx, req.(*ListEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boltz_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoltzServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boltz_GetEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoltzServer).GetEntity(ctx, req.(*GetEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boltz_BakeMacaroon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BakeMacaroonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoltzServer).BakeMacaroon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boltz_BakeMacaroon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoltzServer).BakeMacaroon(ctx, req.(*BakeMacaroonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Boltz_ServiceDesc is the grpc.ServiceDesc for Boltz service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Boltz_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "boltzrpc.Boltz",
	HandlerType: (*BoltzServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _Boltz_GetInfo_Handler,
		},
		{
			MethodName: "GetServiceInfo",
			Handler:    _Boltz_GetServiceInfo_Handler,
		},
		{
			MethodName: "GetSubmarinePair",
			Handler:    _Boltz_GetSubmarinePair_Handler,
		},
		{
			MethodName: "GetReversePair",
			Handler:    _Boltz_GetReversePair_Handler,
		},
		{
			MethodName: "GetChainPair",
			Handler:    _Boltz_GetChainPair_Handler,
		},
		{
			MethodName: "GetPairs",
			Handler:    _Boltz_GetPairs_Handler,
		},
		{
			MethodName: "ListSwaps",
			Handler:    _Boltz_ListSwaps_Handler,
		},
		{
			MethodName: "RefundSwap",
			Handler:    _Boltz_RefundSwap_Handler,
		},
		{
			MethodName: "GetSwapInfo",
			Handler:    _Boltz_GetSwapInfo_Handler,
		},
		{
			MethodName: "Deposit",
			Handler:    _Boltz_Deposit_Handler,
		},
		{
			MethodName: "CreateSwap",
			Handler:    _Boltz_CreateSwap_Handler,
		},
		{
			MethodName: "CreateChannel",
			Handler:    _Boltz_CreateChannel_Handler,
		},
		{
			MethodName: "CreateReverseSwap",
			Handler:    _Boltz_CreateReverseSwap_Handler,
		},
		{
			MethodName: "CreateChainSwap",
			Handler:    _Boltz_CreateChainSwap_Handler,
		},
		{
			MethodName: "CreateWallet",
			Handler:    _Boltz_CreateWallet_Handler,
		},
		{
			MethodName: "ImportWallet",
			Handler:    _Boltz_ImportWallet_Handler,
		},
		{
			MethodName: "SetSubaccount",
			Handler:    _Boltz_SetSubaccount_Handler,
		},
		{
			MethodName: "GetSubaccounts",
			Handler:    _Boltz_GetSubaccounts_Handler,
		},
		{
			MethodName: "GetWallets",
			Handler:    _Boltz_GetWallets_Handler,
		},
		{
			MethodName: "GetWallet",
			Handler:    _Boltz_GetWallet_Handler,
		},
		{
			MethodName: "GetWalletCredentials",
			Handler:    _Boltz_GetWalletCredentials_Handler,
		},
		{
			MethodName: "RemoveWallet",
			Handler:    _Boltz_RemoveWallet_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Boltz_Stop_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _Boltz_Unlock_Handler,
		},
		{
			MethodName: "VerifyWalletPassword",
			Handler:    _Boltz_VerifyWalletPassword_Handler,
		},
		{
			MethodName: "ChangeWalletPassword",
			Handler:    _Boltz_ChangeWalletPassword_Handler,
		},
		{
			MethodName: "CreateEntity",
			Handler:    _Boltz_CreateEntity_Handler,
		},
		{
			MethodName: "ListEntities",
			Handler:    _Boltz_ListEntities_Handler,
		},
		{
			MethodName: "GetEntity",
			Handler:    _Boltz_GetEntity_Handler,
		},
		{
			MethodName: "BakeMacaroon",
			Handler:    _Boltz_BakeMacaroon_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSwapInfoStream",
			Handler:       _Boltz_GetSwapInfoStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "boltzrpc.proto",
}
