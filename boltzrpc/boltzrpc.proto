syntax = "proto3";

package boltzrpc;
option go_package = "github.com/BoltzExchange/boltz-lnd/boltzrpc";

service Boltz {
    /*
    Gets general information about the daemon like the chain of the LND node it is connected to
    and the IDs of pending swaps.
     */
    rpc GetInfo (GetInfoRequest) returns (GetInfoResponse);

    /*
    Fetches the latest limits and fees from the Boltz backend API it is connected to.
    */
    rpc GetServiceInfo (GetServiceInfoRequest) returns (GetServiceInfoResponse);

    /*
    Returns a list of all swaps, reverse swaps and channel creations in the database.
    */
    rpc ListSwaps (ListSwapsRequest) returns (ListSwapsResponse);

    /*
    Gets all available information about a swap from the database.
    */
    rpc GetSwapInfo (GetSwapInfoRequest) returns (GetSwapInfoResponse);

    /*
    This is a wrapper for channel creation swaps. The daemon only returns the ID, timeout block height and lockup address.
    The Boltz backend takes care of the rest. When an amount of onchain coins that is in the limits is sent to the address
    before the timeout block height, the daemon creates a new lightning invoice, sends it to the Boltz backend which
    will try to pay it and if that is not possible, create a new channel to make the swap succeed.
    */
    rpc Deposit (DepositRequest) returns (DepositResponse);

    /*
    Creates a new swap from onchain to lightning.
    */
    rpc CreateSwap (CreateSwapRequest) returns (CreateSwapResponse);

    /*
    Create a new swap from onchain to a new lightning channel. The daemon will only accept the invoice payment if the HTLCs
    is coming trough a new channel channel opened by Boltz.
    */
    rpc CreateChannel (CreateChannelRequest) returns (CreateSwapResponse);

    /*
    Creates a new reverse swap from lightning to onchain. If `accept_zero_conf` is set to true in the request, the daemon
    will not wait until the lockup transaction from Boltz is confirmed in a block, but will claim it instantly.
    */
    rpc CreateReverseSwap (CreateReverseSwapRequest) returns (CreateReverseSwapResponse);
}

enum SwapState {
    PENDING = 0;
    SUCCESSFUL= 1;

    // Unknown client error. Check the error field of the message for more information
    ERROR = 2;

    // Unknown server error. Check the status field of the message for more information
    SERVER_ERROR = 3;

    // Client refunded locked coins after the HTLC timed out
    REFUNDED = 4;

    // Client noticed that the HTLC timed out but didn't find any outputs to refund
    ABANDONED = 5;
}

message SwapInfo {
    string id = 1;
    string pairId = 2;

    SwapState state = 3;
    string error = 4;

    // Latest status message of the Boltz backend
    string status = 5;
    string private_key = 6;
    string preimage = 7;
    string redeem_script = 8;
    string invoice = 9;
    string lockup_address = 10;
    int64 expected_amount = 11;
    uint32 timeout_block_height = 12;
    string lockup_transaction_id = 13;

    /*
    If the swap times out or fails for some other reason, the damon will automatically refund the coins sent to the
    `lockup_address` back to the LND wallet and save the refund transaction id to the database.
    */
    string refund_transaction_id = 14;
}

/*
Channel creations are an optional extension to a submarine swap in the data types of boltz-lnd.
*/
message ChannelCreationInfo {
    // ID of the swap to which this channel channel belongs
    string swap_id = 1;
    string status = 2;
    uint32 inbound_liquidity = 3;
    bool private = 4;
    string funding_transaction_id = 5;
    uint32 funding_transaction_vout = 6;
}
message CombinedChannelSwapInfo {
    SwapInfo swap = 1;
    ChannelCreationInfo channel_creation = 2;
}

message ReverseSwapInfo {
    string id = 1;

    SwapState state = 2;
    string error = 3;

    // Latest status message of the Boltz backend
    string status = 4;
    string private_key = 5;
    string preimage = 6;
    string redeem_script = 7;
    string invoice = 8;
    string claim_address = 9;
    int64 onchain_amount = 10;
    uint32 timeout_block_height = 11;
    string lockup_transaction_id = 12;
    string claim_transaction_id = 13;
    string pairId = 14;
}

message GetInfoRequest {}
message GetInfoResponse {
    string symbol = 1;
    string network = 2;
    string lnd_pubkey = 3;
    uint32 block_height = 4;

    repeated string pending_swaps = 5;
    repeated string pending_reverse_swaps = 6;
}

message MinerFees {
    uint32 normal = 1;
    uint32 reverse = 2;
}
message Fees {
    float percentage = 1;
    MinerFees miner = 2;
}
message Limits {
    int64 minimal = 1;
    int64 maximal = 2;
}

message GetServiceInfoRequest {}
message GetServiceInfoResponse {
    Fees fees = 1;
    Limits limits = 2;
}

message ListSwapsRequest {}
message ListSwapsResponse {
    repeated SwapInfo swaps = 1;
    repeated CombinedChannelSwapInfo channel_creations = 2;
    repeated ReverseSwapInfo reverse_swaps = 3;
}

message GetSwapInfoRequest {
    string id = 1;
}
message GetSwapInfoResponse {
    SwapInfo swap = 1;
    ChannelCreationInfo channel_creation = 2;

    ReverseSwapInfo reverse_swap = 3;
}

message DepositRequest {
    /*
    Percentage of inbound liquidity the channel that is opened in case the invoice cannot be paid should have.
    25 by default.
    */
    uint32 inbound_liquidity = 1;
    string pairId = 2;
}
message DepositResponse {
    string id = 1;
    string address = 2;
    uint32 timeout_block_height = 3;
}

message CreateSwapRequest {
    int64 amount = 1;
    string pairId = 2;
}
message CreateSwapResponse {
    string id = 1;
    string address = 2;
    int64 expected_amount = 3;
    string bip21 = 4;
}

message CreateChannelRequest {
    int64 amount = 1;

    /*
    Percentage of inbound liquidity the channel that is opened should have.
    25 by default.
    */
    uint32 inbound_liquidity = 2;
    bool private = 3;
};

message CreateReverseSwapRequest {
    int64 amount = 1;
    // If no value is set, the daemon will query a new P2WKH address from LND
    string address = 2;
    bool accept_zero_conf = 3;
    string pairId = 4;
}
message CreateReverseSwapResponse {
    string id = 1;
    string lockup_address = 2;
    uint32 routing_fee_milli_sat = 3;

    // Only populated when 0-conf is accepted
    string claim_transaction_id = 4;
}
