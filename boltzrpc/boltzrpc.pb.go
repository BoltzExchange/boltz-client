// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v5.26.0
// source: boltzrpc.proto

package boltzrpc

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SwapState int32

const (
	SwapState_PENDING    SwapState = 0
	SwapState_SUCCESSFUL SwapState = 1
	// Unknown client error. Check the error field of the message for more information
	SwapState_ERROR SwapState = 2
	// Unknown server error. Check the status field of the message for more information
	SwapState_SERVER_ERROR SwapState = 3
	// Client refunded locked coins after the HTLC timed out
	SwapState_REFUNDED SwapState = 4
	// Client noticed that the HTLC timed out but didn't find any outputs to refund
	SwapState_ABANDONED SwapState = 5
)

// Enum value maps for SwapState.
var (
	SwapState_name = map[int32]string{
		0: "PENDING",
		1: "SUCCESSFUL",
		2: "ERROR",
		3: "SERVER_ERROR",
		4: "REFUNDED",
		5: "ABANDONED",
	}
	SwapState_value = map[string]int32{
		"PENDING":      0,
		"SUCCESSFUL":   1,
		"ERROR":        2,
		"SERVER_ERROR": 3,
		"REFUNDED":     4,
		"ABANDONED":    5,
	}
)

func (x SwapState) Enum() *SwapState {
	p := new(SwapState)
	*p = x
	return p
}

func (x SwapState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwapState) Descriptor() protoreflect.EnumDescriptor {
	return file_boltzrpc_proto_enumTypes[0].Descriptor()
}

func (SwapState) Type() protoreflect.EnumType {
	return &file_boltzrpc_proto_enumTypes[0]
}

func (x SwapState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SwapState.Descriptor instead.
func (SwapState) EnumDescriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{0}
}

type Currency int32

const (
	Currency_BTC  Currency = 0
	Currency_LBTC Currency = 1
)

// Enum value maps for Currency.
var (
	Currency_name = map[int32]string{
		0: "BTC",
		1: "LBTC",
	}
	Currency_value = map[string]int32{
		"BTC":  0,
		"LBTC": 1,
	}
)

func (x Currency) Enum() *Currency {
	p := new(Currency)
	*p = x
	return p
}

func (x Currency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Currency) Descriptor() protoreflect.EnumDescriptor {
	return file_boltzrpc_proto_enumTypes[1].Descriptor()
}

func (Currency) Type() protoreflect.EnumType {
	return &file_boltzrpc_proto_enumTypes[1]
}

func (x Currency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Currency.Descriptor instead.
func (Currency) EnumDescriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{1}
}

type Pair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From Currency `protobuf:"varint,1,opt,name=from,proto3,enum=boltzrpc.Currency" json:"from,omitempty"`
	To   Currency `protobuf:"varint,2,opt,name=to,proto3,enum=boltzrpc.Currency" json:"to,omitempty"`
}

func (x *Pair) Reset() {
	*x = Pair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pair) ProtoMessage() {}

func (x *Pair) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pair.ProtoReflect.Descriptor instead.
func (*Pair) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{0}
}

func (x *Pair) GetFrom() Currency {
	if x != nil {
		return x.From
	}
	return Currency_BTC
}

func (x *Pair) GetTo() Currency {
	if x != nil {
		return x.To
	}
	return Currency_BTC
}

type SwapInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Pair  *Pair     `protobuf:"bytes,22,opt,name=pair,proto3" json:"pair,omitempty"`
	State SwapState `protobuf:"varint,2,opt,name=state,proto3,enum=boltzrpc.SwapState" json:"state,omitempty"`
	Error string    `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	// Latest status message of the Boltz backend
	Status              string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	PrivateKey          string `protobuf:"bytes,5,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	Preimage            string `protobuf:"bytes,6,opt,name=preimage,proto3" json:"preimage,omitempty"`
	RedeemScript        string `protobuf:"bytes,7,opt,name=redeem_script,json=redeemScript,proto3" json:"redeem_script,omitempty"`
	Invoice             string `protobuf:"bytes,8,opt,name=invoice,proto3" json:"invoice,omitempty"`
	LockupAddress       string `protobuf:"bytes,9,opt,name=lockup_address,json=lockupAddress,proto3" json:"lockup_address,omitempty"`
	ExpectedAmount      int64  `protobuf:"varint,10,opt,name=expected_amount,json=expectedAmount,proto3" json:"expected_amount,omitempty"`
	TimeoutBlockHeight  uint32 `protobuf:"varint,11,opt,name=timeout_block_height,json=timeoutBlockHeight,proto3" json:"timeout_block_height,omitempty"`
	LockupTransactionId string `protobuf:"bytes,12,opt,name=lockup_transaction_id,json=lockupTransactionId,proto3" json:"lockup_transaction_id,omitempty"`
	// If the swap times out or fails for some other reason, the damon will automatically refund the coins sent to the
	// `lockup_address` back to the configured wallet or the address specified in the `refund_address` field.
	RefundTransactionId string       `protobuf:"bytes,13,opt,name=refund_transaction_id,json=refundTransactionId,proto3" json:"refund_transaction_id,omitempty"`
	RefundAddress       *string      `protobuf:"bytes,19,opt,name=refund_address,json=refundAddress,proto3,oneof" json:"refund_address,omitempty"`
	ChanIds             []*ChannelId `protobuf:"bytes,14,rep,name=chan_ids,json=chanIds,proto3" json:"chan_ids,omitempty"`
	BlindingKey         *string      `protobuf:"bytes,15,opt,name=blinding_key,json=blindingKey,proto3,oneof" json:"blinding_key,omitempty"`
	CreatedAt           int64        `protobuf:"varint,16,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ServiceFee          *uint64      `protobuf:"varint,17,opt,name=service_fee,json=serviceFee,proto3,oneof" json:"service_fee,omitempty"`
	OnchainFee          *uint64      `protobuf:"varint,18,opt,name=onchain_fee,json=onchainFee,proto3,oneof" json:"onchain_fee,omitempty"`
	// internal wallet which was used to pay the swap
	Wallet *string `protobuf:"bytes,20,opt,name=wallet,proto3,oneof" json:"wallet,omitempty"`
}

func (x *SwapInfo) Reset() {
	*x = SwapInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapInfo) ProtoMessage() {}

func (x *SwapInfo) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapInfo.ProtoReflect.Descriptor instead.
func (*SwapInfo) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{1}
}

func (x *SwapInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SwapInfo) GetPair() *Pair {
	if x != nil {
		return x.Pair
	}
	return nil
}

func (x *SwapInfo) GetState() SwapState {
	if x != nil {
		return x.State
	}
	return SwapState_PENDING
}

func (x *SwapInfo) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *SwapInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SwapInfo) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *SwapInfo) GetPreimage() string {
	if x != nil {
		return x.Preimage
	}
	return ""
}

func (x *SwapInfo) GetRedeemScript() string {
	if x != nil {
		return x.RedeemScript
	}
	return ""
}

func (x *SwapInfo) GetInvoice() string {
	if x != nil {
		return x.Invoice
	}
	return ""
}

func (x *SwapInfo) GetLockupAddress() string {
	if x != nil {
		return x.LockupAddress
	}
	return ""
}

func (x *SwapInfo) GetExpectedAmount() int64 {
	if x != nil {
		return x.ExpectedAmount
	}
	return 0
}

func (x *SwapInfo) GetTimeoutBlockHeight() uint32 {
	if x != nil {
		return x.TimeoutBlockHeight
	}
	return 0
}

func (x *SwapInfo) GetLockupTransactionId() string {
	if x != nil {
		return x.LockupTransactionId
	}
	return ""
}

func (x *SwapInfo) GetRefundTransactionId() string {
	if x != nil {
		return x.RefundTransactionId
	}
	return ""
}

func (x *SwapInfo) GetRefundAddress() string {
	if x != nil && x.RefundAddress != nil {
		return *x.RefundAddress
	}
	return ""
}

func (x *SwapInfo) GetChanIds() []*ChannelId {
	if x != nil {
		return x.ChanIds
	}
	return nil
}

func (x *SwapInfo) GetBlindingKey() string {
	if x != nil && x.BlindingKey != nil {
		return *x.BlindingKey
	}
	return ""
}

func (x *SwapInfo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SwapInfo) GetServiceFee() uint64 {
	if x != nil && x.ServiceFee != nil {
		return *x.ServiceFee
	}
	return 0
}

func (x *SwapInfo) GetOnchainFee() uint64 {
	if x != nil && x.OnchainFee != nil {
		return *x.OnchainFee
	}
	return 0
}

func (x *SwapInfo) GetWallet() string {
	if x != nil && x.Wallet != nil {
		return *x.Wallet
	}
	return ""
}

// Channel creations are an optional extension to a submarine swap in the data types of boltz-client.
//
// Deprecated: Marked as deprecated in boltzrpc.proto.
type ChannelCreationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the swap to which this channel channel belongs
	SwapId                 string `protobuf:"bytes,1,opt,name=swap_id,json=swapId,proto3" json:"swap_id,omitempty"`
	Status                 string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	InboundLiquidity       uint32 `protobuf:"varint,3,opt,name=inbound_liquidity,json=inboundLiquidity,proto3" json:"inbound_liquidity,omitempty"`
	Private                bool   `protobuf:"varint,4,opt,name=private,proto3" json:"private,omitempty"`
	FundingTransactionId   string `protobuf:"bytes,5,opt,name=funding_transaction_id,json=fundingTransactionId,proto3" json:"funding_transaction_id,omitempty"`
	FundingTransactionVout uint32 `protobuf:"varint,6,opt,name=funding_transaction_vout,json=fundingTransactionVout,proto3" json:"funding_transaction_vout,omitempty"`
}

func (x *ChannelCreationInfo) Reset() {
	*x = ChannelCreationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelCreationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelCreationInfo) ProtoMessage() {}

func (x *ChannelCreationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelCreationInfo.ProtoReflect.Descriptor instead.
func (*ChannelCreationInfo) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{2}
}

func (x *ChannelCreationInfo) GetSwapId() string {
	if x != nil {
		return x.SwapId
	}
	return ""
}

func (x *ChannelCreationInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ChannelCreationInfo) GetInboundLiquidity() uint32 {
	if x != nil {
		return x.InboundLiquidity
	}
	return 0
}

func (x *ChannelCreationInfo) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

func (x *ChannelCreationInfo) GetFundingTransactionId() string {
	if x != nil {
		return x.FundingTransactionId
	}
	return ""
}

func (x *ChannelCreationInfo) GetFundingTransactionVout() uint32 {
	if x != nil {
		return x.FundingTransactionVout
	}
	return 0
}

// Deprecated: Marked as deprecated in boltzrpc.proto.
type CombinedChannelSwapInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Swap            *SwapInfo            `protobuf:"bytes,1,opt,name=swap,proto3" json:"swap,omitempty"`
	ChannelCreation *ChannelCreationInfo `protobuf:"bytes,2,opt,name=channel_creation,json=channelCreation,proto3" json:"channel_creation,omitempty"`
}

func (x *CombinedChannelSwapInfo) Reset() {
	*x = CombinedChannelSwapInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CombinedChannelSwapInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CombinedChannelSwapInfo) ProtoMessage() {}

func (x *CombinedChannelSwapInfo) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CombinedChannelSwapInfo.ProtoReflect.Descriptor instead.
func (*CombinedChannelSwapInfo) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{3}
}

func (x *CombinedChannelSwapInfo) GetSwap() *SwapInfo {
	if x != nil {
		return x.Swap
	}
	return nil
}

func (x *CombinedChannelSwapInfo) GetChannelCreation() *ChannelCreationInfo {
	if x != nil {
		return x.ChannelCreation
	}
	return nil
}

type ReverseSwapInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	State SwapState `protobuf:"varint,2,opt,name=state,proto3,enum=boltzrpc.SwapState" json:"state,omitempty"`
	Error string    `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	// Latest status message of the Boltz backend
	Status              string       `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	PrivateKey          string       `protobuf:"bytes,5,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	Preimage            string       `protobuf:"bytes,6,opt,name=preimage,proto3" json:"preimage,omitempty"`
	RedeemScript        string       `protobuf:"bytes,7,opt,name=redeem_script,json=redeemScript,proto3" json:"redeem_script,omitempty"`
	Invoice             string       `protobuf:"bytes,8,opt,name=invoice,proto3" json:"invoice,omitempty"`
	ClaimAddress        string       `protobuf:"bytes,9,opt,name=claim_address,json=claimAddress,proto3" json:"claim_address,omitempty"`
	OnchainAmount       int64        `protobuf:"varint,10,opt,name=onchain_amount,json=onchainAmount,proto3" json:"onchain_amount,omitempty"`
	TimeoutBlockHeight  uint32       `protobuf:"varint,11,opt,name=timeout_block_height,json=timeoutBlockHeight,proto3" json:"timeout_block_height,omitempty"`
	LockupTransactionId string       `protobuf:"bytes,12,opt,name=lockup_transaction_id,json=lockupTransactionId,proto3" json:"lockup_transaction_id,omitempty"`
	ClaimTransactionId  string       `protobuf:"bytes,13,opt,name=claim_transaction_id,json=claimTransactionId,proto3" json:"claim_transaction_id,omitempty"`
	Pair                *Pair        `protobuf:"bytes,14,opt,name=pair,proto3" json:"pair,omitempty"`
	ChanIds             []*ChannelId `protobuf:"bytes,15,rep,name=chan_ids,json=chanIds,proto3" json:"chan_ids,omitempty"`
	BlindingKey         *string      `protobuf:"bytes,16,opt,name=blinding_key,json=blindingKey,proto3,oneof" json:"blinding_key,omitempty"`
	CreatedAt           int64        `protobuf:"varint,17,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ServiceFee          *uint64      `protobuf:"varint,18,opt,name=service_fee,json=serviceFee,proto3,oneof" json:"service_fee,omitempty"`
	OnchainFee          *uint64      `protobuf:"varint,19,opt,name=onchain_fee,json=onchainFee,proto3,oneof" json:"onchain_fee,omitempty"`
	RoutingFeeMsat      *uint64      `protobuf:"varint,20,opt,name=routing_fee_msat,json=routingFeeMsat,proto3,oneof" json:"routing_fee_msat,omitempty"`
	ExternalPay         bool         `protobuf:"varint,21,opt,name=external_pay,json=externalPay,proto3" json:"external_pay,omitempty"`
}

func (x *ReverseSwapInfo) Reset() {
	*x = ReverseSwapInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReverseSwapInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReverseSwapInfo) ProtoMessage() {}

func (x *ReverseSwapInfo) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReverseSwapInfo.ProtoReflect.Descriptor instead.
func (*ReverseSwapInfo) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{4}
}

func (x *ReverseSwapInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReverseSwapInfo) GetState() SwapState {
	if x != nil {
		return x.State
	}
	return SwapState_PENDING
}

func (x *ReverseSwapInfo) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ReverseSwapInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ReverseSwapInfo) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *ReverseSwapInfo) GetPreimage() string {
	if x != nil {
		return x.Preimage
	}
	return ""
}

func (x *ReverseSwapInfo) GetRedeemScript() string {
	if x != nil {
		return x.RedeemScript
	}
	return ""
}

func (x *ReverseSwapInfo) GetInvoice() string {
	if x != nil {
		return x.Invoice
	}
	return ""
}

func (x *ReverseSwapInfo) GetClaimAddress() string {
	if x != nil {
		return x.ClaimAddress
	}
	return ""
}

func (x *ReverseSwapInfo) GetOnchainAmount() int64 {
	if x != nil {
		return x.OnchainAmount
	}
	return 0
}

func (x *ReverseSwapInfo) GetTimeoutBlockHeight() uint32 {
	if x != nil {
		return x.TimeoutBlockHeight
	}
	return 0
}

func (x *ReverseSwapInfo) GetLockupTransactionId() string {
	if x != nil {
		return x.LockupTransactionId
	}
	return ""
}

func (x *ReverseSwapInfo) GetClaimTransactionId() string {
	if x != nil {
		return x.ClaimTransactionId
	}
	return ""
}

func (x *ReverseSwapInfo) GetPair() *Pair {
	if x != nil {
		return x.Pair
	}
	return nil
}

func (x *ReverseSwapInfo) GetChanIds() []*ChannelId {
	if x != nil {
		return x.ChanIds
	}
	return nil
}

func (x *ReverseSwapInfo) GetBlindingKey() string {
	if x != nil && x.BlindingKey != nil {
		return *x.BlindingKey
	}
	return ""
}

func (x *ReverseSwapInfo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ReverseSwapInfo) GetServiceFee() uint64 {
	if x != nil && x.ServiceFee != nil {
		return *x.ServiceFee
	}
	return 0
}

func (x *ReverseSwapInfo) GetOnchainFee() uint64 {
	if x != nil && x.OnchainFee != nil {
		return *x.OnchainFee
	}
	return 0
}

func (x *ReverseSwapInfo) GetRoutingFeeMsat() uint64 {
	if x != nil && x.RoutingFeeMsat != nil {
		return *x.RoutingFeeMsat
	}
	return 0
}

func (x *ReverseSwapInfo) GetExternalPay() bool {
	if x != nil {
		return x.ExternalPay
	}
	return false
}

type BlockHeights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Btc    uint32  `protobuf:"varint,1,opt,name=btc,proto3" json:"btc,omitempty"`
	Liquid *uint32 `protobuf:"varint,2,opt,name=liquid,proto3,oneof" json:"liquid,omitempty"`
}

func (x *BlockHeights) Reset() {
	*x = BlockHeights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeights) ProtoMessage() {}

func (x *BlockHeights) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeights.ProtoReflect.Descriptor instead.
func (*BlockHeights) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{5}
}

func (x *BlockHeights) GetBtc() uint32 {
	if x != nil {
		return x.Btc
	}
	return 0
}

func (x *BlockHeights) GetLiquid() uint32 {
	if x != nil && x.Liquid != nil {
		return *x.Liquid
	}
	return 0
}

type GetInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetInfoRequest) Reset() {
	*x = GetInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoRequest) ProtoMessage() {}

func (x *GetInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoRequest.ProtoReflect.Descriptor instead.
func (*GetInfoRequest) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{6}
}

type GetInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    string `protobuf:"bytes,9,opt,name=version,proto3" json:"version,omitempty"`
	Node       string `protobuf:"bytes,10,opt,name=node,proto3" json:"node,omitempty"`
	Network    string `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	NodePubkey string `protobuf:"bytes,7,opt,name=node_pubkey,json=nodePubkey,proto3" json:"node_pubkey,omitempty"`
	// one of: running, disabled, error
	AutoSwapStatus string `protobuf:"bytes,11,opt,name=auto_swap_status,json=autoSwapStatus,proto3" json:"auto_swap_status,omitempty"`
	// mapping of the currency to the latest block height.
	BlockHeights *BlockHeights `protobuf:"bytes,8,opt,name=block_heights,json=blockHeights,proto3" json:"block_heights,omitempty"`
	// Deprecated: Marked as deprecated in boltzrpc.proto.
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Deprecated: Marked as deprecated in boltzrpc.proto.
	LndPubkey string `protobuf:"bytes,3,opt,name=lnd_pubkey,json=lndPubkey,proto3" json:"lnd_pubkey,omitempty"`
	// Deprecated: Marked as deprecated in boltzrpc.proto.
	BlockHeight uint32 `protobuf:"varint,4,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// Deprecated: Marked as deprecated in boltzrpc.proto.
	PendingSwaps []string `protobuf:"bytes,5,rep,name=pending_swaps,json=pendingSwaps,proto3" json:"pending_swaps,omitempty"`
	// Deprecated: Marked as deprecated in boltzrpc.proto.
	PendingReverseSwaps []string `protobuf:"bytes,6,rep,name=pending_reverse_swaps,json=pendingReverseSwaps,proto3" json:"pending_reverse_swaps,omitempty"`
}

func (x *GetInfoResponse) Reset() {
	*x = GetInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoResponse) ProtoMessage() {}

func (x *GetInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoResponse.ProtoReflect.Descriptor instead.
func (*GetInfoResponse) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{7}
}

func (x *GetInfoResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetInfoResponse) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *GetInfoResponse) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *GetInfoResponse) GetNodePubkey() string {
	if x != nil {
		return x.NodePubkey
	}
	return ""
}

func (x *GetInfoResponse) GetAutoSwapStatus() string {
	if x != nil {
		return x.AutoSwapStatus
	}
	return ""
}

func (x *GetInfoResponse) GetBlockHeights() *BlockHeights {
	if x != nil {
		return x.BlockHeights
	}
	return nil
}

// Deprecated: Marked as deprecated in boltzrpc.proto.
func (x *GetInfoResponse) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

// Deprecated: Marked as deprecated in boltzrpc.proto.
func (x *GetInfoResponse) GetLndPubkey() string {
	if x != nil {
		return x.LndPubkey
	}
	return ""
}

// Deprecated: Marked as deprecated in boltzrpc.proto.
func (x *GetInfoResponse) GetBlockHeight() uint32 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

// Deprecated: Marked as deprecated in boltzrpc.proto.
func (x *GetInfoResponse) GetPendingSwaps() []string {
	if x != nil {
		return x.PendingSwaps
	}
	return nil
}

// Deprecated: Marked as deprecated in boltzrpc.proto.
func (x *GetInfoResponse) GetPendingReverseSwaps() []string {
	if x != nil {
		return x.PendingReverseSwaps
	}
	return nil
}

type Limits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimal               uint64 `protobuf:"varint,1,opt,name=minimal,proto3" json:"minimal,omitempty"`
	Maximal               uint64 `protobuf:"varint,2,opt,name=maximal,proto3" json:"maximal,omitempty"`
	MaximalZeroConfAmount uint64 `protobuf:"varint,3,opt,name=maximal_zero_conf_amount,json=maximalZeroConfAmount,proto3" json:"maximal_zero_conf_amount,omitempty"`
}

func (x *Limits) Reset() {
	*x = Limits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Limits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Limits) ProtoMessage() {}

func (x *Limits) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Limits.ProtoReflect.Descriptor instead.
func (*Limits) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{8}
}

func (x *Limits) GetMinimal() uint64 {
	if x != nil {
		return x.Minimal
	}
	return 0
}

func (x *Limits) GetMaximal() uint64 {
	if x != nil {
		return x.Maximal
	}
	return 0
}

func (x *Limits) GetMaximalZeroConfAmount() uint64 {
	if x != nil {
		return x.MaximalZeroConfAmount
	}
	return 0
}

// Submarine Pair
type SubmarinePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pair   *Pair               `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	Hash   string              `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Rate   float32             `protobuf:"fixed32,3,opt,name=rate,proto3" json:"rate,omitempty"`
	Limits *Limits             `protobuf:"bytes,4,opt,name=limits,proto3" json:"limits,omitempty"`
	Fees   *SubmarinePair_Fees `protobuf:"bytes,5,opt,name=fees,proto3" json:"fees,omitempty"`
}

func (x *SubmarinePair) Reset() {
	*x = SubmarinePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmarinePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmarinePair) ProtoMessage() {}

func (x *SubmarinePair) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmarinePair.ProtoReflect.Descriptor instead.
func (*SubmarinePair) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{9}
}

func (x *SubmarinePair) GetPair() *Pair {
	if x != nil {
		return x.Pair
	}
	return nil
}

func (x *SubmarinePair) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *SubmarinePair) GetRate() float32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *SubmarinePair) GetLimits() *Limits {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *SubmarinePair) GetFees() *SubmarinePair_Fees {
	if x != nil {
		return x.Fees
	}
	return nil
}

// Reverse Pair
type ReversePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pair   *Pair             `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	Hash   string            `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Rate   float32           `protobuf:"fixed32,3,opt,name=rate,proto3" json:"rate,omitempty"`
	Limits *Limits           `protobuf:"bytes,4,opt,name=limits,proto3" json:"limits,omitempty"`
	Fees   *ReversePair_Fees `protobuf:"bytes,5,opt,name=fees,proto3" json:"fees,omitempty"`
}

func (x *ReversePair) Reset() {
	*x = ReversePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReversePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReversePair) ProtoMessage() {}

func (x *ReversePair) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReversePair.ProtoReflect.Descriptor instead.
func (*ReversePair) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{10}
}

func (x *ReversePair) GetPair() *Pair {
	if x != nil {
		return x.Pair
	}
	return nil
}

func (x *ReversePair) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *ReversePair) GetRate() float32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *ReversePair) GetLimits() *Limits {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *ReversePair) GetFees() *ReversePair_Fees {
	if x != nil {
		return x.Fees
	}
	return nil
}

type GetPairsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Submarine []*SubmarinePair `protobuf:"bytes,1,rep,name=submarine,proto3" json:"submarine,omitempty"`
	Reverse   []*ReversePair   `protobuf:"bytes,2,rep,name=reverse,proto3" json:"reverse,omitempty"`
}

func (x *GetPairsResponse) Reset() {
	*x = GetPairsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPairsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPairsResponse) ProtoMessage() {}

func (x *GetPairsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPairsResponse.ProtoReflect.Descriptor instead.
func (*GetPairsResponse) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{11}
}

func (x *GetPairsResponse) GetSubmarine() []*SubmarinePair {
	if x != nil {
		return x.Submarine
	}
	return nil
}

func (x *GetPairsResponse) GetReverse() []*ReversePair {
	if x != nil {
		return x.Reverse
	}
	return nil
}

type MinerFees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Normal  uint32 `protobuf:"varint,1,opt,name=normal,proto3" json:"normal,omitempty"`
	Reverse uint32 `protobuf:"varint,2,opt,name=reverse,proto3" json:"reverse,omitempty"`
}

func (x *MinerFees) Reset() {
	*x = MinerFees{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinerFees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinerFees) ProtoMessage() {}

func (x *MinerFees) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinerFees.ProtoReflect.Descriptor instead.
func (*MinerFees) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{12}
}

func (x *MinerFees) GetNormal() uint32 {
	if x != nil {
		return x.Normal
	}
	return 0
}

func (x *MinerFees) GetReverse() uint32 {
	if x != nil {
		return x.Reverse
	}
	return 0
}

type Fees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Percentage float32    `protobuf:"fixed32,1,opt,name=percentage,proto3" json:"percentage,omitempty"`
	Miner      *MinerFees `protobuf:"bytes,2,opt,name=miner,proto3" json:"miner,omitempty"`
}

func (x *Fees) Reset() {
	*x = Fees{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fees) ProtoMessage() {}

func (x *Fees) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fees.ProtoReflect.Descriptor instead.
func (*Fees) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{13}
}

func (x *Fees) GetPercentage() float32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *Fees) GetMiner() *MinerFees {
	if x != nil {
		return x.Miner
	}
	return nil
}

type GetServiceInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetServiceInfoRequest) Reset() {
	*x = GetServiceInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceInfoRequest) ProtoMessage() {}

func (x *GetServiceInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceInfoRequest.ProtoReflect.Descriptor instead.
func (*GetServiceInfoRequest) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{14}
}

type GetServiceInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fees   *Fees   `protobuf:"bytes,1,opt,name=fees,proto3" json:"fees,omitempty"`
	Limits *Limits `protobuf:"bytes,2,opt,name=limits,proto3" json:"limits,omitempty"`
}

func (x *GetServiceInfoResponse) Reset() {
	*x = GetServiceInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceInfoResponse) ProtoMessage() {}

func (x *GetServiceInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceInfoResponse.ProtoReflect.Descriptor instead.
func (*GetServiceInfoResponse) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{15}
}

func (x *GetServiceInfoResponse) GetFees() *Fees {
	if x != nil {
		return x.Fees
	}
	return nil
}

func (x *GetServiceInfoResponse) GetLimits() *Limits {
	if x != nil {
		return x.Limits
	}
	return nil
}

type ListSwapsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From   *Currency  `protobuf:"varint,1,opt,name=from,proto3,enum=boltzrpc.Currency,oneof" json:"from,omitempty"`
	To     *Currency  `protobuf:"varint,2,opt,name=to,proto3,enum=boltzrpc.Currency,oneof" json:"to,omitempty"`
	IsAuto *bool      `protobuf:"varint,3,opt,name=is_auto,json=isAuto,proto3,oneof" json:"is_auto,omitempty"`
	State  *SwapState `protobuf:"varint,4,opt,name=state,proto3,enum=boltzrpc.SwapState,oneof" json:"state,omitempty"`
}

func (x *ListSwapsRequest) Reset() {
	*x = ListSwapsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSwapsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSwapsRequest) ProtoMessage() {}

func (x *ListSwapsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSwapsRequest.ProtoReflect.Descriptor instead.
func (*ListSwapsRequest) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{16}
}

func (x *ListSwapsRequest) GetFrom() Currency {
	if x != nil && x.From != nil {
		return *x.From
	}
	return Currency_BTC
}

func (x *ListSwapsRequest) GetTo() Currency {
	if x != nil && x.To != nil {
		return *x.To
	}
	return Currency_BTC
}

func (x *ListSwapsRequest) GetIsAuto() bool {
	if x != nil && x.IsAuto != nil {
		return *x.IsAuto
	}
	return false
}

func (x *ListSwapsRequest) GetState() SwapState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return SwapState_PENDING
}

type ListSwapsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Swaps            []*SwapInfo                `protobuf:"bytes,1,rep,name=swaps,proto3" json:"swaps,omitempty"`
	ChannelCreations []*CombinedChannelSwapInfo `protobuf:"bytes,2,rep,name=channel_creations,json=channelCreations,proto3" json:"channel_creations,omitempty"`
	ReverseSwaps     []*ReverseSwapInfo         `protobuf:"bytes,3,rep,name=reverse_swaps,json=reverseSwaps,proto3" json:"reverse_swaps,omitempty"`
}

func (x *ListSwapsResponse) Reset() {
	*x = ListSwapsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSwapsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSwapsResponse) ProtoMessage() {}

func (x *ListSwapsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSwapsResponse.ProtoReflect.Descriptor instead.
func (*ListSwapsResponse) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{17}
}

func (x *ListSwapsResponse) GetSwaps() []*SwapInfo {
	if x != nil {
		return x.Swaps
	}
	return nil
}

func (x *ListSwapsResponse) GetChannelCreations() []*CombinedChannelSwapInfo {
	if x != nil {
		return x.ChannelCreations
	}
	return nil
}

func (x *ListSwapsResponse) GetReverseSwaps() []*ReverseSwapInfo {
	if x != nil {
		return x.ReverseSwaps
	}
	return nil
}

type RefundSwapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *RefundSwapRequest) Reset() {
	*x = RefundSwapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundSwapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundSwapRequest) ProtoMessage() {}

func (x *RefundSwapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundSwapRequest.ProtoReflect.Descriptor instead.
func (*RefundSwapRequest) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{18}
}

func (x *RefundSwapRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RefundSwapRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetSwapInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSwapInfoRequest) Reset() {
	*x = GetSwapInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSwapInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSwapInfoRequest) ProtoMessage() {}

func (x *GetSwapInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSwapInfoRequest.ProtoReflect.Descriptor instead.
func (*GetSwapInfoRequest) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{19}
}

func (x *GetSwapInfoRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetSwapInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Swap            *SwapInfo            `protobuf:"bytes,1,opt,name=swap,proto3" json:"swap,omitempty"`
	ChannelCreation *ChannelCreationInfo `protobuf:"bytes,2,opt,name=channel_creation,json=channelCreation,proto3" json:"channel_creation,omitempty"`
	ReverseSwap     *ReverseSwapInfo     `protobuf:"bytes,3,opt,name=reverse_swap,json=reverseSwap,proto3" json:"reverse_swap,omitempty"`
}

func (x *GetSwapInfoResponse) Reset() {
	*x = GetSwapInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSwapInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSwapInfoResponse) ProtoMessage() {}

func (x *GetSwapInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSwapInfoResponse.ProtoReflect.Descriptor instead.
func (*GetSwapInfoResponse) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{20}
}

func (x *GetSwapInfoResponse) GetSwap() *SwapInfo {
	if x != nil {
		return x.Swap
	}
	return nil
}

func (x *GetSwapInfoResponse) GetChannelCreation() *ChannelCreationInfo {
	if x != nil {
		return x.ChannelCreation
	}
	return nil
}

func (x *GetSwapInfoResponse) GetReverseSwap() *ReverseSwapInfo {
	if x != nil {
		return x.ReverseSwap
	}
	return nil
}

type DepositRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Percentage of inbound liquidity the channel that is opened in case the invoice cannot be paid should have.
	// 25 by default.
	InboundLiquidity uint32 `protobuf:"varint,1,opt,name=inbound_liquidity,json=inboundLiquidity,proto3" json:"inbound_liquidity,omitempty"`
}

func (x *DepositRequest) Reset() {
	*x = DepositRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositRequest) ProtoMessage() {}

func (x *DepositRequest) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositRequest.ProtoReflect.Descriptor instead.
func (*DepositRequest) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{21}
}

func (x *DepositRequest) GetInboundLiquidity() uint32 {
	if x != nil {
		return x.InboundLiquidity
	}
	return 0
}

type DepositResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address            string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	TimeoutBlockHeight uint32 `protobuf:"varint,3,opt,name=timeout_block_height,json=timeoutBlockHeight,proto3" json:"timeout_block_height,omitempty"`
}

func (x *DepositResponse) Reset() {
	*x = DepositResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositResponse) ProtoMessage() {}

func (x *DepositResponse) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositResponse.ProtoReflect.Descriptor instead.
func (*DepositResponse) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{22}
}

func (x *DepositResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DepositResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DepositResponse) GetTimeoutBlockHeight() uint32 {
	if x != nil {
		return x.TimeoutBlockHeight
	}
	return 0
}

type CreateSwapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount int64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Pair   *Pair `protobuf:"bytes,2,opt,name=pair,proto3" json:"pair,omitempty"`
	// the daemon will pay the swap using the onchain wallet specified in the `wallet` field or any wallet otherwise.
	SendFromInternal bool `protobuf:"varint,4,opt,name=send_from_internal,json=sendFromInternal,proto3" json:"send_from_internal,omitempty"`
	// address where the coins should go if the swap fails. Refunds will go to any of the daemons wallets otherwise.
	RefundAddress *string `protobuf:"bytes,5,opt,name=refund_address,json=refundAddress,proto3,oneof" json:"refund_address,omitempty"`
	// wallet to pay swap from. only used if `send_from_internal` is set to true
	Wallet *string `protobuf:"bytes,6,opt,name=wallet,proto3,oneof" json:"wallet,omitempty"`
	// invoice to use for the swap. if not set, the daemon will get a new invoice from the lightning node
	Invoice *string `protobuf:"bytes,7,opt,name=invoice,proto3,oneof" json:"invoice,omitempty"`
}

func (x *CreateSwapRequest) Reset() {
	*x = CreateSwapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSwapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSwapRequest) ProtoMessage() {}

func (x *CreateSwapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSwapRequest.ProtoReflect.Descriptor instead.
func (*CreateSwapRequest) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{23}
}

func (x *CreateSwapRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreateSwapRequest) GetPair() *Pair {
	if x != nil {
		return x.Pair
	}
	return nil
}

func (x *CreateSwapRequest) GetSendFromInternal() bool {
	if x != nil {
		return x.SendFromInternal
	}
	return false
}

func (x *CreateSwapRequest) GetRefundAddress() string {
	if x != nil && x.RefundAddress != nil {
		return *x.RefundAddress
	}
	return ""
}

func (x *CreateSwapRequest) GetWallet() string {
	if x != nil && x.Wallet != nil {
		return *x.Wallet
	}
	return ""
}

func (x *CreateSwapRequest) GetInvoice() string {
	if x != nil && x.Invoice != nil {
		return *x.Invoice
	}
	return ""
}

type CreateSwapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address        string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	ExpectedAmount int64  `protobuf:"varint,3,opt,name=expected_amount,json=expectedAmount,proto3" json:"expected_amount,omitempty"`
	Bip21          string `protobuf:"bytes,4,opt,name=bip21,proto3" json:"bip21,omitempty"`
	// lockup transaction id. Only populated when `send_from_internal` was specified in the request
	TxId               string  `protobuf:"bytes,5,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	TimeoutBlockHeight uint32  `protobuf:"varint,6,opt,name=timeout_block_height,json=timeoutBlockHeight,proto3" json:"timeout_block_height,omitempty"`
	TimeoutHours       float32 `protobuf:"fixed32,7,opt,name=timeout_hours,json=timeoutHours,proto3" json:"timeout_hours,omitempty"`
}

func (x *CreateSwapResponse) Reset() {
	*x = CreateSwapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSwapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSwapResponse) ProtoMessage() {}

func (x *CreateSwapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSwapResponse.ProtoReflect.Descriptor instead.
func (*CreateSwapResponse) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{24}
}

func (x *CreateSwapResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateSwapResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreateSwapResponse) GetExpectedAmount() int64 {
	if x != nil {
		return x.ExpectedAmount
	}
	return 0
}

func (x *CreateSwapResponse) GetBip21() string {
	if x != nil {
		return x.Bip21
	}
	return ""
}

func (x *CreateSwapResponse) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *CreateSwapResponse) GetTimeoutBlockHeight() uint32 {
	if x != nil {
		return x.TimeoutBlockHeight
	}
	return 0
}

func (x *CreateSwapResponse) GetTimeoutHours() float32 {
	if x != nil {
		return x.TimeoutHours
	}
	return 0
}

type CreateChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount int64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// Percentage of inbound liquidity the channel that is opened should have.
	// 25 by default.
	InboundLiquidity uint32 `protobuf:"varint,2,opt,name=inbound_liquidity,json=inboundLiquidity,proto3" json:"inbound_liquidity,omitempty"`
	Private          bool   `protobuf:"varint,3,opt,name=private,proto3" json:"private,omitempty"`
}

func (x *CreateChannelRequest) Reset() {
	*x = CreateChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChannelRequest) ProtoMessage() {}

func (x *CreateChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChannelRequest.ProtoReflect.Descriptor instead.
func (*CreateChannelRequest) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{25}
}

func (x *CreateChannelRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreateChannelRequest) GetInboundLiquidity() uint32 {
	if x != nil {
		return x.InboundLiquidity
	}
	return 0
}

func (x *CreateChannelRequest) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

type CreateReverseSwapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// amount of satoshis to swap
	Amount int64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// If no value is set, the daemon will query a new address from the lightning node
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// Whether the daemon should broadcast the claim transaction immediately after the lockup transaction is in the mempool.
	// Should only be used for smaller amounts as it involves trust in boltz.
	AcceptZeroConf bool  `protobuf:"varint,3,opt,name=accept_zero_conf,json=acceptZeroConf,proto3" json:"accept_zero_conf,omitempty"`
	Pair           *Pair `protobuf:"bytes,4,opt,name=pair,proto3" json:"pair,omitempty"`
	// a list of channel ids which are allowed for paying the invoice. can be in either cln or lnd style.
	ChanIds []string `protobuf:"bytes,5,rep,name=chan_ids,json=chanIds,proto3" json:"chan_ids,omitempty"`
	// wallet from which the onchain address should be generated - only considered if `address` is not set
	Wallet *string `protobuf:"bytes,6,opt,name=wallet,proto3,oneof" json:"wallet,omitempty"`
	// Whether the daemon should return immediately after creating the swap or wait until the swap is successful or failed.
	// It will always return immediately if `accept_zero_conf` is not set.
	ReturnImmediately *bool `protobuf:"varint,7,opt,name=return_immediately,json=returnImmediately,proto3,oneof" json:"return_immediately,omitempty"`
	// If set, the daemon will not pay the invoice of the swap and return the invoice to be paid. This implicitly sets `return_immediately` to true.
	ExternalPay *bool `protobuf:"varint,8,opt,name=external_pay,json=externalPay,proto3,oneof" json:"external_pay,omitempty"`
}

func (x *CreateReverseSwapRequest) Reset() {
	*x = CreateReverseSwapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReverseSwapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReverseSwapRequest) ProtoMessage() {}

func (x *CreateReverseSwapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReverseSwapRequest.ProtoReflect.Descriptor instead.
func (*CreateReverseSwapRequest) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{26}
}

func (x *CreateReverseSwapRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreateReverseSwapRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreateReverseSwapRequest) GetAcceptZeroConf() bool {
	if x != nil {
		return x.AcceptZeroConf
	}
	return false
}

func (x *CreateReverseSwapRequest) GetPair() *Pair {
	if x != nil {
		return x.Pair
	}
	return nil
}

func (x *CreateReverseSwapRequest) GetChanIds() []string {
	if x != nil {
		return x.ChanIds
	}
	return nil
}

func (x *CreateReverseSwapRequest) GetWallet() string {
	if x != nil && x.Wallet != nil {
		return *x.Wallet
	}
	return ""
}

func (x *CreateReverseSwapRequest) GetReturnImmediately() bool {
	if x != nil && x.ReturnImmediately != nil {
		return *x.ReturnImmediately
	}
	return false
}

func (x *CreateReverseSwapRequest) GetExternalPay() bool {
	if x != nil && x.ExternalPay != nil {
		return *x.ExternalPay
	}
	return false
}

type CreateReverseSwapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LockupAddress string `protobuf:"bytes,2,opt,name=lockup_address,json=lockupAddress,proto3" json:"lockup_address,omitempty"`
	// Only populated when zero-conf is accepted and return_immediately is set to false
	RoutingFeeMilliSat *uint64 `protobuf:"varint,3,opt,name=routing_fee_milli_sat,json=routingFeeMilliSat,proto3,oneof" json:"routing_fee_milli_sat,omitempty"`
	// Only populated when zero-conf is accepted and return_immediately is set to false
	ClaimTransactionId *string `protobuf:"bytes,4,opt,name=claim_transaction_id,json=claimTransactionId,proto3,oneof" json:"claim_transaction_id,omitempty"`
	// Invoice to be paid. Only populated when `external_pay` is set to true
	Invoice *string `protobuf:"bytes,5,opt,name=invoice,proto3,oneof" json:"invoice,omitempty"`
}

func (x *CreateReverseSwapResponse) Reset() {
	*x = CreateReverseSwapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReverseSwapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReverseSwapResponse) ProtoMessage() {}

func (x *CreateReverseSwapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReverseSwapResponse.ProtoReflect.Descriptor instead.
func (*CreateReverseSwapResponse) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{27}
}

func (x *CreateReverseSwapResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateReverseSwapResponse) GetLockupAddress() string {
	if x != nil {
		return x.LockupAddress
	}
	return ""
}

func (x *CreateReverseSwapResponse) GetRoutingFeeMilliSat() uint64 {
	if x != nil && x.RoutingFeeMilliSat != nil {
		return *x.RoutingFeeMilliSat
	}
	return 0
}

func (x *CreateReverseSwapResponse) GetClaimTransactionId() string {
	if x != nil && x.ClaimTransactionId != nil {
		return *x.ClaimTransactionId
	}
	return ""
}

func (x *CreateReverseSwapResponse) GetInvoice() string {
	if x != nil && x.Invoice != nil {
		return *x.Invoice
	}
	return ""
}

type ChannelId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cln style: 832347x2473x1
	Cln string `protobuf:"bytes,1,opt,name=cln,proto3" json:"cln,omitempty"`
	// lnd style: 915175205006540801
	Lnd uint64 `protobuf:"varint,2,opt,name=lnd,proto3" json:"lnd,omitempty"`
}

func (x *ChannelId) Reset() {
	*x = ChannelId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelId) ProtoMessage() {}

func (x *ChannelId) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelId.ProtoReflect.Descriptor instead.
func (*ChannelId) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{28}
}

func (x *ChannelId) GetCln() string {
	if x != nil {
		return x.Cln
	}
	return ""
}

func (x *ChannelId) GetLnd() uint64 {
	if x != nil {
		return x.Lnd
	}
	return 0
}

type LightningChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *ChannelId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Capacity  uint64     `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	LocalSat  uint64     `protobuf:"varint,3,opt,name=local_sat,json=localSat,proto3" json:"local_sat,omitempty"`
	RemoteSat uint64     `protobuf:"varint,4,opt,name=remote_sat,json=remoteSat,proto3" json:"remote_sat,omitempty"`
	PeerId    string     `protobuf:"bytes,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *LightningChannel) Reset() {
	*x = LightningChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LightningChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightningChannel) ProtoMessage() {}

func (x *LightningChannel) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightningChannel.ProtoReflect.Descriptor instead.
func (*LightningChannel) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{29}
}

func (x *LightningChannel) GetId() *ChannelId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *LightningChannel) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *LightningChannel) GetLocalSat() uint64 {
	if x != nil {
		return x.LocalSat
	}
	return 0
}

func (x *LightningChannel) GetRemoteSat() uint64 {
	if x != nil {
		return x.RemoteSat
	}
	return 0
}

func (x *LightningChannel) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

type SwapStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalFees   uint64 `protobuf:"varint,1,opt,name=total_fees,json=totalFees,proto3" json:"total_fees,omitempty"`
	TotalAmount uint64 `protobuf:"varint,2,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	AvgFees     uint64 `protobuf:"varint,3,opt,name=avg_fees,json=avgFees,proto3" json:"avg_fees,omitempty"`
	AvgAmount   uint64 `protobuf:"varint,4,opt,name=avg_amount,json=avgAmount,proto3" json:"avg_amount,omitempty"`
	Count       uint64 `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *SwapStats) Reset() {
	*x = SwapStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapStats) ProtoMessage() {}

func (x *SwapStats) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapStats.ProtoReflect.Descriptor instead.
func (*SwapStats) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{30}
}

func (x *SwapStats) GetTotalFees() uint64 {
	if x != nil {
		return x.TotalFees
	}
	return 0
}

func (x *SwapStats) GetTotalAmount() uint64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *SwapStats) GetAvgFees() uint64 {
	if x != nil {
		return x.AvgFees
	}
	return 0
}

func (x *SwapStats) GetAvgAmount() uint64 {
	if x != nil {
		return x.AvgAmount
	}
	return 0
}

func (x *SwapStats) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type Budget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total     uint64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Remaining int64  `protobuf:"varint,2,opt,name=remaining,proto3" json:"remaining,omitempty"`
	StartDate int64  `protobuf:"varint,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate   int64  `protobuf:"varint,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
}

func (x *Budget) Reset() {
	*x = Budget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Budget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Budget) ProtoMessage() {}

func (x *Budget) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Budget.ProtoReflect.Descriptor instead.
func (*Budget) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{31}
}

func (x *Budget) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Budget) GetRemaining() int64 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *Budget) GetStartDate() int64 {
	if x != nil {
		return x.StartDate
	}
	return 0
}

func (x *Budget) GetEndDate() int64 {
	if x != nil {
		return x.EndDate
	}
	return 0
}

type WalletCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// only one of these is allowed to be present
	Mnemonic       *string `protobuf:"bytes,1,opt,name=mnemonic,proto3,oneof" json:"mnemonic,omitempty"`
	Xpub           *string `protobuf:"bytes,2,opt,name=xpub,proto3,oneof" json:"xpub,omitempty"`
	CoreDescriptor *string `protobuf:"bytes,3,opt,name=core_descriptor,json=coreDescriptor,proto3,oneof" json:"core_descriptor,omitempty"`
	// only used in combination with mnemonic
	Subaccount *uint64 `protobuf:"varint,4,opt,name=subaccount,proto3,oneof" json:"subaccount,omitempty"`
}

func (x *WalletCredentials) Reset() {
	*x = WalletCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletCredentials) ProtoMessage() {}

func (x *WalletCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletCredentials.ProtoReflect.Descriptor instead.
func (*WalletCredentials) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{32}
}

func (x *WalletCredentials) GetMnemonic() string {
	if x != nil && x.Mnemonic != nil {
		return *x.Mnemonic
	}
	return ""
}

func (x *WalletCredentials) GetXpub() string {
	if x != nil && x.Xpub != nil {
		return *x.Xpub
	}
	return ""
}

func (x *WalletCredentials) GetCoreDescriptor() string {
	if x != nil && x.CoreDescriptor != nil {
		return *x.CoreDescriptor
	}
	return ""
}

func (x *WalletCredentials) GetSubaccount() uint64 {
	if x != nil && x.Subaccount != nil {
		return *x.Subaccount
	}
	return 0
}

type WalletInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Currency Currency `protobuf:"varint,2,opt,name=currency,proto3,enum=boltzrpc.Currency" json:"currency,omitempty"`
}

func (x *WalletInfo) Reset() {
	*x = WalletInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletInfo) ProtoMessage() {}

func (x *WalletInfo) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletInfo.ProtoReflect.Descriptor instead.
func (*WalletInfo) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{33}
}

func (x *WalletInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WalletInfo) GetCurrency() Currency {
	if x != nil {
		return x.Currency
	}
	return Currency_BTC
}

type ImportWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credentials *WalletCredentials `protobuf:"bytes,1,opt,name=credentials,proto3" json:"credentials,omitempty"`
	Info        *WalletInfo        `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	// the password to encrypt the wallet with. If there are existing ecnrypted wallets, the same password will have to be used.
	Password *string `protobuf:"bytes,3,opt,name=password,proto3,oneof" json:"password,omitempty"`
}

func (x *ImportWalletRequest) Reset() {
	*x = ImportWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportWalletRequest) ProtoMessage() {}

func (x *ImportWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportWalletRequest.ProtoReflect.Descriptor instead.
func (*ImportWalletRequest) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{34}
}

func (x *ImportWalletRequest) GetCredentials() *WalletCredentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *ImportWalletRequest) GetInfo() *WalletInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *ImportWalletRequest) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

type CreateWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *WalletInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	// the password to encrypt the wallet with. If there are existing ecnrypted wallets, the same password will have to be used.
	Password *string `protobuf:"bytes,2,opt,name=password,proto3,oneof" json:"password,omitempty"`
}

func (x *CreateWalletRequest) Reset() {
	*x = CreateWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWalletRequest) ProtoMessage() {}

func (x *CreateWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWalletRequest.ProtoReflect.Descriptor instead.
func (*CreateWalletRequest) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{35}
}

func (x *CreateWalletRequest) GetInfo() *WalletInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *CreateWalletRequest) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

type SetSubaccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The subaccount to use. If not set, a new one will be created.
	Subaccount *uint64 `protobuf:"varint,2,opt,name=subaccount,proto3,oneof" json:"subaccount,omitempty"`
}

func (x *SetSubaccountRequest) Reset() {
	*x = SetSubaccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSubaccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSubaccountRequest) ProtoMessage() {}

func (x *SetSubaccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSubaccountRequest.ProtoReflect.Descriptor instead.
func (*SetSubaccountRequest) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{36}
}

func (x *SetSubaccountRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SetSubaccountRequest) GetSubaccount() uint64 {
	if x != nil && x.Subaccount != nil {
		return *x.Subaccount
	}
	return 0
}

type GetSubaccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSubaccountsRequest) Reset() {
	*x = GetSubaccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubaccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubaccountsRequest) ProtoMessage() {}

func (x *GetSubaccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubaccountsRequest.ProtoReflect.Descriptor instead.
func (*GetSubaccountsRequest) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{37}
}

type GetSubaccountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current     *uint64       `protobuf:"varint,1,opt,name=current,proto3,oneof" json:"current,omitempty"`
	Subaccounts []*Subaccount `protobuf:"bytes,2,rep,name=subaccounts,proto3" json:"subaccounts,omitempty"`
}

func (x *GetSubaccountsResponse) Reset() {
	*x = GetSubaccountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubaccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubaccountsResponse) ProtoMessage() {}

func (x *GetSubaccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubaccountsResponse.ProtoReflect.Descriptor instead.
func (*GetSubaccountsResponse) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{38}
}

func (x *GetSubaccountsResponse) GetCurrent() uint64 {
	if x != nil && x.Current != nil {
		return *x.Current
	}
	return 0
}

func (x *GetSubaccountsResponse) GetSubaccounts() []*Subaccount {
	if x != nil {
		return x.Subaccounts
	}
	return nil
}

type ImportWalletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImportWalletResponse) Reset() {
	*x = ImportWalletResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportWalletResponse) ProtoMessage() {}

func (x *ImportWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportWalletResponse.ProtoReflect.Descriptor instead.
func (*ImportWalletResponse) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{39}
}

type GetWalletsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency        *Currency `protobuf:"varint,1,opt,name=currency,proto3,enum=boltzrpc.Currency,oneof" json:"currency,omitempty"`
	IncludeReadonly *bool     `protobuf:"varint,2,opt,name=include_readonly,json=includeReadonly,proto3,oneof" json:"include_readonly,omitempty"`
}

func (x *GetWalletsRequest) Reset() {
	*x = GetWalletsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletsRequest) ProtoMessage() {}

func (x *GetWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletsRequest.ProtoReflect.Descriptor instead.
func (*GetWalletsRequest) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{40}
}

func (x *GetWalletsRequest) GetCurrency() Currency {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return Currency_BTC
}

func (x *GetWalletsRequest) GetIncludeReadonly() bool {
	if x != nil && x.IncludeReadonly != nil {
		return *x.IncludeReadonly
	}
	return false
}

type GetWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetWalletRequest) Reset() {
	*x = GetWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletRequest) ProtoMessage() {}

func (x *GetWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletRequest.ProtoReflect.Descriptor instead.
func (*GetWalletRequest) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{41}
}

func (x *GetWalletRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetWalletCredentialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Password *string `protobuf:"bytes,2,opt,name=password,proto3,oneof" json:"password,omitempty"`
}

func (x *GetWalletCredentialsRequest) Reset() {
	*x = GetWalletCredentialsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletCredentialsRequest) ProtoMessage() {}

func (x *GetWalletCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletCredentialsRequest.ProtoReflect.Descriptor instead.
func (*GetWalletCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{42}
}

func (x *GetWalletCredentialsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetWalletCredentialsRequest) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

type RemoveWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RemoveWalletRequest) Reset() {
	*x = RemoveWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveWalletRequest) ProtoMessage() {}

func (x *RemoveWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveWalletRequest.ProtoReflect.Descriptor instead.
func (*RemoveWalletRequest) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{43}
}

func (x *RemoveWalletRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Wallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Currency Currency `protobuf:"varint,2,opt,name=currency,proto3,enum=boltzrpc.Currency" json:"currency,omitempty"`
	Readonly bool     `protobuf:"varint,3,opt,name=readonly,proto3" json:"readonly,omitempty"`
	Balance  *Balance `protobuf:"bytes,4,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *Wallet) Reset() {
	*x = Wallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wallet) ProtoMessage() {}

func (x *Wallet) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wallet.ProtoReflect.Descriptor instead.
func (*Wallet) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{44}
}

func (x *Wallet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Wallet) GetCurrency() Currency {
	if x != nil {
		return x.Currency
	}
	return Currency_BTC
}

func (x *Wallet) GetReadonly() bool {
	if x != nil {
		return x.Readonly
	}
	return false
}

func (x *Wallet) GetBalance() *Balance {
	if x != nil {
		return x.Balance
	}
	return nil
}

type Wallets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wallets []*Wallet `protobuf:"bytes,1,rep,name=wallets,proto3" json:"wallets,omitempty"`
}

func (x *Wallets) Reset() {
	*x = Wallets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wallets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wallets) ProtoMessage() {}

func (x *Wallets) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wallets.ProtoReflect.Descriptor instead.
func (*Wallets) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{45}
}

func (x *Wallets) GetWallets() []*Wallet {
	if x != nil {
		return x.Wallets
	}
	return nil
}

type Balance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total       uint64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Confirmed   uint64 `protobuf:"varint,2,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	Unconfirmed uint64 `protobuf:"varint,3,opt,name=unconfirmed,proto3" json:"unconfirmed,omitempty"`
}

func (x *Balance) Reset() {
	*x = Balance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balance) ProtoMessage() {}

func (x *Balance) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balance.ProtoReflect.Descriptor instead.
func (*Balance) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{46}
}

func (x *Balance) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Balance) GetConfirmed() uint64 {
	if x != nil {
		return x.Confirmed
	}
	return 0
}

func (x *Balance) GetUnconfirmed() uint64 {
	if x != nil {
		return x.Unconfirmed
	}
	return 0
}

type Subaccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance *Balance `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	Pointer uint64   `protobuf:"varint,2,opt,name=pointer,proto3" json:"pointer,omitempty"`
	Type    string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Subaccount) Reset() {
	*x = Subaccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subaccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subaccount) ProtoMessage() {}

func (x *Subaccount) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subaccount.ProtoReflect.Descriptor instead.
func (*Subaccount) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{47}
}

func (x *Subaccount) GetBalance() *Balance {
	if x != nil {
		return x.Balance
	}
	return nil
}

func (x *Subaccount) GetPointer() uint64 {
	if x != nil {
		return x.Pointer
	}
	return 0
}

func (x *Subaccount) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type RemoveWalletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveWalletResponse) Reset() {
	*x = RemoveWalletResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveWalletResponse) ProtoMessage() {}

func (x *RemoveWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveWalletResponse.ProtoReflect.Descriptor instead.
func (*RemoveWalletResponse) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{48}
}

type UnlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *UnlockRequest) Reset() {
	*x = UnlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockRequest) ProtoMessage() {}

func (x *UnlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockRequest.ProtoReflect.Descriptor instead.
func (*UnlockRequest) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{49}
}

func (x *UnlockRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type VerifyWalletPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *VerifyWalletPasswordRequest) Reset() {
	*x = VerifyWalletPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyWalletPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyWalletPasswordRequest) ProtoMessage() {}

func (x *VerifyWalletPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyWalletPasswordRequest.ProtoReflect.Descriptor instead.
func (*VerifyWalletPasswordRequest) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{50}
}

func (x *VerifyWalletPasswordRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type VerifyWalletPasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Correct bool `protobuf:"varint,1,opt,name=correct,proto3" json:"correct,omitempty"`
}

func (x *VerifyWalletPasswordResponse) Reset() {
	*x = VerifyWalletPasswordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyWalletPasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyWalletPasswordResponse) ProtoMessage() {}

func (x *VerifyWalletPasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyWalletPasswordResponse.ProtoReflect.Descriptor instead.
func (*VerifyWalletPasswordResponse) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{51}
}

func (x *VerifyWalletPasswordResponse) GetCorrect() bool {
	if x != nil {
		return x.Correct
	}
	return false
}

type ChangeWalletPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Old string `protobuf:"bytes,1,opt,name=old,proto3" json:"old,omitempty"`
	New string `protobuf:"bytes,2,opt,name=new,proto3" json:"new,omitempty"`
}

func (x *ChangeWalletPasswordRequest) Reset() {
	*x = ChangeWalletPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeWalletPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeWalletPasswordRequest) ProtoMessage() {}

func (x *ChangeWalletPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeWalletPasswordRequest.ProtoReflect.Descriptor instead.
func (*ChangeWalletPasswordRequest) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{52}
}

func (x *ChangeWalletPasswordRequest) GetOld() string {
	if x != nil {
		return x.Old
	}
	return ""
}

func (x *ChangeWalletPasswordRequest) GetNew() string {
	if x != nil {
		return x.New
	}
	return ""
}

type SubmarinePair_Fees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Percentage float32 `protobuf:"fixed32,1,opt,name=percentage,proto3" json:"percentage,omitempty"`
	MinerFees  uint64  `protobuf:"varint,2,opt,name=miner_fees,json=minerFees,proto3" json:"miner_fees,omitempty"`
}

func (x *SubmarinePair_Fees) Reset() {
	*x = SubmarinePair_Fees{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmarinePair_Fees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmarinePair_Fees) ProtoMessage() {}

func (x *SubmarinePair_Fees) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmarinePair_Fees.ProtoReflect.Descriptor instead.
func (*SubmarinePair_Fees) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{9, 0}
}

func (x *SubmarinePair_Fees) GetPercentage() float32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *SubmarinePair_Fees) GetMinerFees() uint64 {
	if x != nil {
		return x.MinerFees
	}
	return 0
}

type ReversePair_Fees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Percentage float32                     `protobuf:"fixed32,1,opt,name=percentage,proto3" json:"percentage,omitempty"`
	MinerFees  *ReversePair_Fees_MinerFees `protobuf:"bytes,2,opt,name=miner_fees,json=minerFees,proto3" json:"miner_fees,omitempty"`
}

func (x *ReversePair_Fees) Reset() {
	*x = ReversePair_Fees{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReversePair_Fees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReversePair_Fees) ProtoMessage() {}

func (x *ReversePair_Fees) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReversePair_Fees.ProtoReflect.Descriptor instead.
func (*ReversePair_Fees) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{10, 0}
}

func (x *ReversePair_Fees) GetPercentage() float32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *ReversePair_Fees) GetMinerFees() *ReversePair_Fees_MinerFees {
	if x != nil {
		return x.MinerFees
	}
	return nil
}

type ReversePair_Fees_MinerFees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lockup uint64 `protobuf:"varint,1,opt,name=lockup,proto3" json:"lockup,omitempty"`
	Claim  uint64 `protobuf:"varint,2,opt,name=claim,proto3" json:"claim,omitempty"`
}

func (x *ReversePair_Fees_MinerFees) Reset() {
	*x = ReversePair_Fees_MinerFees{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltzrpc_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReversePair_Fees_MinerFees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReversePair_Fees_MinerFees) ProtoMessage() {}

func (x *ReversePair_Fees_MinerFees) ProtoReflect() protoreflect.Message {
	mi := &file_boltzrpc_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReversePair_Fees_MinerFees.ProtoReflect.Descriptor instead.
func (*ReversePair_Fees_MinerFees) Descriptor() ([]byte, []int) {
	return file_boltzrpc_proto_rawDescGZIP(), []int{10, 0, 0}
}

func (x *ReversePair_Fees_MinerFees) GetLockup() uint64 {
	if x != nil {
		return x.Lockup
	}
	return 0
}

func (x *ReversePair_Fees_MinerFees) GetClaim() uint64 {
	if x != nil {
		return x.Claim
	}
	return 0
}

var File_boltzrpc_proto protoreflect.FileDescriptor

var file_boltzrpc_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x52, 0x0a, 0x04, 0x50, 0x61, 0x69, 0x72, 0x12,
	0x26, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x22, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x02, 0x74, 0x6f, 0x22, 0xd8, 0x06, 0x0a, 0x08,
	0x53, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x12, 0x29, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62, 0x6f,
	0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x5f, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x65, 0x65,
	0x6d, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x6b, 0x75,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x6c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x0e, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x6c, 0x74,
	0x7a, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x6c, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0b, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24,
	0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x65,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x0a, 0x6f, 0x6e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62,
	0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x22, 0x81, 0x02, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x77, 0x61, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x69, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18,
	0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16,
	0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x6f, 0x75, 0x74, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x8f, 0x01, 0x0a, 0x17, 0x43,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x77,
	0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x77, 0x61, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x73, 0x77, 0x61, 0x70, 0x12, 0x48,
	0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xd9, 0x06, 0x0a,
	0x0f, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d,
	0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x64, 0x65, 0x65, 0x6d, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x6e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x6c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x61, 0x69,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x12, 0x2e, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x26, 0x0a,
	0x0c, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b,
	0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x6e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x02, 0x52, 0x0a, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x5f,
	0x6d, 0x73, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x0e, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x4d, 0x73, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50,
	0x61, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x6b, 0x65, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x66, 0x65, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x66, 0x65, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x66, 0x65, 0x65, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x22, 0x48, 0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x74, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x62, 0x74, 0x63, 0x12, 0x1b, 0x0a, 0x06, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x22, 0x10, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0xa8, 0x03, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x75, 0x74,
	0x6f, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0d, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x21, 0x0a, 0x0a, 0x6c, 0x6e, 0x64, 0x5f, 0x70, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x6c, 0x6e,
	0x64, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x27,
	0x0a, 0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x77, 0x61, 0x70, 0x73, 0x12, 0x36, 0x0a, 0x15, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x77, 0x61, 0x70, 0x73, 0x22,
	0x75, 0x0a, 0x06, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x37, 0x0a,
	0x18, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x15, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x61, 0x6c, 0x5a, 0x65, 0x72, 0x6f, 0x43, 0x6f, 0x6e, 0x66,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfe, 0x01, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x6d, 0x61,
	0x72, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x30,
	0x0a, 0x04, 0x66, 0x65, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62,
	0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e,
	0x65, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x46, 0x65, 0x65, 0x73, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73,
	0x1a, 0x45, 0x0a, 0x04, 0x46, 0x65, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x69,
	0x6e, 0x65, 0x72, 0x46, 0x65, 0x65, 0x73, 0x22, 0xdc, 0x02, 0x0a, 0x0b, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x61, 0x69, 0x72, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x2e, 0x0a,
	0x04, 0x66, 0x65, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f,
	0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x61,
	0x69, 0x72, 0x2e, 0x46, 0x65, 0x65, 0x73, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x1a, 0xa6, 0x01,
	0x0a, 0x04, 0x46, 0x65, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x66, 0x65, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6f, 0x6c,
	0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x61, 0x69,
	0x72, 0x2e, 0x46, 0x65, 0x65, 0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x46, 0x65, 0x65, 0x73,
	0x52, 0x09, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x46, 0x65, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x09, 0x4d,
	0x69, 0x6e, 0x65, 0x72, 0x46, 0x65, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x75, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x22, 0x7a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x61, 0x69,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x73, 0x75,
	0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69,
	0x6e, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e,
	0x65, 0x12, 0x2f, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x22, 0x3d, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x46, 0x65, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x22, 0x51, 0x0a, 0x04, 0x46, 0x65, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x6d, 0x69, 0x6e,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a,
	0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x46, 0x65, 0x65, 0x73, 0x52, 0x05, 0x6d,
	0x69, 0x6e, 0x65, 0x72, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x66, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63,
	0x2e, 0x46, 0x65, 0x65, 0x73, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f,
	0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x06, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x77,
	0x61, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x00, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x01, 0x52, 0x02, 0x74, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x02, 0x52, 0x06, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2e,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x48, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74, 0x6f, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x77, 0x61,
	0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x77,
	0x61, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x6f, 0x6c, 0x74,
	0x7a, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73,
	0x77, 0x61, 0x70, 0x73, 0x12, 0x4e, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69,
	0x6e, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x77, 0x61, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f,
	0x73, 0x77, 0x61, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f,
	0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x77,
	0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53,
	0x77, 0x61, 0x70, 0x73, 0x22, 0x3d, 0x0a, 0x11, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x77,
	0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x77, 0x61, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x53, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x77, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x73, 0x77, 0x61, 0x70, 0x12, 0x48, 0x0a, 0x10, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x73,
	0x77, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x6c, 0x74,
	0x7a, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x77, 0x61, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x77, 0x61,
	0x70, 0x22, 0x3d, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x22, 0x6d, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x8f, 0x02, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x6f,
	0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x52, 0x04, 0x70, 0x61, 0x69,
	0x72, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73,
	0x65, 0x6e, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12,
	0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x22, 0xe9, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x77, 0x61, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x69, 0x70, 0x32, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x69, 0x70, 0x32,
	0x31, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x22, 0x75, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a,
	0x11, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x22, 0xe1, 0x02, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x7a, 0x65,
	0x72, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x5a, 0x65, 0x72, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x22, 0x0a,
	0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x6f,
	0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x52, 0x04, 0x70, 0x61, 0x69,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x06,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x11, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49,
	0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50,
	0x61, 0x79, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x69, 0x6d, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x22, 0x9f, 0x02, 0x0a, 0x19, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x6b, 0x75, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a,
	0x15, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6d, 0x69, 0x6c,
	0x6c, 0x69, 0x5f, 0x73, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x12,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x53,
	0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x12, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x18, 0x0a, 0x16, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x6c,
	0x69, 0x5f, 0x73, 0x61, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x2f, 0x0a, 0x09, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6c, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6c, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6c, 0x6e, 0x64, 0x22, 0xa8, 0x01, 0x0a, 0x10,
	0x4c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x23, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62,
	0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x61, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x61, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x09, 0x53, 0x77, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x65,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46,
	0x65, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x76, 0x67, 0x5f, 0x66, 0x65,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x76, 0x67, 0x46, 0x65, 0x65,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x76, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x76, 0x0a, 0x06, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0xd9,
	0x01, 0x0a, 0x11, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e,
	0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x78, 0x70, 0x75, 0x62, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x78, 0x70, 0x75, 0x62, 0x88, 0x01, 0x01, 0x12, 0x2c,
	0x0a, 0x0f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0e, 0x63, 0x6f, 0x72, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a,
	0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x03, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x78, 0x70, 0x75, 0x62, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x50, 0x0a, 0x0a, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xac, 0x01, 0x0a,
	0x13, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6f, 0x6c, 0x74,
	0x7a, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x6d, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x5e, 0x0a, 0x14, 0x53, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x75,
	0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x7b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0b,
	0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x22, 0x16, 0x0a, 0x14, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x48, 0x00, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52,
	0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x22, 0x26, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5f, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x29,
	0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x06, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x62, 0x6f, 0x6c,
	0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64,
	0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64,
	0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63,
	0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x22, 0x35, 0x0a, 0x07, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x07,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52,
	0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x22, 0x5f, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x22, 0x67, 0x0a, 0x0a, 0x53, 0x75, 0x62,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a,
	0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x0a, 0x0d, 0x55, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x39, 0x0a, 0x1b, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x22, 0x38, 0x0a, 0x1c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x22, 0x41, 0x0a, 0x1b,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x6c, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6e, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6e, 0x65, 0x77, 0x2a,
	0x62, 0x0a, 0x09, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x46, 0x55, 0x4c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x42, 0x41, 0x4e, 0x44, 0x4f, 0x4e, 0x45,
	0x44, 0x10, 0x05, 0x2a, 0x1d, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x07, 0x0a, 0x03, 0x42, 0x54, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x42, 0x54, 0x43,
	0x10, 0x01, 0x32, 0xba, 0x0e, 0x0a, 0x05, 0x42, 0x6f, 0x6c, 0x74, 0x7a, 0x12, 0x3e, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f,
	0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x3b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x0e, 0x2e, 0x62, 0x6f, 0x6c,
	0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x1a, 0x17, 0x2e, 0x62, 0x6f, 0x6c,
	0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x50,
	0x61, 0x69, 0x72, 0x12, 0x37, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x0e, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x61, 0x69, 0x72, 0x1a, 0x15, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x3e, 0x0a, 0x08,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1a, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x69, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x09,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x77, 0x61, 0x70, 0x73, 0x12, 0x1a, 0x2e, 0x62, 0x6f, 0x6c, 0x74,
	0x7a, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x77, 0x61, 0x70, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x77, 0x61, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x48, 0x0a, 0x0a, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x77, 0x61, 0x70,
	0x12, 0x1b, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x77, 0x61, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x53, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x62, 0x6f,
	0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x77, 0x61, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x6f, 0x6c, 0x74,
	0x7a, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53,
	0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x2e,
	0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x77, 0x61, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x6f,
	0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x77, 0x61, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x43, 0x0a, 0x07,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x18, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02,
	0x01, 0x12, 0x47, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x77, 0x61, 0x70, 0x12,
	0x1b, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62,
	0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x77,
	0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1e, 0x2e, 0x62, 0x6f,
	0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x6f,
	0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x77, 0x61,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x5c,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53,
	0x77, 0x61, 0x70, 0x12, 0x22, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x77, 0x61, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x62,
	0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x62, 0x6f,
	0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a,
	0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72,
	0x70, 0x63, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x45, 0x0a, 0x0d, 0x53, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x62, 0x6f, 0x6c,
	0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x62, 0x6f, 0x6c,
	0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x48, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x14, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x20, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63,
	0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x1a, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x10, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x12, 0x5a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x25, 0x2e, 0x62, 0x6f,
	0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12,
	0x4d, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12,
	0x1d, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36,
	0x0a, 0x04, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x06, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x17, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x65, 0x0a, 0x14, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x25, 0x2e, 0x62, 0x6f, 0x6c, 0x74,
	0x7a, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x25, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42,
	0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x42, 0x6f,
	0x6c, 0x74, 0x7a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x62, 0x6f, 0x6c, 0x74,
	0x7a, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x72, 0x70,
	0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_boltzrpc_proto_rawDescOnce sync.Once
	file_boltzrpc_proto_rawDescData = file_boltzrpc_proto_rawDesc
)

func file_boltzrpc_proto_rawDescGZIP() []byte {
	file_boltzrpc_proto_rawDescOnce.Do(func() {
		file_boltzrpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_boltzrpc_proto_rawDescData)
	})
	return file_boltzrpc_proto_rawDescData
}

var file_boltzrpc_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_boltzrpc_proto_msgTypes = make([]protoimpl.MessageInfo, 56)
var file_boltzrpc_proto_goTypes = []interface{}{
	(SwapState)(0),                       // 0: boltzrpc.SwapState
	(Currency)(0),                        // 1: boltzrpc.Currency
	(*Pair)(nil),                         // 2: boltzrpc.Pair
	(*SwapInfo)(nil),                     // 3: boltzrpc.SwapInfo
	(*ChannelCreationInfo)(nil),          // 4: boltzrpc.ChannelCreationInfo
	(*CombinedChannelSwapInfo)(nil),      // 5: boltzrpc.CombinedChannelSwapInfo
	(*ReverseSwapInfo)(nil),              // 6: boltzrpc.ReverseSwapInfo
	(*BlockHeights)(nil),                 // 7: boltzrpc.BlockHeights
	(*GetInfoRequest)(nil),               // 8: boltzrpc.GetInfoRequest
	(*GetInfoResponse)(nil),              // 9: boltzrpc.GetInfoResponse
	(*Limits)(nil),                       // 10: boltzrpc.Limits
	(*SubmarinePair)(nil),                // 11: boltzrpc.SubmarinePair
	(*ReversePair)(nil),                  // 12: boltzrpc.ReversePair
	(*GetPairsResponse)(nil),             // 13: boltzrpc.GetPairsResponse
	(*MinerFees)(nil),                    // 14: boltzrpc.MinerFees
	(*Fees)(nil),                         // 15: boltzrpc.Fees
	(*GetServiceInfoRequest)(nil),        // 16: boltzrpc.GetServiceInfoRequest
	(*GetServiceInfoResponse)(nil),       // 17: boltzrpc.GetServiceInfoResponse
	(*ListSwapsRequest)(nil),             // 18: boltzrpc.ListSwapsRequest
	(*ListSwapsResponse)(nil),            // 19: boltzrpc.ListSwapsResponse
	(*RefundSwapRequest)(nil),            // 20: boltzrpc.RefundSwapRequest
	(*GetSwapInfoRequest)(nil),           // 21: boltzrpc.GetSwapInfoRequest
	(*GetSwapInfoResponse)(nil),          // 22: boltzrpc.GetSwapInfoResponse
	(*DepositRequest)(nil),               // 23: boltzrpc.DepositRequest
	(*DepositResponse)(nil),              // 24: boltzrpc.DepositResponse
	(*CreateSwapRequest)(nil),            // 25: boltzrpc.CreateSwapRequest
	(*CreateSwapResponse)(nil),           // 26: boltzrpc.CreateSwapResponse
	(*CreateChannelRequest)(nil),         // 27: boltzrpc.CreateChannelRequest
	(*CreateReverseSwapRequest)(nil),     // 28: boltzrpc.CreateReverseSwapRequest
	(*CreateReverseSwapResponse)(nil),    // 29: boltzrpc.CreateReverseSwapResponse
	(*ChannelId)(nil),                    // 30: boltzrpc.ChannelId
	(*LightningChannel)(nil),             // 31: boltzrpc.LightningChannel
	(*SwapStats)(nil),                    // 32: boltzrpc.SwapStats
	(*Budget)(nil),                       // 33: boltzrpc.Budget
	(*WalletCredentials)(nil),            // 34: boltzrpc.WalletCredentials
	(*WalletInfo)(nil),                   // 35: boltzrpc.WalletInfo
	(*ImportWalletRequest)(nil),          // 36: boltzrpc.ImportWalletRequest
	(*CreateWalletRequest)(nil),          // 37: boltzrpc.CreateWalletRequest
	(*SetSubaccountRequest)(nil),         // 38: boltzrpc.SetSubaccountRequest
	(*GetSubaccountsRequest)(nil),        // 39: boltzrpc.GetSubaccountsRequest
	(*GetSubaccountsResponse)(nil),       // 40: boltzrpc.GetSubaccountsResponse
	(*ImportWalletResponse)(nil),         // 41: boltzrpc.ImportWalletResponse
	(*GetWalletsRequest)(nil),            // 42: boltzrpc.GetWalletsRequest
	(*GetWalletRequest)(nil),             // 43: boltzrpc.GetWalletRequest
	(*GetWalletCredentialsRequest)(nil),  // 44: boltzrpc.GetWalletCredentialsRequest
	(*RemoveWalletRequest)(nil),          // 45: boltzrpc.RemoveWalletRequest
	(*Wallet)(nil),                       // 46: boltzrpc.Wallet
	(*Wallets)(nil),                      // 47: boltzrpc.Wallets
	(*Balance)(nil),                      // 48: boltzrpc.Balance
	(*Subaccount)(nil),                   // 49: boltzrpc.Subaccount
	(*RemoveWalletResponse)(nil),         // 50: boltzrpc.RemoveWalletResponse
	(*UnlockRequest)(nil),                // 51: boltzrpc.UnlockRequest
	(*VerifyWalletPasswordRequest)(nil),  // 52: boltzrpc.VerifyWalletPasswordRequest
	(*VerifyWalletPasswordResponse)(nil), // 53: boltzrpc.VerifyWalletPasswordResponse
	(*ChangeWalletPasswordRequest)(nil),  // 54: boltzrpc.ChangeWalletPasswordRequest
	(*SubmarinePair_Fees)(nil),           // 55: boltzrpc.SubmarinePair.Fees
	(*ReversePair_Fees)(nil),             // 56: boltzrpc.ReversePair.Fees
	(*ReversePair_Fees_MinerFees)(nil),   // 57: boltzrpc.ReversePair.Fees.MinerFees
	(*empty.Empty)(nil),                  // 58: google.protobuf.Empty
}
var file_boltzrpc_proto_depIdxs = []int32{
	1,  // 0: boltzrpc.Pair.from:type_name -> boltzrpc.Currency
	1,  // 1: boltzrpc.Pair.to:type_name -> boltzrpc.Currency
	2,  // 2: boltzrpc.SwapInfo.pair:type_name -> boltzrpc.Pair
	0,  // 3: boltzrpc.SwapInfo.state:type_name -> boltzrpc.SwapState
	30, // 4: boltzrpc.SwapInfo.chan_ids:type_name -> boltzrpc.ChannelId
	3,  // 5: boltzrpc.CombinedChannelSwapInfo.swap:type_name -> boltzrpc.SwapInfo
	4,  // 6: boltzrpc.CombinedChannelSwapInfo.channel_creation:type_name -> boltzrpc.ChannelCreationInfo
	0,  // 7: boltzrpc.ReverseSwapInfo.state:type_name -> boltzrpc.SwapState
	2,  // 8: boltzrpc.ReverseSwapInfo.pair:type_name -> boltzrpc.Pair
	30, // 9: boltzrpc.ReverseSwapInfo.chan_ids:type_name -> boltzrpc.ChannelId
	7,  // 10: boltzrpc.GetInfoResponse.block_heights:type_name -> boltzrpc.BlockHeights
	2,  // 11: boltzrpc.SubmarinePair.pair:type_name -> boltzrpc.Pair
	10, // 12: boltzrpc.SubmarinePair.limits:type_name -> boltzrpc.Limits
	55, // 13: boltzrpc.SubmarinePair.fees:type_name -> boltzrpc.SubmarinePair.Fees
	2,  // 14: boltzrpc.ReversePair.pair:type_name -> boltzrpc.Pair
	10, // 15: boltzrpc.ReversePair.limits:type_name -> boltzrpc.Limits
	56, // 16: boltzrpc.ReversePair.fees:type_name -> boltzrpc.ReversePair.Fees
	11, // 17: boltzrpc.GetPairsResponse.submarine:type_name -> boltzrpc.SubmarinePair
	12, // 18: boltzrpc.GetPairsResponse.reverse:type_name -> boltzrpc.ReversePair
	14, // 19: boltzrpc.Fees.miner:type_name -> boltzrpc.MinerFees
	15, // 20: boltzrpc.GetServiceInfoResponse.fees:type_name -> boltzrpc.Fees
	10, // 21: boltzrpc.GetServiceInfoResponse.limits:type_name -> boltzrpc.Limits
	1,  // 22: boltzrpc.ListSwapsRequest.from:type_name -> boltzrpc.Currency
	1,  // 23: boltzrpc.ListSwapsRequest.to:type_name -> boltzrpc.Currency
	0,  // 24: boltzrpc.ListSwapsRequest.state:type_name -> boltzrpc.SwapState
	3,  // 25: boltzrpc.ListSwapsResponse.swaps:type_name -> boltzrpc.SwapInfo
	5,  // 26: boltzrpc.ListSwapsResponse.channel_creations:type_name -> boltzrpc.CombinedChannelSwapInfo
	6,  // 27: boltzrpc.ListSwapsResponse.reverse_swaps:type_name -> boltzrpc.ReverseSwapInfo
	3,  // 28: boltzrpc.GetSwapInfoResponse.swap:type_name -> boltzrpc.SwapInfo
	4,  // 29: boltzrpc.GetSwapInfoResponse.channel_creation:type_name -> boltzrpc.ChannelCreationInfo
	6,  // 30: boltzrpc.GetSwapInfoResponse.reverse_swap:type_name -> boltzrpc.ReverseSwapInfo
	2,  // 31: boltzrpc.CreateSwapRequest.pair:type_name -> boltzrpc.Pair
	2,  // 32: boltzrpc.CreateReverseSwapRequest.pair:type_name -> boltzrpc.Pair
	30, // 33: boltzrpc.LightningChannel.id:type_name -> boltzrpc.ChannelId
	1,  // 34: boltzrpc.WalletInfo.currency:type_name -> boltzrpc.Currency
	34, // 35: boltzrpc.ImportWalletRequest.credentials:type_name -> boltzrpc.WalletCredentials
	35, // 36: boltzrpc.ImportWalletRequest.info:type_name -> boltzrpc.WalletInfo
	35, // 37: boltzrpc.CreateWalletRequest.info:type_name -> boltzrpc.WalletInfo
	49, // 38: boltzrpc.GetSubaccountsResponse.subaccounts:type_name -> boltzrpc.Subaccount
	1,  // 39: boltzrpc.GetWalletsRequest.currency:type_name -> boltzrpc.Currency
	1,  // 40: boltzrpc.Wallet.currency:type_name -> boltzrpc.Currency
	48, // 41: boltzrpc.Wallet.balance:type_name -> boltzrpc.Balance
	46, // 42: boltzrpc.Wallets.wallets:type_name -> boltzrpc.Wallet
	48, // 43: boltzrpc.Subaccount.balance:type_name -> boltzrpc.Balance
	57, // 44: boltzrpc.ReversePair.Fees.miner_fees:type_name -> boltzrpc.ReversePair.Fees.MinerFees
	8,  // 45: boltzrpc.Boltz.GetInfo:input_type -> boltzrpc.GetInfoRequest
	16, // 46: boltzrpc.Boltz.GetServiceInfo:input_type -> boltzrpc.GetServiceInfoRequest
	2,  // 47: boltzrpc.Boltz.GetSubmarinePair:input_type -> boltzrpc.Pair
	2,  // 48: boltzrpc.Boltz.GetReversePair:input_type -> boltzrpc.Pair
	58, // 49: boltzrpc.Boltz.GetPairs:input_type -> google.protobuf.Empty
	18, // 50: boltzrpc.Boltz.ListSwaps:input_type -> boltzrpc.ListSwapsRequest
	20, // 51: boltzrpc.Boltz.RefundSwap:input_type -> boltzrpc.RefundSwapRequest
	21, // 52: boltzrpc.Boltz.GetSwapInfo:input_type -> boltzrpc.GetSwapInfoRequest
	21, // 53: boltzrpc.Boltz.GetSwapInfoStream:input_type -> boltzrpc.GetSwapInfoRequest
	23, // 54: boltzrpc.Boltz.Deposit:input_type -> boltzrpc.DepositRequest
	25, // 55: boltzrpc.Boltz.CreateSwap:input_type -> boltzrpc.CreateSwapRequest
	27, // 56: boltzrpc.Boltz.CreateChannel:input_type -> boltzrpc.CreateChannelRequest
	28, // 57: boltzrpc.Boltz.CreateReverseSwap:input_type -> boltzrpc.CreateReverseSwapRequest
	37, // 58: boltzrpc.Boltz.CreateWallet:input_type -> boltzrpc.CreateWalletRequest
	36, // 59: boltzrpc.Boltz.ImportWallet:input_type -> boltzrpc.ImportWalletRequest
	38, // 60: boltzrpc.Boltz.SetSubaccount:input_type -> boltzrpc.SetSubaccountRequest
	35, // 61: boltzrpc.Boltz.GetSubaccounts:input_type -> boltzrpc.WalletInfo
	42, // 62: boltzrpc.Boltz.GetWallets:input_type -> boltzrpc.GetWalletsRequest
	43, // 63: boltzrpc.Boltz.GetWallet:input_type -> boltzrpc.GetWalletRequest
	44, // 64: boltzrpc.Boltz.GetWalletCredentials:input_type -> boltzrpc.GetWalletCredentialsRequest
	45, // 65: boltzrpc.Boltz.RemoveWallet:input_type -> boltzrpc.RemoveWalletRequest
	58, // 66: boltzrpc.Boltz.Stop:input_type -> google.protobuf.Empty
	51, // 67: boltzrpc.Boltz.Unlock:input_type -> boltzrpc.UnlockRequest
	52, // 68: boltzrpc.Boltz.VerifyWalletPassword:input_type -> boltzrpc.VerifyWalletPasswordRequest
	54, // 69: boltzrpc.Boltz.ChangeWalletPassword:input_type -> boltzrpc.ChangeWalletPasswordRequest
	9,  // 70: boltzrpc.Boltz.GetInfo:output_type -> boltzrpc.GetInfoResponse
	17, // 71: boltzrpc.Boltz.GetServiceInfo:output_type -> boltzrpc.GetServiceInfoResponse
	11, // 72: boltzrpc.Boltz.GetSubmarinePair:output_type -> boltzrpc.SubmarinePair
	12, // 73: boltzrpc.Boltz.GetReversePair:output_type -> boltzrpc.ReversePair
	13, // 74: boltzrpc.Boltz.GetPairs:output_type -> boltzrpc.GetPairsResponse
	19, // 75: boltzrpc.Boltz.ListSwaps:output_type -> boltzrpc.ListSwapsResponse
	22, // 76: boltzrpc.Boltz.RefundSwap:output_type -> boltzrpc.GetSwapInfoResponse
	22, // 77: boltzrpc.Boltz.GetSwapInfo:output_type -> boltzrpc.GetSwapInfoResponse
	22, // 78: boltzrpc.Boltz.GetSwapInfoStream:output_type -> boltzrpc.GetSwapInfoResponse
	24, // 79: boltzrpc.Boltz.Deposit:output_type -> boltzrpc.DepositResponse
	26, // 80: boltzrpc.Boltz.CreateSwap:output_type -> boltzrpc.CreateSwapResponse
	26, // 81: boltzrpc.Boltz.CreateChannel:output_type -> boltzrpc.CreateSwapResponse
	29, // 82: boltzrpc.Boltz.CreateReverseSwap:output_type -> boltzrpc.CreateReverseSwapResponse
	34, // 83: boltzrpc.Boltz.CreateWallet:output_type -> boltzrpc.WalletCredentials
	46, // 84: boltzrpc.Boltz.ImportWallet:output_type -> boltzrpc.Wallet
	49, // 85: boltzrpc.Boltz.SetSubaccount:output_type -> boltzrpc.Subaccount
	40, // 86: boltzrpc.Boltz.GetSubaccounts:output_type -> boltzrpc.GetSubaccountsResponse
	47, // 87: boltzrpc.Boltz.GetWallets:output_type -> boltzrpc.Wallets
	46, // 88: boltzrpc.Boltz.GetWallet:output_type -> boltzrpc.Wallet
	34, // 89: boltzrpc.Boltz.GetWalletCredentials:output_type -> boltzrpc.WalletCredentials
	50, // 90: boltzrpc.Boltz.RemoveWallet:output_type -> boltzrpc.RemoveWalletResponse
	58, // 91: boltzrpc.Boltz.Stop:output_type -> google.protobuf.Empty
	58, // 92: boltzrpc.Boltz.Unlock:output_type -> google.protobuf.Empty
	53, // 93: boltzrpc.Boltz.VerifyWalletPassword:output_type -> boltzrpc.VerifyWalletPasswordResponse
	58, // 94: boltzrpc.Boltz.ChangeWalletPassword:output_type -> google.protobuf.Empty
	70, // [70:95] is the sub-list for method output_type
	45, // [45:70] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_boltzrpc_proto_init() }
func file_boltzrpc_proto_init() {
	if File_boltzrpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_boltzrpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelCreationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CombinedChannelSwapInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReverseSwapInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHeights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Limits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmarinePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReversePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPairsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinerFees); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fees); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSwapsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSwapsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundSwapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSwapInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSwapInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSwapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSwapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReverseSwapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReverseSwapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LightningChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Budget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSubaccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubaccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubaccountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportWalletResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletCredentialsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wallets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subaccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveWalletResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyWalletPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyWalletPasswordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeWalletPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmarinePair_Fees); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReversePair_Fees); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltzrpc_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReversePair_Fees_MinerFees); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_boltzrpc_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_boltzrpc_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_boltzrpc_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_boltzrpc_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_boltzrpc_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_boltzrpc_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_boltzrpc_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_boltzrpc_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_boltzrpc_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_boltzrpc_proto_msgTypes[35].OneofWrappers = []interface{}{}
	file_boltzrpc_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_boltzrpc_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_boltzrpc_proto_msgTypes[40].OneofWrappers = []interface{}{}
	file_boltzrpc_proto_msgTypes[42].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_boltzrpc_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   56,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_boltzrpc_proto_goTypes,
		DependencyIndexes: file_boltzrpc_proto_depIdxs,
		EnumInfos:         file_boltzrpc_proto_enumTypes,
		MessageInfos:      file_boltzrpc_proto_msgTypes,
	}.Build()
	File_boltzrpc_proto = out.File
	file_boltzrpc_proto_rawDesc = nil
	file_boltzrpc_proto_goTypes = nil
	file_boltzrpc_proto_depIdxs = nil
}
