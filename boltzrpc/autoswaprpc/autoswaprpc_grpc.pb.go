// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0
// source: autoswaprpc/autoswaprpc.proto

package autoswaprpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AutoSwap_GetSwapRecommendations_FullMethodName = "/autoswaprpc.AutoSwap/GetSwapRecommendations"
	AutoSwap_GetStatus_FullMethodName              = "/autoswaprpc.AutoSwap/GetStatus"
	AutoSwap_ResetConfig_FullMethodName            = "/autoswaprpc.AutoSwap/ResetConfig"
	AutoSwap_SetConfig_FullMethodName              = "/autoswaprpc.AutoSwap/SetConfig"
	AutoSwap_SetConfigValue_FullMethodName         = "/autoswaprpc.AutoSwap/SetConfigValue"
	AutoSwap_GetConfig_FullMethodName              = "/autoswaprpc.AutoSwap/GetConfig"
	AutoSwap_ReloadConfig_FullMethodName           = "/autoswaprpc.AutoSwap/ReloadConfig"
)

// AutoSwapClient is the client API for AutoSwap service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AutoSwapClient interface {
	//
	//Returns a list of swaps which are currently recommended by autoswap. Also works when autoswap is not running.
	GetSwapRecommendations(ctx context.Context, in *GetSwapRecommendationsRequest, opts ...grpc.CallOption) (*GetSwapRecommendationsResponse, error)
	//
	//Returns the current budget of autoswap and some relevant stats.
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	//
	//Resets the configuration to default values.
	ResetConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config, error)
	//
	//Allows setting multiple json-encoded config values at once. Autoswap will reload the configuration after this call.
	SetConfig(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Config, error)
	//
	//Allows setting a specific value in the configuration. Autoswap will reload the configuration after this call.
	SetConfigValue(ctx context.Context, in *SetConfigValueRequest, opts ...grpc.CallOption) (*Config, error)
	//
	//Returns the currently used configurationencoded as json.
	//If a key is specfied, only the value of that key will be returned.
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*Config, error)
	//
	//Reloads the configuration from disk.
	ReloadConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config, error)
}

type autoSwapClient struct {
	cc grpc.ClientConnInterface
}

func NewAutoSwapClient(cc grpc.ClientConnInterface) AutoSwapClient {
	return &autoSwapClient{cc}
}

func (c *autoSwapClient) GetSwapRecommendations(ctx context.Context, in *GetSwapRecommendationsRequest, opts ...grpc.CallOption) (*GetSwapRecommendationsResponse, error) {
	out := new(GetSwapRecommendationsResponse)
	err := c.cc.Invoke(ctx, AutoSwap_GetSwapRecommendations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoSwapClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, AutoSwap_GetStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoSwapClient) ResetConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := c.cc.Invoke(ctx, AutoSwap_ResetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoSwapClient) SetConfig(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := c.cc.Invoke(ctx, AutoSwap_SetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoSwapClient) SetConfigValue(ctx context.Context, in *SetConfigValueRequest, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := c.cc.Invoke(ctx, AutoSwap_SetConfigValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoSwapClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := c.cc.Invoke(ctx, AutoSwap_GetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoSwapClient) ReloadConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := c.cc.Invoke(ctx, AutoSwap_ReloadConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AutoSwapServer is the server API for AutoSwap service.
// All implementations must embed UnimplementedAutoSwapServer
// for forward compatibility
type AutoSwapServer interface {
	//
	//Returns a list of swaps which are currently recommended by autoswap. Also works when autoswap is not running.
	GetSwapRecommendations(context.Context, *GetSwapRecommendationsRequest) (*GetSwapRecommendationsResponse, error)
	//
	//Returns the current budget of autoswap and some relevant stats.
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	//
	//Resets the configuration to default values.
	ResetConfig(context.Context, *emptypb.Empty) (*Config, error)
	//
	//Allows setting multiple json-encoded config values at once. Autoswap will reload the configuration after this call.
	SetConfig(context.Context, *Config) (*Config, error)
	//
	//Allows setting a specific value in the configuration. Autoswap will reload the configuration after this call.
	SetConfigValue(context.Context, *SetConfigValueRequest) (*Config, error)
	//
	//Returns the currently used configurationencoded as json.
	//If a key is specfied, only the value of that key will be returned.
	GetConfig(context.Context, *GetConfigRequest) (*Config, error)
	//
	//Reloads the configuration from disk.
	ReloadConfig(context.Context, *emptypb.Empty) (*Config, error)
	mustEmbedUnimplementedAutoSwapServer()
}

// UnimplementedAutoSwapServer must be embedded to have forward compatible implementations.
type UnimplementedAutoSwapServer struct {
}

func (UnimplementedAutoSwapServer) GetSwapRecommendations(context.Context, *GetSwapRecommendationsRequest) (*GetSwapRecommendationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwapRecommendations not implemented")
}
func (UnimplementedAutoSwapServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedAutoSwapServer) ResetConfig(context.Context, *emptypb.Empty) (*Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetConfig not implemented")
}
func (UnimplementedAutoSwapServer) SetConfig(context.Context, *Config) (*Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedAutoSwapServer) SetConfigValue(context.Context, *SetConfigValueRequest) (*Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfigValue not implemented")
}
func (UnimplementedAutoSwapServer) GetConfig(context.Context, *GetConfigRequest) (*Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedAutoSwapServer) ReloadConfig(context.Context, *emptypb.Empty) (*Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadConfig not implemented")
}
func (UnimplementedAutoSwapServer) mustEmbedUnimplementedAutoSwapServer() {}

// UnsafeAutoSwapServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AutoSwapServer will
// result in compilation errors.
type UnsafeAutoSwapServer interface {
	mustEmbedUnimplementedAutoSwapServer()
}

func RegisterAutoSwapServer(s grpc.ServiceRegistrar, srv AutoSwapServer) {
	s.RegisterService(&AutoSwap_ServiceDesc, srv)
}

func _AutoSwap_GetSwapRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwapRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoSwapServer).GetSwapRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoSwap_GetSwapRecommendations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoSwapServer).GetSwapRecommendations(ctx, req.(*GetSwapRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoSwap_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoSwapServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoSwap_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoSwapServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoSwap_ResetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoSwapServer).ResetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoSwap_ResetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoSwapServer).ResetConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoSwap_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoSwapServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoSwap_SetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoSwapServer).SetConfig(ctx, req.(*Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoSwap_SetConfigValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoSwapServer).SetConfigValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoSwap_SetConfigValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoSwapServer).SetConfigValue(ctx, req.(*SetConfigValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoSwap_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoSwapServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoSwap_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoSwapServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoSwap_ReloadConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoSwapServer).ReloadConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoSwap_ReloadConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoSwapServer).ReloadConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AutoSwap_ServiceDesc is the grpc.ServiceDesc for AutoSwap service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AutoSwap_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "autoswaprpc.AutoSwap",
	HandlerType: (*AutoSwapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSwapRecommendations",
			Handler:    _AutoSwap_GetSwapRecommendations_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _AutoSwap_GetStatus_Handler,
		},
		{
			MethodName: "ResetConfig",
			Handler:    _AutoSwap_ResetConfig_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _AutoSwap_SetConfig_Handler,
		},
		{
			MethodName: "SetConfigValue",
			Handler:    _AutoSwap_SetConfigValue_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _AutoSwap_GetConfig_Handler,
		},
		{
			MethodName: "ReloadConfig",
			Handler:    _AutoSwap_ReloadConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "autoswaprpc/autoswaprpc.proto",
}
